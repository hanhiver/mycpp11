// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
namespace ws_engine {
class CameraParameter;
class CameraParameterDefaultTypeInternal;
extern CameraParameterDefaultTypeInternal _CameraParameter_default_instance_;
class DisplayDevice;
class DisplayDeviceDefaultTypeInternal;
extern DisplayDeviceDefaultTypeInternal _DisplayDevice_default_instance_;
class IPL_BLUR;
class IPL_BLURDefaultTypeInternal;
extern IPL_BLURDefaultTypeInternal _IPL_BLUR_default_instance_;
class IPL_Engine;
class IPL_EngineDefaultTypeInternal;
extern IPL_EngineDefaultTypeInternal _IPL_Engine_default_instance_;
class IPL_RGB2Gray;
class IPL_RGB2GrayDefaultTypeInternal;
extern IPL_RGB2GrayDefaultTypeInternal _IPL_RGB2Gray_default_instance_;
class ImageParameter;
class ImageParameterDefaultTypeInternal;
extern ImageParameterDefaultTypeInternal _ImageParameter_default_instance_;
class ImageProcessingLayer;
class ImageProcessingLayerDefaultTypeInternal;
extern ImageProcessingLayerDefaultTypeInternal _ImageProcessingLayer_default_instance_;
class PointParameter;
class PointParameterDefaultTypeInternal;
extern PointParameterDefaultTypeInternal _PointParameter_default_instance_;
class ROIParameter;
class ROIParameterDefaultTypeInternal;
extern ROIParameterDefaultTypeInternal _ROIParameter_default_instance_;
class SystemParameter;
class SystemParameterDefaultTypeInternal;
extern SystemParameterDefaultTypeInternal _SystemParameter_default_instance_;
class WsEngineParameters;
class WsEngineParametersDefaultTypeInternal;
extern WsEngineParametersDefaultTypeInternal _WsEngineParameters_default_instance_;
}  // namespace ws_engine
PROTOBUF_NAMESPACE_OPEN
template<> ::ws_engine::CameraParameter* Arena::CreateMaybeMessage<::ws_engine::CameraParameter>(Arena*);
template<> ::ws_engine::DisplayDevice* Arena::CreateMaybeMessage<::ws_engine::DisplayDevice>(Arena*);
template<> ::ws_engine::IPL_BLUR* Arena::CreateMaybeMessage<::ws_engine::IPL_BLUR>(Arena*);
template<> ::ws_engine::IPL_Engine* Arena::CreateMaybeMessage<::ws_engine::IPL_Engine>(Arena*);
template<> ::ws_engine::IPL_RGB2Gray* Arena::CreateMaybeMessage<::ws_engine::IPL_RGB2Gray>(Arena*);
template<> ::ws_engine::ImageParameter* Arena::CreateMaybeMessage<::ws_engine::ImageParameter>(Arena*);
template<> ::ws_engine::ImageProcessingLayer* Arena::CreateMaybeMessage<::ws_engine::ImageProcessingLayer>(Arena*);
template<> ::ws_engine::PointParameter* Arena::CreateMaybeMessage<::ws_engine::PointParameter>(Arena*);
template<> ::ws_engine::ROIParameter* Arena::CreateMaybeMessage<::ws_engine::ROIParameter>(Arena*);
template<> ::ws_engine::SystemParameter* Arena::CreateMaybeMessage<::ws_engine::SystemParameter>(Arena*);
template<> ::ws_engine::WsEngineParameters* Arena::CreateMaybeMessage<::ws_engine::WsEngineParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ws_engine {

enum CameraParameter_CameraType : int {
  CameraParameter_CameraType_gige = 0,
  CameraParameter_CameraType_usb = 1,
  CameraParameter_CameraType_image_file = 2,
  CameraParameter_CameraType_video_file = 3
};
bool CameraParameter_CameraType_IsValid(int value);
constexpr CameraParameter_CameraType CameraParameter_CameraType_CameraType_MIN = CameraParameter_CameraType_gige;
constexpr CameraParameter_CameraType CameraParameter_CameraType_CameraType_MAX = CameraParameter_CameraType_video_file;
constexpr int CameraParameter_CameraType_CameraType_ARRAYSIZE = CameraParameter_CameraType_CameraType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraParameter_CameraType_descriptor();
template<typename T>
inline const std::string& CameraParameter_CameraType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraParameter_CameraType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraParameter_CameraType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraParameter_CameraType_descriptor(), enum_t_value);
}
inline bool CameraParameter_CameraType_Parse(
    const std::string& name, CameraParameter_CameraType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraParameter_CameraType>(
    CameraParameter_CameraType_descriptor(), name, value);
}
// ===================================================================

class SystemParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.SystemParameter) */ {
 public:
  SystemParameter();
  virtual ~SystemParameter();

  SystemParameter(const SystemParameter& from);
  SystemParameter(SystemParameter&& from) noexcept
    : SystemParameter() {
    *this = ::std::move(from);
  }

  inline SystemParameter& operator=(const SystemParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemParameter& operator=(SystemParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemParameter* internal_default_instance() {
    return reinterpret_cast<const SystemParameter*>(
               &_SystemParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SystemParameter& a, SystemParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemParameter* New() const final {
    return CreateMaybeMessage<SystemParameter>(nullptr);
  }

  SystemParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemParameter& from);
  void MergeFrom(const SystemParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.SystemParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugFileRootFieldNumber = 1,
    kDebugLevelFieldNumber = 2,
  };
  // optional string debug_file_root = 1 [default = "/tmp"];
  bool has_debug_file_root() const;
  private:
  bool _internal_has_debug_file_root() const;
  public:
  void clear_debug_file_root();
  const std::string& debug_file_root() const;
  void set_debug_file_root(const std::string& value);
  void set_debug_file_root(std::string&& value);
  void set_debug_file_root(const char* value);
  void set_debug_file_root(const char* value, size_t size);
  std::string* mutable_debug_file_root();
  std::string* release_debug_file_root();
  void set_allocated_debug_file_root(std::string* debug_file_root);
  private:
  const std::string& _internal_debug_file_root() const;
  void _internal_set_debug_file_root(const std::string& value);
  std::string* _internal_mutable_debug_file_root();
  public:

  // optional string debug_level = 2 [default = "info"];
  bool has_debug_level() const;
  private:
  bool _internal_has_debug_level() const;
  public:
  void clear_debug_level();
  const std::string& debug_level() const;
  void set_debug_level(const std::string& value);
  void set_debug_level(std::string&& value);
  void set_debug_level(const char* value);
  void set_debug_level(const char* value, size_t size);
  std::string* mutable_debug_level();
  std::string* release_debug_level();
  void set_allocated_debug_level(std::string* debug_level);
  private:
  const std::string& _internal_debug_level() const;
  void _internal_set_debug_level(const std::string& value);
  std::string* _internal_mutable_debug_level();
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.SystemParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_debug_file_root_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_file_root_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_debug_level_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_level_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class CameraParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.CameraParameter) */ {
 public:
  CameraParameter();
  virtual ~CameraParameter();

  CameraParameter(const CameraParameter& from);
  CameraParameter(CameraParameter&& from) noexcept
    : CameraParameter() {
    *this = ::std::move(from);
  }

  inline CameraParameter& operator=(const CameraParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraParameter& operator=(CameraParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraParameter* internal_default_instance() {
    return reinterpret_cast<const CameraParameter*>(
               &_CameraParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraParameter& a, CameraParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraParameter* New() const final {
    return CreateMaybeMessage<CameraParameter>(nullptr);
  }

  CameraParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraParameter& from);
  void MergeFrom(const CameraParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.CameraParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CameraParameter_CameraType CameraType;
  static constexpr CameraType gige =
    CameraParameter_CameraType_gige;
  static constexpr CameraType usb =
    CameraParameter_CameraType_usb;
  static constexpr CameraType image_file =
    CameraParameter_CameraType_image_file;
  static constexpr CameraType video_file =
    CameraParameter_CameraType_video_file;
  static inline bool CameraType_IsValid(int value) {
    return CameraParameter_CameraType_IsValid(value);
  }
  static constexpr CameraType CameraType_MIN =
    CameraParameter_CameraType_CameraType_MIN;
  static constexpr CameraType CameraType_MAX =
    CameraParameter_CameraType_CameraType_MAX;
  static constexpr int CameraType_ARRAYSIZE =
    CameraParameter_CameraType_CameraType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CameraType_descriptor() {
    return CameraParameter_CameraType_descriptor();
  }
  template<typename T>
  static inline const std::string& CameraType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CameraType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CameraType_Name.");
    return CameraParameter_CameraType_Name(enum_t_value);
  }
  static inline bool CameraType_Parse(const std::string& name,
      CameraType* value) {
    return CameraParameter_CameraType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCameraNameFieldNumber = 2,
    kCameraTypeFieldNumber = 1,
    kCameraIdFieldNumber = 3,
    kCameraFpsFieldNumber = 4,
    kCameraAutoBalanceFieldNumber = 5,
  };
  // required string camera_name = 2;
  bool has_camera_name() const;
  private:
  bool _internal_has_camera_name() const;
  public:
  void clear_camera_name();
  const std::string& camera_name() const;
  void set_camera_name(const std::string& value);
  void set_camera_name(std::string&& value);
  void set_camera_name(const char* value);
  void set_camera_name(const char* value, size_t size);
  std::string* mutable_camera_name();
  std::string* release_camera_name();
  void set_allocated_camera_name(std::string* camera_name);
  private:
  const std::string& _internal_camera_name() const;
  void _internal_set_camera_name(const std::string& value);
  std::string* _internal_mutable_camera_name();
  public:

  // optional .ws_engine.CameraParameter.CameraType camera_type = 1 [default = gige];
  bool has_camera_type() const;
  private:
  bool _internal_has_camera_type() const;
  public:
  void clear_camera_type();
  ::ws_engine::CameraParameter_CameraType camera_type() const;
  void set_camera_type(::ws_engine::CameraParameter_CameraType value);
  private:
  ::ws_engine::CameraParameter_CameraType _internal_camera_type() const;
  void _internal_set_camera_type(::ws_engine::CameraParameter_CameraType value);
  public:

  // optional int32 camera_id = 3;
  bool has_camera_id() const;
  private:
  bool _internal_has_camera_id() const;
  public:
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 camera_fps = 4 [default = 0];
  bool has_camera_fps() const;
  private:
  bool _internal_has_camera_fps() const;
  public:
  void clear_camera_fps();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_fps() const;
  void set_camera_fps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera_fps() const;
  void _internal_set_camera_fps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool camera_auto_balance = 5 [default = false];
  bool has_camera_auto_balance() const;
  private:
  bool _internal_has_camera_auto_balance() const;
  public:
  void clear_camera_auto_balance();
  bool camera_auto_balance() const;
  void set_camera_auto_balance(bool value);
  private:
  bool _internal_camera_auto_balance() const;
  void _internal_set_camera_auto_balance(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.CameraParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_name_;
  int camera_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_fps_;
  bool camera_auto_balance_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class PointParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.PointParameter) */ {
 public:
  PointParameter();
  virtual ~PointParameter();

  PointParameter(const PointParameter& from);
  PointParameter(PointParameter&& from) noexcept
    : PointParameter() {
    *this = ::std::move(from);
  }

  inline PointParameter& operator=(const PointParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointParameter& operator=(PointParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointParameter* internal_default_instance() {
    return reinterpret_cast<const PointParameter*>(
               &_PointParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointParameter& a, PointParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PointParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointParameter* New() const final {
    return CreateMaybeMessage<PointParameter>(nullptr);
  }

  PointParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointParameter& from);
  void MergeFrom(const PointParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.PointParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.PointParameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class ROIParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.ROIParameter) */ {
 public:
  ROIParameter();
  virtual ~ROIParameter();

  ROIParameter(const ROIParameter& from);
  ROIParameter(ROIParameter&& from) noexcept
    : ROIParameter() {
    *this = ::std::move(from);
  }

  inline ROIParameter& operator=(const ROIParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIParameter& operator=(ROIParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIParameter* internal_default_instance() {
    return reinterpret_cast<const ROIParameter*>(
               &_ROIParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ROIParameter& a, ROIParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROIParameter* New() const final {
    return CreateMaybeMessage<ROIParameter>(nullptr);
  }

  ROIParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIParameter& from);
  void MergeFrom(const ROIParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.ROIParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftUpPointFieldNumber = 2,
    kRightBottomPointFieldNumber = 3,
    kEnableFieldNumber = 1,
  };
  // required .ws_engine.PointParameter left_up_point = 2;
  bool has_left_up_point() const;
  private:
  bool _internal_has_left_up_point() const;
  public:
  void clear_left_up_point();
  const ::ws_engine::PointParameter& left_up_point() const;
  ::ws_engine::PointParameter* release_left_up_point();
  ::ws_engine::PointParameter* mutable_left_up_point();
  void set_allocated_left_up_point(::ws_engine::PointParameter* left_up_point);
  private:
  const ::ws_engine::PointParameter& _internal_left_up_point() const;
  ::ws_engine::PointParameter* _internal_mutable_left_up_point();
  public:

  // required .ws_engine.PointParameter right_bottom_point = 3;
  bool has_right_bottom_point() const;
  private:
  bool _internal_has_right_bottom_point() const;
  public:
  void clear_right_bottom_point();
  const ::ws_engine::PointParameter& right_bottom_point() const;
  ::ws_engine::PointParameter* release_right_bottom_point();
  ::ws_engine::PointParameter* mutable_right_bottom_point();
  void set_allocated_right_bottom_point(::ws_engine::PointParameter* right_bottom_point);
  private:
  const ::ws_engine::PointParameter& _internal_right_bottom_point() const;
  ::ws_engine::PointParameter* _internal_mutable_right_bottom_point();
  public:

  // optional bool enable = 1 [default = true];
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.ROIParameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ws_engine::PointParameter* left_up_point_;
  ::ws_engine::PointParameter* right_bottom_point_;
  bool enable_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class ImageParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.ImageParameter) */ {
 public:
  ImageParameter();
  virtual ~ImageParameter();

  ImageParameter(const ImageParameter& from);
  ImageParameter(ImageParameter&& from) noexcept
    : ImageParameter() {
    *this = ::std::move(from);
  }

  inline ImageParameter& operator=(const ImageParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageParameter& operator=(ImageParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageParameter* internal_default_instance() {
    return reinterpret_cast<const ImageParameter*>(
               &_ImageParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ImageParameter& a, ImageParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageParameter* New() const final {
    return CreateMaybeMessage<ImageParameter>(nullptr);
  }

  ImageParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageParameter& from);
  void MergeFrom(const ImageParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.ImageParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kROIZoneFieldNumber = 5,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kChannelFieldNumber = 3,
    kDepthFieldNumber = 4,
  };
  // optional .ws_engine.ROIParameter ROI_zone = 5;
  bool has_roi_zone() const;
  private:
  bool _internal_has_roi_zone() const;
  public:
  void clear_roi_zone();
  const ::ws_engine::ROIParameter& roi_zone() const;
  ::ws_engine::ROIParameter* release_roi_zone();
  ::ws_engine::ROIParameter* mutable_roi_zone();
  void set_allocated_roi_zone(::ws_engine::ROIParameter* roi_zone);
  private:
  const ::ws_engine::ROIParameter& _internal_roi_zone() const;
  ::ws_engine::ROIParameter* _internal_mutable_roi_zone();
  public:

  // required int32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 channel = 3 [default = 1];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 depth = 4 [default = 8];
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.ImageParameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ws_engine::ROIParameter* roi_zone_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class ImageProcessingLayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.ImageProcessingLayer) */ {
 public:
  ImageProcessingLayer();
  virtual ~ImageProcessingLayer();

  ImageProcessingLayer(const ImageProcessingLayer& from);
  ImageProcessingLayer(ImageProcessingLayer&& from) noexcept
    : ImageProcessingLayer() {
    *this = ::std::move(from);
  }

  inline ImageProcessingLayer& operator=(const ImageProcessingLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageProcessingLayer& operator=(ImageProcessingLayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageProcessingLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageProcessingLayer* internal_default_instance() {
    return reinterpret_cast<const ImageProcessingLayer*>(
               &_ImageProcessingLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ImageProcessingLayer& a, ImageProcessingLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageProcessingLayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageProcessingLayer* New() const final {
    return CreateMaybeMessage<ImageProcessingLayer>(nullptr);
  }

  ImageProcessingLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageProcessingLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageProcessingLayer& from);
  void MergeFrom(const ImageProcessingLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageProcessingLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.ImageProcessingLayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLibFileFieldNumber = 4,
    kFuncNameFieldNumber = 5,
    kFuncArgsFieldNumber = 6,
    kImageInputFieldNumber = 2,
    kImageOutputFieldNumber = 3,
    kLayerIdFieldNumber = 1,
  };
  // required string lib_file = 4;
  bool has_lib_file() const;
  private:
  bool _internal_has_lib_file() const;
  public:
  void clear_lib_file();
  const std::string& lib_file() const;
  void set_lib_file(const std::string& value);
  void set_lib_file(std::string&& value);
  void set_lib_file(const char* value);
  void set_lib_file(const char* value, size_t size);
  std::string* mutable_lib_file();
  std::string* release_lib_file();
  void set_allocated_lib_file(std::string* lib_file);
  private:
  const std::string& _internal_lib_file() const;
  void _internal_set_lib_file(const std::string& value);
  std::string* _internal_mutable_lib_file();
  public:

  // required string func_name = 5;
  bool has_func_name() const;
  private:
  bool _internal_has_func_name() const;
  public:
  void clear_func_name();
  const std::string& func_name() const;
  void set_func_name(const std::string& value);
  void set_func_name(std::string&& value);
  void set_func_name(const char* value);
  void set_func_name(const char* value, size_t size);
  std::string* mutable_func_name();
  std::string* release_func_name();
  void set_allocated_func_name(std::string* func_name);
  private:
  const std::string& _internal_func_name() const;
  void _internal_set_func_name(const std::string& value);
  std::string* _internal_mutable_func_name();
  public:

  // optional string func_args = 6;
  bool has_func_args() const;
  private:
  bool _internal_has_func_args() const;
  public:
  void clear_func_args();
  const std::string& func_args() const;
  void set_func_args(const std::string& value);
  void set_func_args(std::string&& value);
  void set_func_args(const char* value);
  void set_func_args(const char* value, size_t size);
  std::string* mutable_func_args();
  std::string* release_func_args();
  void set_allocated_func_args(std::string* func_args);
  private:
  const std::string& _internal_func_args() const;
  void _internal_set_func_args(const std::string& value);
  std::string* _internal_mutable_func_args();
  public:

  // required .ws_engine.ImageParameter image_input = 2;
  bool has_image_input() const;
  private:
  bool _internal_has_image_input() const;
  public:
  void clear_image_input();
  const ::ws_engine::ImageParameter& image_input() const;
  ::ws_engine::ImageParameter* release_image_input();
  ::ws_engine::ImageParameter* mutable_image_input();
  void set_allocated_image_input(::ws_engine::ImageParameter* image_input);
  private:
  const ::ws_engine::ImageParameter& _internal_image_input() const;
  ::ws_engine::ImageParameter* _internal_mutable_image_input();
  public:

  // required .ws_engine.ImageParameter image_output = 3;
  bool has_image_output() const;
  private:
  bool _internal_has_image_output() const;
  public:
  void clear_image_output();
  const ::ws_engine::ImageParameter& image_output() const;
  ::ws_engine::ImageParameter* release_image_output();
  ::ws_engine::ImageParameter* mutable_image_output();
  void set_allocated_image_output(::ws_engine::ImageParameter* image_output);
  private:
  const ::ws_engine::ImageParameter& _internal_image_output() const;
  ::ws_engine::ImageParameter* _internal_mutable_image_output();
  public:

  // required int32 layer_id = 1;
  bool has_layer_id() const;
  private:
  bool _internal_has_layer_id() const;
  public:
  void clear_layer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_id() const;
  void set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_id() const;
  void _internal_set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.ImageProcessingLayer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lib_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_args_;
  ::ws_engine::ImageParameter* image_input_;
  ::ws_engine::ImageParameter* image_output_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_id_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class IPL_RGB2Gray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.IPL_RGB2Gray) */ {
 public:
  IPL_RGB2Gray();
  virtual ~IPL_RGB2Gray();

  IPL_RGB2Gray(const IPL_RGB2Gray& from);
  IPL_RGB2Gray(IPL_RGB2Gray&& from) noexcept
    : IPL_RGB2Gray() {
    *this = ::std::move(from);
  }

  inline IPL_RGB2Gray& operator=(const IPL_RGB2Gray& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPL_RGB2Gray& operator=(IPL_RGB2Gray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPL_RGB2Gray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPL_RGB2Gray* internal_default_instance() {
    return reinterpret_cast<const IPL_RGB2Gray*>(
               &_IPL_RGB2Gray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IPL_RGB2Gray& a, IPL_RGB2Gray& b) {
    a.Swap(&b);
  }
  inline void Swap(IPL_RGB2Gray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPL_RGB2Gray* New() const final {
    return CreateMaybeMessage<IPL_RGB2Gray>(nullptr);
  }

  IPL_RGB2Gray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPL_RGB2Gray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPL_RGB2Gray& from);
  void MergeFrom(const IPL_RGB2Gray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPL_RGB2Gray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.IPL_RGB2Gray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
    kChannelSelectedFieldNumber = 2,
  };
  // required .ws_engine.ImageProcessingLayer head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::ws_engine::ImageProcessingLayer& head() const;
  ::ws_engine::ImageProcessingLayer* release_head();
  ::ws_engine::ImageProcessingLayer* mutable_head();
  void set_allocated_head(::ws_engine::ImageProcessingLayer* head);
  private:
  const ::ws_engine::ImageProcessingLayer& _internal_head() const;
  ::ws_engine::ImageProcessingLayer* _internal_mutable_head();
  public:

  // optional int32 channel_selected = 2 [default = 0];
  bool has_channel_selected() const;
  private:
  bool _internal_has_channel_selected() const;
  public:
  void clear_channel_selected();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_selected() const;
  void set_channel_selected(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel_selected() const;
  void _internal_set_channel_selected(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.IPL_RGB2Gray)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ws_engine::ImageProcessingLayer* head_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_selected_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class IPL_BLUR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.IPL_BLUR) */ {
 public:
  IPL_BLUR();
  virtual ~IPL_BLUR();

  IPL_BLUR(const IPL_BLUR& from);
  IPL_BLUR(IPL_BLUR&& from) noexcept
    : IPL_BLUR() {
    *this = ::std::move(from);
  }

  inline IPL_BLUR& operator=(const IPL_BLUR& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPL_BLUR& operator=(IPL_BLUR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPL_BLUR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPL_BLUR* internal_default_instance() {
    return reinterpret_cast<const IPL_BLUR*>(
               &_IPL_BLUR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IPL_BLUR& a, IPL_BLUR& b) {
    a.Swap(&b);
  }
  inline void Swap(IPL_BLUR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPL_BLUR* New() const final {
    return CreateMaybeMessage<IPL_BLUR>(nullptr);
  }

  IPL_BLUR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPL_BLUR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPL_BLUR& from);
  void MergeFrom(const IPL_BLUR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPL_BLUR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.IPL_BLUR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
    kBlurLevelFieldNumber = 2,
  };
  // required .ws_engine.ImageProcessingLayer head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::ws_engine::ImageProcessingLayer& head() const;
  ::ws_engine::ImageProcessingLayer* release_head();
  ::ws_engine::ImageProcessingLayer* mutable_head();
  void set_allocated_head(::ws_engine::ImageProcessingLayer* head);
  private:
  const ::ws_engine::ImageProcessingLayer& _internal_head() const;
  ::ws_engine::ImageProcessingLayer* _internal_mutable_head();
  public:

  // optional int32 blur_level = 2 [default = 1];
  bool has_blur_level() const;
  private:
  bool _internal_has_blur_level() const;
  public:
  void clear_blur_level();
  ::PROTOBUF_NAMESPACE_ID::int32 blur_level() const;
  void set_blur_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blur_level() const;
  void _internal_set_blur_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.IPL_BLUR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ws_engine::ImageProcessingLayer* head_;
  ::PROTOBUF_NAMESPACE_ID::int32 blur_level_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class IPL_Engine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.IPL_Engine) */ {
 public:
  IPL_Engine();
  virtual ~IPL_Engine();

  IPL_Engine(const IPL_Engine& from);
  IPL_Engine(IPL_Engine&& from) noexcept
    : IPL_Engine() {
    *this = ::std::move(from);
  }

  inline IPL_Engine& operator=(const IPL_Engine& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPL_Engine& operator=(IPL_Engine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPL_Engine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPL_Engine* internal_default_instance() {
    return reinterpret_cast<const IPL_Engine*>(
               &_IPL_Engine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IPL_Engine& a, IPL_Engine& b) {
    a.Swap(&b);
  }
  inline void Swap(IPL_Engine* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPL_Engine* New() const final {
    return CreateMaybeMessage<IPL_Engine>(nullptr);
  }

  IPL_Engine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPL_Engine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPL_Engine& from);
  void MergeFrom(const IPL_Engine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPL_Engine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.IPL_Engine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRgb2GrayFieldNumber = 2,
    kBlurFieldNumber = 3,
    kWorkerFieldNumber = 1,
  };
  // optional .ws_engine.IPL_RGB2Gray rgb2gray = 2;
  bool has_rgb2gray() const;
  private:
  bool _internal_has_rgb2gray() const;
  public:
  void clear_rgb2gray();
  const ::ws_engine::IPL_RGB2Gray& rgb2gray() const;
  ::ws_engine::IPL_RGB2Gray* release_rgb2gray();
  ::ws_engine::IPL_RGB2Gray* mutable_rgb2gray();
  void set_allocated_rgb2gray(::ws_engine::IPL_RGB2Gray* rgb2gray);
  private:
  const ::ws_engine::IPL_RGB2Gray& _internal_rgb2gray() const;
  ::ws_engine::IPL_RGB2Gray* _internal_mutable_rgb2gray();
  public:

  // optional .ws_engine.IPL_BLUR blur = 3;
  bool has_blur() const;
  private:
  bool _internal_has_blur() const;
  public:
  void clear_blur();
  const ::ws_engine::IPL_BLUR& blur() const;
  ::ws_engine::IPL_BLUR* release_blur();
  ::ws_engine::IPL_BLUR* mutable_blur();
  void set_allocated_blur(::ws_engine::IPL_BLUR* blur);
  private:
  const ::ws_engine::IPL_BLUR& _internal_blur() const;
  ::ws_engine::IPL_BLUR* _internal_mutable_blur();
  public:

  // optional int32 worker = 1 [default = 1];
  bool has_worker() const;
  private:
  bool _internal_has_worker() const;
  public:
  void clear_worker();
  ::PROTOBUF_NAMESPACE_ID::int32 worker() const;
  void set_worker(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_worker() const;
  void _internal_set_worker(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.IPL_Engine)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ws_engine::IPL_RGB2Gray* rgb2gray_;
  ::ws_engine::IPL_BLUR* blur_;
  ::PROTOBUF_NAMESPACE_ID::int32 worker_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class DisplayDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.DisplayDevice) */ {
 public:
  DisplayDevice();
  virtual ~DisplayDevice();

  DisplayDevice(const DisplayDevice& from);
  DisplayDevice(DisplayDevice&& from) noexcept
    : DisplayDevice() {
    *this = ::std::move(from);
  }

  inline DisplayDevice& operator=(const DisplayDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayDevice& operator=(DisplayDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayDevice* internal_default_instance() {
    return reinterpret_cast<const DisplayDevice*>(
               &_DisplayDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DisplayDevice& a, DisplayDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayDevice* New() const final {
    return CreateMaybeMessage<DisplayDevice>(nullptr);
  }

  DisplayDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayDevice& from);
  void MergeFrom(const DisplayDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.DisplayDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFileNameFieldNumber = 2,
    kShowInScreenFieldNumber = 1,
  };
  // optional string output_file_name = 2;
  bool has_output_file_name() const;
  private:
  bool _internal_has_output_file_name() const;
  public:
  void clear_output_file_name();
  const std::string& output_file_name() const;
  void set_output_file_name(const std::string& value);
  void set_output_file_name(std::string&& value);
  void set_output_file_name(const char* value);
  void set_output_file_name(const char* value, size_t size);
  std::string* mutable_output_file_name();
  std::string* release_output_file_name();
  void set_allocated_output_file_name(std::string* output_file_name);
  private:
  const std::string& _internal_output_file_name() const;
  void _internal_set_output_file_name(const std::string& value);
  std::string* _internal_mutable_output_file_name();
  public:

  // required bool show_in_screen = 1 [default = true];
  bool has_show_in_screen() const;
  private:
  bool _internal_has_show_in_screen() const;
  public:
  void clear_show_in_screen();
  bool show_in_screen() const;
  void set_show_in_screen(bool value);
  private:
  bool _internal_show_in_screen() const;
  void _internal_set_show_in_screen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.DisplayDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_file_name_;
  bool show_in_screen_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class WsEngineParameters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws_engine.WsEngineParameters) */ {
 public:
  WsEngineParameters();
  virtual ~WsEngineParameters();

  WsEngineParameters(const WsEngineParameters& from);
  WsEngineParameters(WsEngineParameters&& from) noexcept
    : WsEngineParameters() {
    *this = ::std::move(from);
  }

  inline WsEngineParameters& operator=(const WsEngineParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline WsEngineParameters& operator=(WsEngineParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WsEngineParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WsEngineParameters* internal_default_instance() {
    return reinterpret_cast<const WsEngineParameters*>(
               &_WsEngineParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WsEngineParameters& a, WsEngineParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(WsEngineParameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WsEngineParameters* New() const final {
    return CreateMaybeMessage<WsEngineParameters>(nullptr);
  }

  WsEngineParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WsEngineParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WsEngineParameters& from);
  void MergeFrom(const WsEngineParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WsEngineParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws_engine.WsEngineParameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSysParamsFieldNumber = 1,
    kCameraFieldNumber = 2,
    kIplEngineFieldNumber = 3,
    kDisplayDeviceFieldNumber = 4,
  };
  // required .ws_engine.SystemParameter sys_params = 1;
  bool has_sys_params() const;
  private:
  bool _internal_has_sys_params() const;
  public:
  void clear_sys_params();
  const ::ws_engine::SystemParameter& sys_params() const;
  ::ws_engine::SystemParameter* release_sys_params();
  ::ws_engine::SystemParameter* mutable_sys_params();
  void set_allocated_sys_params(::ws_engine::SystemParameter* sys_params);
  private:
  const ::ws_engine::SystemParameter& _internal_sys_params() const;
  ::ws_engine::SystemParameter* _internal_mutable_sys_params();
  public:

  // required .ws_engine.CameraParameter camera = 2;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::ws_engine::CameraParameter& camera() const;
  ::ws_engine::CameraParameter* release_camera();
  ::ws_engine::CameraParameter* mutable_camera();
  void set_allocated_camera(::ws_engine::CameraParameter* camera);
  private:
  const ::ws_engine::CameraParameter& _internal_camera() const;
  ::ws_engine::CameraParameter* _internal_mutable_camera();
  public:

  // required .ws_engine.IPL_Engine ipl_engine = 3;
  bool has_ipl_engine() const;
  private:
  bool _internal_has_ipl_engine() const;
  public:
  void clear_ipl_engine();
  const ::ws_engine::IPL_Engine& ipl_engine() const;
  ::ws_engine::IPL_Engine* release_ipl_engine();
  ::ws_engine::IPL_Engine* mutable_ipl_engine();
  void set_allocated_ipl_engine(::ws_engine::IPL_Engine* ipl_engine);
  private:
  const ::ws_engine::IPL_Engine& _internal_ipl_engine() const;
  ::ws_engine::IPL_Engine* _internal_mutable_ipl_engine();
  public:

  // optional .ws_engine.DisplayDevice display_device = 4;
  bool has_display_device() const;
  private:
  bool _internal_has_display_device() const;
  public:
  void clear_display_device();
  const ::ws_engine::DisplayDevice& display_device() const;
  ::ws_engine::DisplayDevice* release_display_device();
  ::ws_engine::DisplayDevice* mutable_display_device();
  void set_allocated_display_device(::ws_engine::DisplayDevice* display_device);
  private:
  const ::ws_engine::DisplayDevice& _internal_display_device() const;
  ::ws_engine::DisplayDevice* _internal_mutable_display_device();
  public:

  // @@protoc_insertion_point(class_scope:ws_engine.WsEngineParameters)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ws_engine::SystemParameter* sys_params_;
  ::ws_engine::CameraParameter* camera_;
  ::ws_engine::IPL_Engine* ipl_engine_;
  ::ws_engine::DisplayDevice* display_device_;
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemParameter

// optional string debug_file_root = 1 [default = "/tmp"];
inline bool SystemParameter::_internal_has_debug_file_root() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SystemParameter::has_debug_file_root() const {
  return _internal_has_debug_file_root();
}
inline void SystemParameter::clear_debug_file_root() {
  debug_file_root_.ClearToDefaultNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemParameter::debug_file_root() const {
  // @@protoc_insertion_point(field_get:ws_engine.SystemParameter.debug_file_root)
  return _internal_debug_file_root();
}
inline void SystemParameter::set_debug_file_root(const std::string& value) {
  _internal_set_debug_file_root(value);
  // @@protoc_insertion_point(field_set:ws_engine.SystemParameter.debug_file_root)
}
inline std::string* SystemParameter::mutable_debug_file_root() {
  // @@protoc_insertion_point(field_mutable:ws_engine.SystemParameter.debug_file_root)
  return _internal_mutable_debug_file_root();
}
inline const std::string& SystemParameter::_internal_debug_file_root() const {
  return debug_file_root_.GetNoArena();
}
inline void SystemParameter::_internal_set_debug_file_root(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  debug_file_root_.SetNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get(), value);
}
inline void SystemParameter::set_debug_file_root(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  debug_file_root_.SetNoArena(
    &::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ws_engine.SystemParameter.debug_file_root)
}
inline void SystemParameter::set_debug_file_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  debug_file_root_.SetNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.SystemParameter.debug_file_root)
}
inline void SystemParameter::set_debug_file_root(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  debug_file_root_.SetNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.SystemParameter.debug_file_root)
}
inline std::string* SystemParameter::_internal_mutable_debug_file_root() {
  _has_bits_[0] |= 0x00000001u;
  return debug_file_root_.MutableNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get());
}
inline std::string* SystemParameter::release_debug_file_root() {
  // @@protoc_insertion_point(field_release:ws_engine.SystemParameter.debug_file_root)
  if (!_internal_has_debug_file_root()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return debug_file_root_.ReleaseNonDefaultNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get());
}
inline void SystemParameter::set_allocated_debug_file_root(std::string* debug_file_root) {
  if (debug_file_root != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  debug_file_root_.SetAllocatedNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get(), debug_file_root);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.SystemParameter.debug_file_root)
}

// optional string debug_level = 2 [default = "info"];
inline bool SystemParameter::_internal_has_debug_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SystemParameter::has_debug_level() const {
  return _internal_has_debug_level();
}
inline void SystemParameter::clear_debug_level() {
  debug_level_.ClearToDefaultNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemParameter::debug_level() const {
  // @@protoc_insertion_point(field_get:ws_engine.SystemParameter.debug_level)
  return _internal_debug_level();
}
inline void SystemParameter::set_debug_level(const std::string& value) {
  _internal_set_debug_level(value);
  // @@protoc_insertion_point(field_set:ws_engine.SystemParameter.debug_level)
}
inline std::string* SystemParameter::mutable_debug_level() {
  // @@protoc_insertion_point(field_mutable:ws_engine.SystemParameter.debug_level)
  return _internal_mutable_debug_level();
}
inline const std::string& SystemParameter::_internal_debug_level() const {
  return debug_level_.GetNoArena();
}
inline void SystemParameter::_internal_set_debug_level(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  debug_level_.SetNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get(), value);
}
inline void SystemParameter::set_debug_level(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  debug_level_.SetNoArena(
    &::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ws_engine.SystemParameter.debug_level)
}
inline void SystemParameter::set_debug_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  debug_level_.SetNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.SystemParameter.debug_level)
}
inline void SystemParameter::set_debug_level(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  debug_level_.SetNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.SystemParameter.debug_level)
}
inline std::string* SystemParameter::_internal_mutable_debug_level() {
  _has_bits_[0] |= 0x00000002u;
  return debug_level_.MutableNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get());
}
inline std::string* SystemParameter::release_debug_level() {
  // @@protoc_insertion_point(field_release:ws_engine.SystemParameter.debug_level)
  if (!_internal_has_debug_level()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return debug_level_.ReleaseNonDefaultNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get());
}
inline void SystemParameter::set_allocated_debug_level(std::string* debug_level) {
  if (debug_level != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  debug_level_.SetAllocatedNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get(), debug_level);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.SystemParameter.debug_level)
}

// -------------------------------------------------------------------

// CameraParameter

// optional .ws_engine.CameraParameter.CameraType camera_type = 1 [default = gige];
inline bool CameraParameter::_internal_has_camera_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraParameter::has_camera_type() const {
  return _internal_has_camera_type();
}
inline void CameraParameter::clear_camera_type() {
  camera_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ws_engine::CameraParameter_CameraType CameraParameter::_internal_camera_type() const {
  return static_cast< ::ws_engine::CameraParameter_CameraType >(camera_type_);
}
inline ::ws_engine::CameraParameter_CameraType CameraParameter::camera_type() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_type)
  return _internal_camera_type();
}
inline void CameraParameter::_internal_set_camera_type(::ws_engine::CameraParameter_CameraType value) {
  assert(::ws_engine::CameraParameter_CameraType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  camera_type_ = value;
}
inline void CameraParameter::set_camera_type(::ws_engine::CameraParameter_CameraType value) {
  _internal_set_camera_type(value);
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_type)
}

// required string camera_name = 2;
inline bool CameraParameter::_internal_has_camera_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraParameter::has_camera_name() const {
  return _internal_has_camera_name();
}
inline void CameraParameter::clear_camera_name() {
  camera_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraParameter::camera_name() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_name)
  return _internal_camera_name();
}
inline void CameraParameter::set_camera_name(const std::string& value) {
  _internal_set_camera_name(value);
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_name)
}
inline std::string* CameraParameter::mutable_camera_name() {
  // @@protoc_insertion_point(field_mutable:ws_engine.CameraParameter.camera_name)
  return _internal_mutable_camera_name();
}
inline const std::string& CameraParameter::_internal_camera_name() const {
  return camera_name_.GetNoArena();
}
inline void CameraParameter::_internal_set_camera_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraParameter::set_camera_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ws_engine.CameraParameter.camera_name)
}
inline void CameraParameter::set_camera_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.CameraParameter.camera_name)
}
inline void CameraParameter::set_camera_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.CameraParameter.camera_name)
}
inline std::string* CameraParameter::_internal_mutable_camera_name() {
  _has_bits_[0] |= 0x00000001u;
  return camera_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraParameter::release_camera_name() {
  // @@protoc_insertion_point(field_release:ws_engine.CameraParameter.camera_name)
  if (!_internal_has_camera_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return camera_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraParameter::set_allocated_camera_name(std::string* camera_name) {
  if (camera_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_name);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.CameraParameter.camera_name)
}

// optional int32 camera_id = 3;
inline bool CameraParameter::_internal_has_camera_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CameraParameter::has_camera_id() const {
  return _internal_has_camera_id();
}
inline void CameraParameter::clear_camera_id() {
  camera_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParameter::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParameter::camera_id() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_id)
  return _internal_camera_id();
}
inline void CameraParameter::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  camera_id_ = value;
}
inline void CameraParameter::set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_id)
}

// optional int32 camera_fps = 4 [default = 0];
inline bool CameraParameter::_internal_has_camera_fps() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CameraParameter::has_camera_fps() const {
  return _internal_has_camera_fps();
}
inline void CameraParameter::clear_camera_fps() {
  camera_fps_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParameter::_internal_camera_fps() const {
  return camera_fps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParameter::camera_fps() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_fps)
  return _internal_camera_fps();
}
inline void CameraParameter::_internal_set_camera_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  camera_fps_ = value;
}
inline void CameraParameter::set_camera_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera_fps(value);
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_fps)
}

// optional bool camera_auto_balance = 5 [default = false];
inline bool CameraParameter::_internal_has_camera_auto_balance() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CameraParameter::has_camera_auto_balance() const {
  return _internal_has_camera_auto_balance();
}
inline void CameraParameter::clear_camera_auto_balance() {
  camera_auto_balance_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CameraParameter::_internal_camera_auto_balance() const {
  return camera_auto_balance_;
}
inline bool CameraParameter::camera_auto_balance() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_auto_balance)
  return _internal_camera_auto_balance();
}
inline void CameraParameter::_internal_set_camera_auto_balance(bool value) {
  _has_bits_[0] |= 0x00000010u;
  camera_auto_balance_ = value;
}
inline void CameraParameter::set_camera_auto_balance(bool value) {
  _internal_set_camera_auto_balance(value);
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_auto_balance)
}

// -------------------------------------------------------------------

// PointParameter

// required int32 x = 1;
inline bool PointParameter::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointParameter::has_x() const {
  return _internal_has_x();
}
inline void PointParameter::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointParameter::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointParameter::x() const {
  // @@protoc_insertion_point(field_get:ws_engine.PointParameter.x)
  return _internal_x();
}
inline void PointParameter::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void PointParameter::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ws_engine.PointParameter.x)
}

// required int32 y = 2;
inline bool PointParameter::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointParameter::has_y() const {
  return _internal_has_y();
}
inline void PointParameter::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointParameter::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointParameter::y() const {
  // @@protoc_insertion_point(field_get:ws_engine.PointParameter.y)
  return _internal_y();
}
inline void PointParameter::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void PointParameter::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ws_engine.PointParameter.y)
}

// -------------------------------------------------------------------

// ROIParameter

// optional bool enable = 1 [default = true];
inline bool ROIParameter::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROIParameter::has_enable() const {
  return _internal_has_enable();
}
inline void ROIParameter::clear_enable() {
  enable_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ROIParameter::_internal_enable() const {
  return enable_;
}
inline bool ROIParameter::enable() const {
  // @@protoc_insertion_point(field_get:ws_engine.ROIParameter.enable)
  return _internal_enable();
}
inline void ROIParameter::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_ = value;
}
inline void ROIParameter::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:ws_engine.ROIParameter.enable)
}

// required .ws_engine.PointParameter left_up_point = 2;
inline bool ROIParameter::_internal_has_left_up_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || left_up_point_ != nullptr);
  return value;
}
inline bool ROIParameter::has_left_up_point() const {
  return _internal_has_left_up_point();
}
inline void ROIParameter::clear_left_up_point() {
  if (left_up_point_ != nullptr) left_up_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ws_engine::PointParameter& ROIParameter::_internal_left_up_point() const {
  const ::ws_engine::PointParameter* p = left_up_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::PointParameter*>(
      &::ws_engine::_PointParameter_default_instance_);
}
inline const ::ws_engine::PointParameter& ROIParameter::left_up_point() const {
  // @@protoc_insertion_point(field_get:ws_engine.ROIParameter.left_up_point)
  return _internal_left_up_point();
}
inline ::ws_engine::PointParameter* ROIParameter::release_left_up_point() {
  // @@protoc_insertion_point(field_release:ws_engine.ROIParameter.left_up_point)
  _has_bits_[0] &= ~0x00000001u;
  ::ws_engine::PointParameter* temp = left_up_point_;
  left_up_point_ = nullptr;
  return temp;
}
inline ::ws_engine::PointParameter* ROIParameter::_internal_mutable_left_up_point() {
  _has_bits_[0] |= 0x00000001u;
  if (left_up_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::PointParameter>(GetArenaNoVirtual());
    left_up_point_ = p;
  }
  return left_up_point_;
}
inline ::ws_engine::PointParameter* ROIParameter::mutable_left_up_point() {
  // @@protoc_insertion_point(field_mutable:ws_engine.ROIParameter.left_up_point)
  return _internal_mutable_left_up_point();
}
inline void ROIParameter::set_allocated_left_up_point(::ws_engine::PointParameter* left_up_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_up_point_;
  }
  if (left_up_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left_up_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_up_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  left_up_point_ = left_up_point;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ROIParameter.left_up_point)
}

// required .ws_engine.PointParameter right_bottom_point = 3;
inline bool ROIParameter::_internal_has_right_bottom_point() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || right_bottom_point_ != nullptr);
  return value;
}
inline bool ROIParameter::has_right_bottom_point() const {
  return _internal_has_right_bottom_point();
}
inline void ROIParameter::clear_right_bottom_point() {
  if (right_bottom_point_ != nullptr) right_bottom_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ws_engine::PointParameter& ROIParameter::_internal_right_bottom_point() const {
  const ::ws_engine::PointParameter* p = right_bottom_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::PointParameter*>(
      &::ws_engine::_PointParameter_default_instance_);
}
inline const ::ws_engine::PointParameter& ROIParameter::right_bottom_point() const {
  // @@protoc_insertion_point(field_get:ws_engine.ROIParameter.right_bottom_point)
  return _internal_right_bottom_point();
}
inline ::ws_engine::PointParameter* ROIParameter::release_right_bottom_point() {
  // @@protoc_insertion_point(field_release:ws_engine.ROIParameter.right_bottom_point)
  _has_bits_[0] &= ~0x00000002u;
  ::ws_engine::PointParameter* temp = right_bottom_point_;
  right_bottom_point_ = nullptr;
  return temp;
}
inline ::ws_engine::PointParameter* ROIParameter::_internal_mutable_right_bottom_point() {
  _has_bits_[0] |= 0x00000002u;
  if (right_bottom_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::PointParameter>(GetArenaNoVirtual());
    right_bottom_point_ = p;
  }
  return right_bottom_point_;
}
inline ::ws_engine::PointParameter* ROIParameter::mutable_right_bottom_point() {
  // @@protoc_insertion_point(field_mutable:ws_engine.ROIParameter.right_bottom_point)
  return _internal_mutable_right_bottom_point();
}
inline void ROIParameter::set_allocated_right_bottom_point(::ws_engine::PointParameter* right_bottom_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_bottom_point_;
  }
  if (right_bottom_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right_bottom_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_bottom_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  right_bottom_point_ = right_bottom_point;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ROIParameter.right_bottom_point)
}

// -------------------------------------------------------------------

// ImageParameter

// required int32 width = 1;
inline bool ImageParameter::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageParameter::has_width() const {
  return _internal_has_width();
}
inline void ImageParameter::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageParameter::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageParameter::width() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.width)
  return _internal_width();
}
inline void ImageParameter::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void ImageParameter::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.width)
}

// required int32 height = 2;
inline bool ImageParameter::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageParameter::has_height() const {
  return _internal_has_height();
}
inline void ImageParameter::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageParameter::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageParameter::height() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.height)
  return _internal_height();
}
inline void ImageParameter::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void ImageParameter::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.height)
}

// optional int32 channel = 3 [default = 1];
inline bool ImageParameter::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageParameter::has_channel() const {
  return _internal_has_channel();
}
inline void ImageParameter::clear_channel() {
  channel_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageParameter::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageParameter::channel() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.channel)
  return _internal_channel();
}
inline void ImageParameter::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  channel_ = value;
}
inline void ImageParameter::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.channel)
}

// optional int32 depth = 4 [default = 8];
inline bool ImageParameter::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageParameter::has_depth() const {
  return _internal_has_depth();
}
inline void ImageParameter::clear_depth() {
  depth_ = 8;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageParameter::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageParameter::depth() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.depth)
  return _internal_depth();
}
inline void ImageParameter::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  depth_ = value;
}
inline void ImageParameter::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.depth)
}

// optional .ws_engine.ROIParameter ROI_zone = 5;
inline bool ImageParameter::_internal_has_roi_zone() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || roi_zone_ != nullptr);
  return value;
}
inline bool ImageParameter::has_roi_zone() const {
  return _internal_has_roi_zone();
}
inline void ImageParameter::clear_roi_zone() {
  if (roi_zone_ != nullptr) roi_zone_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ws_engine::ROIParameter& ImageParameter::_internal_roi_zone() const {
  const ::ws_engine::ROIParameter* p = roi_zone_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::ROIParameter*>(
      &::ws_engine::_ROIParameter_default_instance_);
}
inline const ::ws_engine::ROIParameter& ImageParameter::roi_zone() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.ROI_zone)
  return _internal_roi_zone();
}
inline ::ws_engine::ROIParameter* ImageParameter::release_roi_zone() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageParameter.ROI_zone)
  _has_bits_[0] &= ~0x00000001u;
  ::ws_engine::ROIParameter* temp = roi_zone_;
  roi_zone_ = nullptr;
  return temp;
}
inline ::ws_engine::ROIParameter* ImageParameter::_internal_mutable_roi_zone() {
  _has_bits_[0] |= 0x00000001u;
  if (roi_zone_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::ROIParameter>(GetArenaNoVirtual());
    roi_zone_ = p;
  }
  return roi_zone_;
}
inline ::ws_engine::ROIParameter* ImageParameter::mutable_roi_zone() {
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageParameter.ROI_zone)
  return _internal_mutable_roi_zone();
}
inline void ImageParameter::set_allocated_roi_zone(::ws_engine::ROIParameter* roi_zone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roi_zone_;
  }
  if (roi_zone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roi_zone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_zone, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  roi_zone_ = roi_zone;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageParameter.ROI_zone)
}

// -------------------------------------------------------------------

// ImageProcessingLayer

// required int32 layer_id = 1;
inline bool ImageProcessingLayer::_internal_has_layer_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImageProcessingLayer::has_layer_id() const {
  return _internal_has_layer_id();
}
inline void ImageProcessingLayer::clear_layer_id() {
  layer_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageProcessingLayer::_internal_layer_id() const {
  return layer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageProcessingLayer::layer_id() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.layer_id)
  return _internal_layer_id();
}
inline void ImageProcessingLayer::_internal_set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  layer_id_ = value;
}
inline void ImageProcessingLayer::set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_id(value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageProcessingLayer.layer_id)
}

// required .ws_engine.ImageParameter image_input = 2;
inline bool ImageProcessingLayer::_internal_has_image_input() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || image_input_ != nullptr);
  return value;
}
inline bool ImageProcessingLayer::has_image_input() const {
  return _internal_has_image_input();
}
inline void ImageProcessingLayer::clear_image_input() {
  if (image_input_ != nullptr) image_input_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ws_engine::ImageParameter& ImageProcessingLayer::_internal_image_input() const {
  const ::ws_engine::ImageParameter* p = image_input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::ImageParameter*>(
      &::ws_engine::_ImageParameter_default_instance_);
}
inline const ::ws_engine::ImageParameter& ImageProcessingLayer::image_input() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.image_input)
  return _internal_image_input();
}
inline ::ws_engine::ImageParameter* ImageProcessingLayer::release_image_input() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.image_input)
  _has_bits_[0] &= ~0x00000008u;
  ::ws_engine::ImageParameter* temp = image_input_;
  image_input_ = nullptr;
  return temp;
}
inline ::ws_engine::ImageParameter* ImageProcessingLayer::_internal_mutable_image_input() {
  _has_bits_[0] |= 0x00000008u;
  if (image_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::ImageParameter>(GetArenaNoVirtual());
    image_input_ = p;
  }
  return image_input_;
}
inline ::ws_engine::ImageParameter* ImageProcessingLayer::mutable_image_input() {
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.image_input)
  return _internal_mutable_image_input();
}
inline void ImageProcessingLayer::set_allocated_image_input(::ws_engine::ImageParameter* image_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_input_;
  }
  if (image_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_input, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  image_input_ = image_input;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.image_input)
}

// required .ws_engine.ImageParameter image_output = 3;
inline bool ImageProcessingLayer::_internal_has_image_output() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || image_output_ != nullptr);
  return value;
}
inline bool ImageProcessingLayer::has_image_output() const {
  return _internal_has_image_output();
}
inline void ImageProcessingLayer::clear_image_output() {
  if (image_output_ != nullptr) image_output_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ws_engine::ImageParameter& ImageProcessingLayer::_internal_image_output() const {
  const ::ws_engine::ImageParameter* p = image_output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::ImageParameter*>(
      &::ws_engine::_ImageParameter_default_instance_);
}
inline const ::ws_engine::ImageParameter& ImageProcessingLayer::image_output() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.image_output)
  return _internal_image_output();
}
inline ::ws_engine::ImageParameter* ImageProcessingLayer::release_image_output() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.image_output)
  _has_bits_[0] &= ~0x00000010u;
  ::ws_engine::ImageParameter* temp = image_output_;
  image_output_ = nullptr;
  return temp;
}
inline ::ws_engine::ImageParameter* ImageProcessingLayer::_internal_mutable_image_output() {
  _has_bits_[0] |= 0x00000010u;
  if (image_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::ImageParameter>(GetArenaNoVirtual());
    image_output_ = p;
  }
  return image_output_;
}
inline ::ws_engine::ImageParameter* ImageProcessingLayer::mutable_image_output() {
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.image_output)
  return _internal_mutable_image_output();
}
inline void ImageProcessingLayer::set_allocated_image_output(::ws_engine::ImageParameter* image_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_output_;
  }
  if (image_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_output, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  image_output_ = image_output;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.image_output)
}

// required string lib_file = 4;
inline bool ImageProcessingLayer::_internal_has_lib_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageProcessingLayer::has_lib_file() const {
  return _internal_has_lib_file();
}
inline void ImageProcessingLayer::clear_lib_file() {
  lib_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageProcessingLayer::lib_file() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.lib_file)
  return _internal_lib_file();
}
inline void ImageProcessingLayer::set_lib_file(const std::string& value) {
  _internal_set_lib_file(value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageProcessingLayer.lib_file)
}
inline std::string* ImageProcessingLayer::mutable_lib_file() {
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.lib_file)
  return _internal_mutable_lib_file();
}
inline const std::string& ImageProcessingLayer::_internal_lib_file() const {
  return lib_file_.GetNoArena();
}
inline void ImageProcessingLayer::_internal_set_lib_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lib_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageProcessingLayer::set_lib_file(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lib_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ws_engine.ImageProcessingLayer.lib_file)
}
inline void ImageProcessingLayer::set_lib_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lib_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.ImageProcessingLayer.lib_file)
}
inline void ImageProcessingLayer::set_lib_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lib_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.ImageProcessingLayer.lib_file)
}
inline std::string* ImageProcessingLayer::_internal_mutable_lib_file() {
  _has_bits_[0] |= 0x00000001u;
  return lib_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageProcessingLayer::release_lib_file() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.lib_file)
  if (!_internal_has_lib_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lib_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProcessingLayer::set_allocated_lib_file(std::string* lib_file) {
  if (lib_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lib_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lib_file);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.lib_file)
}

// required string func_name = 5;
inline bool ImageProcessingLayer::_internal_has_func_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageProcessingLayer::has_func_name() const {
  return _internal_has_func_name();
}
inline void ImageProcessingLayer::clear_func_name() {
  func_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImageProcessingLayer::func_name() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.func_name)
  return _internal_func_name();
}
inline void ImageProcessingLayer::set_func_name(const std::string& value) {
  _internal_set_func_name(value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageProcessingLayer.func_name)
}
inline std::string* ImageProcessingLayer::mutable_func_name() {
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.func_name)
  return _internal_mutable_func_name();
}
inline const std::string& ImageProcessingLayer::_internal_func_name() const {
  return func_name_.GetNoArena();
}
inline void ImageProcessingLayer::_internal_set_func_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  func_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageProcessingLayer::set_func_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  func_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ws_engine.ImageProcessingLayer.func_name)
}
inline void ImageProcessingLayer::set_func_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  func_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.ImageProcessingLayer.func_name)
}
inline void ImageProcessingLayer::set_func_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  func_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.ImageProcessingLayer.func_name)
}
inline std::string* ImageProcessingLayer::_internal_mutable_func_name() {
  _has_bits_[0] |= 0x00000002u;
  return func_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageProcessingLayer::release_func_name() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.func_name)
  if (!_internal_has_func_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return func_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProcessingLayer::set_allocated_func_name(std::string* func_name) {
  if (func_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  func_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), func_name);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.func_name)
}

// optional string func_args = 6;
inline bool ImageProcessingLayer::_internal_has_func_args() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageProcessingLayer::has_func_args() const {
  return _internal_has_func_args();
}
inline void ImageProcessingLayer::clear_func_args() {
  func_args_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ImageProcessingLayer::func_args() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.func_args)
  return _internal_func_args();
}
inline void ImageProcessingLayer::set_func_args(const std::string& value) {
  _internal_set_func_args(value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageProcessingLayer.func_args)
}
inline std::string* ImageProcessingLayer::mutable_func_args() {
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.func_args)
  return _internal_mutable_func_args();
}
inline const std::string& ImageProcessingLayer::_internal_func_args() const {
  return func_args_.GetNoArena();
}
inline void ImageProcessingLayer::_internal_set_func_args(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  func_args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageProcessingLayer::set_func_args(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  func_args_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ws_engine.ImageProcessingLayer.func_args)
}
inline void ImageProcessingLayer::set_func_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  func_args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.ImageProcessingLayer.func_args)
}
inline void ImageProcessingLayer::set_func_args(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  func_args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.ImageProcessingLayer.func_args)
}
inline std::string* ImageProcessingLayer::_internal_mutable_func_args() {
  _has_bits_[0] |= 0x00000004u;
  return func_args_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageProcessingLayer::release_func_args() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.func_args)
  if (!_internal_has_func_args()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return func_args_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProcessingLayer::set_allocated_func_args(std::string* func_args) {
  if (func_args != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  func_args_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), func_args);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.func_args)
}

// -------------------------------------------------------------------

// IPL_RGB2Gray

// required .ws_engine.ImageProcessingLayer head = 1;
inline bool IPL_RGB2Gray::_internal_has_head() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || head_ != nullptr);
  return value;
}
inline bool IPL_RGB2Gray::has_head() const {
  return _internal_has_head();
}
inline void IPL_RGB2Gray::clear_head() {
  if (head_ != nullptr) head_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ws_engine::ImageProcessingLayer& IPL_RGB2Gray::_internal_head() const {
  const ::ws_engine::ImageProcessingLayer* p = head_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::ImageProcessingLayer*>(
      &::ws_engine::_ImageProcessingLayer_default_instance_);
}
inline const ::ws_engine::ImageProcessingLayer& IPL_RGB2Gray::head() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_RGB2Gray.head)
  return _internal_head();
}
inline ::ws_engine::ImageProcessingLayer* IPL_RGB2Gray::release_head() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_RGB2Gray.head)
  _has_bits_[0] &= ~0x00000001u;
  ::ws_engine::ImageProcessingLayer* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::ws_engine::ImageProcessingLayer* IPL_RGB2Gray::_internal_mutable_head() {
  _has_bits_[0] |= 0x00000001u;
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::ImageProcessingLayer>(GetArenaNoVirtual());
    head_ = p;
  }
  return head_;
}
inline ::ws_engine::ImageProcessingLayer* IPL_RGB2Gray::mutable_head() {
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_RGB2Gray.head)
  return _internal_mutable_head();
}
inline void IPL_RGB2Gray::set_allocated_head(::ws_engine::ImageProcessingLayer* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_RGB2Gray.head)
}

// optional int32 channel_selected = 2 [default = 0];
inline bool IPL_RGB2Gray::_internal_has_channel_selected() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IPL_RGB2Gray::has_channel_selected() const {
  return _internal_has_channel_selected();
}
inline void IPL_RGB2Gray::clear_channel_selected() {
  channel_selected_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IPL_RGB2Gray::_internal_channel_selected() const {
  return channel_selected_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IPL_RGB2Gray::channel_selected() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_RGB2Gray.channel_selected)
  return _internal_channel_selected();
}
inline void IPL_RGB2Gray::_internal_set_channel_selected(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  channel_selected_ = value;
}
inline void IPL_RGB2Gray::set_channel_selected(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel_selected(value);
  // @@protoc_insertion_point(field_set:ws_engine.IPL_RGB2Gray.channel_selected)
}

// -------------------------------------------------------------------

// IPL_BLUR

// required .ws_engine.ImageProcessingLayer head = 1;
inline bool IPL_BLUR::_internal_has_head() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || head_ != nullptr);
  return value;
}
inline bool IPL_BLUR::has_head() const {
  return _internal_has_head();
}
inline void IPL_BLUR::clear_head() {
  if (head_ != nullptr) head_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ws_engine::ImageProcessingLayer& IPL_BLUR::_internal_head() const {
  const ::ws_engine::ImageProcessingLayer* p = head_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::ImageProcessingLayer*>(
      &::ws_engine::_ImageProcessingLayer_default_instance_);
}
inline const ::ws_engine::ImageProcessingLayer& IPL_BLUR::head() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_BLUR.head)
  return _internal_head();
}
inline ::ws_engine::ImageProcessingLayer* IPL_BLUR::release_head() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_BLUR.head)
  _has_bits_[0] &= ~0x00000001u;
  ::ws_engine::ImageProcessingLayer* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::ws_engine::ImageProcessingLayer* IPL_BLUR::_internal_mutable_head() {
  _has_bits_[0] |= 0x00000001u;
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::ImageProcessingLayer>(GetArenaNoVirtual());
    head_ = p;
  }
  return head_;
}
inline ::ws_engine::ImageProcessingLayer* IPL_BLUR::mutable_head() {
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_BLUR.head)
  return _internal_mutable_head();
}
inline void IPL_BLUR::set_allocated_head(::ws_engine::ImageProcessingLayer* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_BLUR.head)
}

// optional int32 blur_level = 2 [default = 1];
inline bool IPL_BLUR::_internal_has_blur_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IPL_BLUR::has_blur_level() const {
  return _internal_has_blur_level();
}
inline void IPL_BLUR::clear_blur_level() {
  blur_level_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IPL_BLUR::_internal_blur_level() const {
  return blur_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IPL_BLUR::blur_level() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_BLUR.blur_level)
  return _internal_blur_level();
}
inline void IPL_BLUR::_internal_set_blur_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  blur_level_ = value;
}
inline void IPL_BLUR::set_blur_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blur_level(value);
  // @@protoc_insertion_point(field_set:ws_engine.IPL_BLUR.blur_level)
}

// -------------------------------------------------------------------

// IPL_Engine

// optional int32 worker = 1 [default = 1];
inline bool IPL_Engine::_internal_has_worker() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IPL_Engine::has_worker() const {
  return _internal_has_worker();
}
inline void IPL_Engine::clear_worker() {
  worker_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IPL_Engine::_internal_worker() const {
  return worker_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IPL_Engine::worker() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_Engine.worker)
  return _internal_worker();
}
inline void IPL_Engine::_internal_set_worker(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  worker_ = value;
}
inline void IPL_Engine::set_worker(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_worker(value);
  // @@protoc_insertion_point(field_set:ws_engine.IPL_Engine.worker)
}

// optional .ws_engine.IPL_RGB2Gray rgb2gray = 2;
inline bool IPL_Engine::_internal_has_rgb2gray() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || rgb2gray_ != nullptr);
  return value;
}
inline bool IPL_Engine::has_rgb2gray() const {
  return _internal_has_rgb2gray();
}
inline void IPL_Engine::clear_rgb2gray() {
  if (rgb2gray_ != nullptr) rgb2gray_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ws_engine::IPL_RGB2Gray& IPL_Engine::_internal_rgb2gray() const {
  const ::ws_engine::IPL_RGB2Gray* p = rgb2gray_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::IPL_RGB2Gray*>(
      &::ws_engine::_IPL_RGB2Gray_default_instance_);
}
inline const ::ws_engine::IPL_RGB2Gray& IPL_Engine::rgb2gray() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_Engine.rgb2gray)
  return _internal_rgb2gray();
}
inline ::ws_engine::IPL_RGB2Gray* IPL_Engine::release_rgb2gray() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_Engine.rgb2gray)
  _has_bits_[0] &= ~0x00000001u;
  ::ws_engine::IPL_RGB2Gray* temp = rgb2gray_;
  rgb2gray_ = nullptr;
  return temp;
}
inline ::ws_engine::IPL_RGB2Gray* IPL_Engine::_internal_mutable_rgb2gray() {
  _has_bits_[0] |= 0x00000001u;
  if (rgb2gray_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::IPL_RGB2Gray>(GetArenaNoVirtual());
    rgb2gray_ = p;
  }
  return rgb2gray_;
}
inline ::ws_engine::IPL_RGB2Gray* IPL_Engine::mutable_rgb2gray() {
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_Engine.rgb2gray)
  return _internal_mutable_rgb2gray();
}
inline void IPL_Engine::set_allocated_rgb2gray(::ws_engine::IPL_RGB2Gray* rgb2gray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rgb2gray_;
  }
  if (rgb2gray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rgb2gray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb2gray, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rgb2gray_ = rgb2gray;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_Engine.rgb2gray)
}

// optional .ws_engine.IPL_BLUR blur = 3;
inline bool IPL_Engine::_internal_has_blur() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || blur_ != nullptr);
  return value;
}
inline bool IPL_Engine::has_blur() const {
  return _internal_has_blur();
}
inline void IPL_Engine::clear_blur() {
  if (blur_ != nullptr) blur_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ws_engine::IPL_BLUR& IPL_Engine::_internal_blur() const {
  const ::ws_engine::IPL_BLUR* p = blur_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::IPL_BLUR*>(
      &::ws_engine::_IPL_BLUR_default_instance_);
}
inline const ::ws_engine::IPL_BLUR& IPL_Engine::blur() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_Engine.blur)
  return _internal_blur();
}
inline ::ws_engine::IPL_BLUR* IPL_Engine::release_blur() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_Engine.blur)
  _has_bits_[0] &= ~0x00000002u;
  ::ws_engine::IPL_BLUR* temp = blur_;
  blur_ = nullptr;
  return temp;
}
inline ::ws_engine::IPL_BLUR* IPL_Engine::_internal_mutable_blur() {
  _has_bits_[0] |= 0x00000002u;
  if (blur_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::IPL_BLUR>(GetArenaNoVirtual());
    blur_ = p;
  }
  return blur_;
}
inline ::ws_engine::IPL_BLUR* IPL_Engine::mutable_blur() {
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_Engine.blur)
  return _internal_mutable_blur();
}
inline void IPL_Engine::set_allocated_blur(::ws_engine::IPL_BLUR* blur) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blur_;
  }
  if (blur) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blur = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blur, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  blur_ = blur;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_Engine.blur)
}

// -------------------------------------------------------------------

// DisplayDevice

// required bool show_in_screen = 1 [default = true];
inline bool DisplayDevice::_internal_has_show_in_screen() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DisplayDevice::has_show_in_screen() const {
  return _internal_has_show_in_screen();
}
inline void DisplayDevice::clear_show_in_screen() {
  show_in_screen_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DisplayDevice::_internal_show_in_screen() const {
  return show_in_screen_;
}
inline bool DisplayDevice::show_in_screen() const {
  // @@protoc_insertion_point(field_get:ws_engine.DisplayDevice.show_in_screen)
  return _internal_show_in_screen();
}
inline void DisplayDevice::_internal_set_show_in_screen(bool value) {
  _has_bits_[0] |= 0x00000002u;
  show_in_screen_ = value;
}
inline void DisplayDevice::set_show_in_screen(bool value) {
  _internal_set_show_in_screen(value);
  // @@protoc_insertion_point(field_set:ws_engine.DisplayDevice.show_in_screen)
}

// optional string output_file_name = 2;
inline bool DisplayDevice::_internal_has_output_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisplayDevice::has_output_file_name() const {
  return _internal_has_output_file_name();
}
inline void DisplayDevice::clear_output_file_name() {
  output_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisplayDevice::output_file_name() const {
  // @@protoc_insertion_point(field_get:ws_engine.DisplayDevice.output_file_name)
  return _internal_output_file_name();
}
inline void DisplayDevice::set_output_file_name(const std::string& value) {
  _internal_set_output_file_name(value);
  // @@protoc_insertion_point(field_set:ws_engine.DisplayDevice.output_file_name)
}
inline std::string* DisplayDevice::mutable_output_file_name() {
  // @@protoc_insertion_point(field_mutable:ws_engine.DisplayDevice.output_file_name)
  return _internal_mutable_output_file_name();
}
inline const std::string& DisplayDevice::_internal_output_file_name() const {
  return output_file_name_.GetNoArena();
}
inline void DisplayDevice::_internal_set_output_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  output_file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DisplayDevice::set_output_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  output_file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ws_engine.DisplayDevice.output_file_name)
}
inline void DisplayDevice::set_output_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  output_file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.DisplayDevice.output_file_name)
}
inline void DisplayDevice::set_output_file_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  output_file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.DisplayDevice.output_file_name)
}
inline std::string* DisplayDevice::_internal_mutable_output_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return output_file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisplayDevice::release_output_file_name() {
  // @@protoc_insertion_point(field_release:ws_engine.DisplayDevice.output_file_name)
  if (!_internal_has_output_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return output_file_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayDevice::set_allocated_output_file_name(std::string* output_file_name) {
  if (output_file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_file_name);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.DisplayDevice.output_file_name)
}

// -------------------------------------------------------------------

// WsEngineParameters

// required .ws_engine.SystemParameter sys_params = 1;
inline bool WsEngineParameters::_internal_has_sys_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sys_params_ != nullptr);
  return value;
}
inline bool WsEngineParameters::has_sys_params() const {
  return _internal_has_sys_params();
}
inline void WsEngineParameters::clear_sys_params() {
  if (sys_params_ != nullptr) sys_params_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ws_engine::SystemParameter& WsEngineParameters::_internal_sys_params() const {
  const ::ws_engine::SystemParameter* p = sys_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::SystemParameter*>(
      &::ws_engine::_SystemParameter_default_instance_);
}
inline const ::ws_engine::SystemParameter& WsEngineParameters::sys_params() const {
  // @@protoc_insertion_point(field_get:ws_engine.WsEngineParameters.sys_params)
  return _internal_sys_params();
}
inline ::ws_engine::SystemParameter* WsEngineParameters::release_sys_params() {
  // @@protoc_insertion_point(field_release:ws_engine.WsEngineParameters.sys_params)
  _has_bits_[0] &= ~0x00000001u;
  ::ws_engine::SystemParameter* temp = sys_params_;
  sys_params_ = nullptr;
  return temp;
}
inline ::ws_engine::SystemParameter* WsEngineParameters::_internal_mutable_sys_params() {
  _has_bits_[0] |= 0x00000001u;
  if (sys_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::SystemParameter>(GetArenaNoVirtual());
    sys_params_ = p;
  }
  return sys_params_;
}
inline ::ws_engine::SystemParameter* WsEngineParameters::mutable_sys_params() {
  // @@protoc_insertion_point(field_mutable:ws_engine.WsEngineParameters.sys_params)
  return _internal_mutable_sys_params();
}
inline void WsEngineParameters::set_allocated_sys_params(::ws_engine::SystemParameter* sys_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sys_params_;
  }
  if (sys_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sys_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sys_params_ = sys_params;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.WsEngineParameters.sys_params)
}

// required .ws_engine.CameraParameter camera = 2;
inline bool WsEngineParameters::_internal_has_camera() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || camera_ != nullptr);
  return value;
}
inline bool WsEngineParameters::has_camera() const {
  return _internal_has_camera();
}
inline void WsEngineParameters::clear_camera() {
  if (camera_ != nullptr) camera_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ws_engine::CameraParameter& WsEngineParameters::_internal_camera() const {
  const ::ws_engine::CameraParameter* p = camera_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::CameraParameter*>(
      &::ws_engine::_CameraParameter_default_instance_);
}
inline const ::ws_engine::CameraParameter& WsEngineParameters::camera() const {
  // @@protoc_insertion_point(field_get:ws_engine.WsEngineParameters.camera)
  return _internal_camera();
}
inline ::ws_engine::CameraParameter* WsEngineParameters::release_camera() {
  // @@protoc_insertion_point(field_release:ws_engine.WsEngineParameters.camera)
  _has_bits_[0] &= ~0x00000002u;
  ::ws_engine::CameraParameter* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::ws_engine::CameraParameter* WsEngineParameters::_internal_mutable_camera() {
  _has_bits_[0] |= 0x00000002u;
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::CameraParameter>(GetArenaNoVirtual());
    camera_ = p;
  }
  return camera_;
}
inline ::ws_engine::CameraParameter* WsEngineParameters::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:ws_engine.WsEngineParameters.camera)
  return _internal_mutable_camera();
}
inline void WsEngineParameters::set_allocated_camera(::ws_engine::CameraParameter* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.WsEngineParameters.camera)
}

// required .ws_engine.IPL_Engine ipl_engine = 3;
inline bool WsEngineParameters::_internal_has_ipl_engine() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ipl_engine_ != nullptr);
  return value;
}
inline bool WsEngineParameters::has_ipl_engine() const {
  return _internal_has_ipl_engine();
}
inline void WsEngineParameters::clear_ipl_engine() {
  if (ipl_engine_ != nullptr) ipl_engine_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ws_engine::IPL_Engine& WsEngineParameters::_internal_ipl_engine() const {
  const ::ws_engine::IPL_Engine* p = ipl_engine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::IPL_Engine*>(
      &::ws_engine::_IPL_Engine_default_instance_);
}
inline const ::ws_engine::IPL_Engine& WsEngineParameters::ipl_engine() const {
  // @@protoc_insertion_point(field_get:ws_engine.WsEngineParameters.ipl_engine)
  return _internal_ipl_engine();
}
inline ::ws_engine::IPL_Engine* WsEngineParameters::release_ipl_engine() {
  // @@protoc_insertion_point(field_release:ws_engine.WsEngineParameters.ipl_engine)
  _has_bits_[0] &= ~0x00000004u;
  ::ws_engine::IPL_Engine* temp = ipl_engine_;
  ipl_engine_ = nullptr;
  return temp;
}
inline ::ws_engine::IPL_Engine* WsEngineParameters::_internal_mutable_ipl_engine() {
  _has_bits_[0] |= 0x00000004u;
  if (ipl_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::IPL_Engine>(GetArenaNoVirtual());
    ipl_engine_ = p;
  }
  return ipl_engine_;
}
inline ::ws_engine::IPL_Engine* WsEngineParameters::mutable_ipl_engine() {
  // @@protoc_insertion_point(field_mutable:ws_engine.WsEngineParameters.ipl_engine)
  return _internal_mutable_ipl_engine();
}
inline void WsEngineParameters::set_allocated_ipl_engine(::ws_engine::IPL_Engine* ipl_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ipl_engine_;
  }
  if (ipl_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ipl_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipl_engine, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ipl_engine_ = ipl_engine;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.WsEngineParameters.ipl_engine)
}

// optional .ws_engine.DisplayDevice display_device = 4;
inline bool WsEngineParameters::_internal_has_display_device() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || display_device_ != nullptr);
  return value;
}
inline bool WsEngineParameters::has_display_device() const {
  return _internal_has_display_device();
}
inline void WsEngineParameters::clear_display_device() {
  if (display_device_ != nullptr) display_device_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ws_engine::DisplayDevice& WsEngineParameters::_internal_display_device() const {
  const ::ws_engine::DisplayDevice* p = display_device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ws_engine::DisplayDevice*>(
      &::ws_engine::_DisplayDevice_default_instance_);
}
inline const ::ws_engine::DisplayDevice& WsEngineParameters::display_device() const {
  // @@protoc_insertion_point(field_get:ws_engine.WsEngineParameters.display_device)
  return _internal_display_device();
}
inline ::ws_engine::DisplayDevice* WsEngineParameters::release_display_device() {
  // @@protoc_insertion_point(field_release:ws_engine.WsEngineParameters.display_device)
  _has_bits_[0] &= ~0x00000008u;
  ::ws_engine::DisplayDevice* temp = display_device_;
  display_device_ = nullptr;
  return temp;
}
inline ::ws_engine::DisplayDevice* WsEngineParameters::_internal_mutable_display_device() {
  _has_bits_[0] |= 0x00000008u;
  if (display_device_ == nullptr) {
    auto* p = CreateMaybeMessage<::ws_engine::DisplayDevice>(GetArenaNoVirtual());
    display_device_ = p;
  }
  return display_device_;
}
inline ::ws_engine::DisplayDevice* WsEngineParameters::mutable_display_device() {
  // @@protoc_insertion_point(field_mutable:ws_engine.WsEngineParameters.display_device)
  return _internal_mutable_display_device();
}
inline void WsEngineParameters::set_allocated_display_device(::ws_engine::DisplayDevice* display_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete display_device_;
  }
  if (display_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_device, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  display_device_ = display_device;
  // @@protoc_insertion_point(field_set_allocated:ws_engine.WsEngineParameters.display_device)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ws_engine

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ws_engine::CameraParameter_CameraType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ws_engine::CameraParameter_CameraType>() {
  return ::ws_engine::CameraParameter_CameraType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
