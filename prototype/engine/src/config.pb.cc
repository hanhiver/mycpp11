// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraParameter_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayDevice_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IPL_BLUR_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IPL_Engine_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IPL_RGB2Gray_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageParameter_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageProcessingLayer_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointParameter_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ROIParameter_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemParameter_config_2eproto;
namespace ws_engine {
class SystemParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemParameter> _instance;
} _SystemParameter_default_instance_;
class CameraParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraParameter> _instance;
} _CameraParameter_default_instance_;
class PointParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointParameter> _instance;
} _PointParameter_default_instance_;
class ROIParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROIParameter> _instance;
} _ROIParameter_default_instance_;
class ImageParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageParameter> _instance;
} _ImageParameter_default_instance_;
class ImageProcessingLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageProcessingLayer> _instance;
} _ImageProcessingLayer_default_instance_;
class IPL_RGB2GrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPL_RGB2Gray> _instance;
} _IPL_RGB2Gray_default_instance_;
class IPL_BLURDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPL_BLUR> _instance;
} _IPL_BLUR_default_instance_;
class IPL_EngineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPL_Engine> _instance;
} _IPL_Engine_default_instance_;
class DisplayDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayDevice> _instance;
} _DisplayDevice_default_instance_;
class WsEngineParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WsEngineParameters> _instance;
} _WsEngineParameters_default_instance_;
}  // namespace ws_engine
static void InitDefaultsscc_info_CameraParameter_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ws_engine::_CameraParameter_default_instance_;
    new (ptr) ::ws_engine::CameraParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::CameraParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraParameter_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraParameter_config_2eproto}, {}};

static void InitDefaultsscc_info_DisplayDevice_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ws_engine::_DisplayDevice_default_instance_;
    new (ptr) ::ws_engine::DisplayDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::DisplayDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayDevice_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisplayDevice_config_2eproto}, {}};

static void InitDefaultsscc_info_IPL_BLUR_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ws_engine::_IPL_BLUR_default_instance_;
    new (ptr) ::ws_engine::IPL_BLUR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::IPL_BLUR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IPL_BLUR_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IPL_BLUR_config_2eproto}, {
      &scc_info_ImageProcessingLayer_config_2eproto.base,}};

static void InitDefaultsscc_info_IPL_Engine_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ws_engine::_IPL_Engine_default_instance_;
    new (ptr) ::ws_engine::IPL_Engine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::IPL_Engine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IPL_Engine_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IPL_Engine_config_2eproto}, {
      &scc_info_IPL_RGB2Gray_config_2eproto.base,
      &scc_info_IPL_BLUR_config_2eproto.base,}};

static void InitDefaultsscc_info_IPL_RGB2Gray_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ws_engine::_IPL_RGB2Gray_default_instance_;
    new (ptr) ::ws_engine::IPL_RGB2Gray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::IPL_RGB2Gray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IPL_RGB2Gray_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IPL_RGB2Gray_config_2eproto}, {
      &scc_info_ImageProcessingLayer_config_2eproto.base,}};

static void InitDefaultsscc_info_ImageParameter_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ws_engine::_ImageParameter_default_instance_;
    new (ptr) ::ws_engine::ImageParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::ImageParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageParameter_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageParameter_config_2eproto}, {
      &scc_info_ROIParameter_config_2eproto.base,}};

static void InitDefaultsscc_info_ImageProcessingLayer_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ws_engine::_ImageProcessingLayer_default_instance_;
    new (ptr) ::ws_engine::ImageProcessingLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::ImageProcessingLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageProcessingLayer_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageProcessingLayer_config_2eproto}, {
      &scc_info_ImageParameter_config_2eproto.base,}};

static void InitDefaultsscc_info_PointParameter_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ws_engine::_PointParameter_default_instance_;
    new (ptr) ::ws_engine::PointParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::PointParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointParameter_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointParameter_config_2eproto}, {}};

static void InitDefaultsscc_info_ROIParameter_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ws_engine::_ROIParameter_default_instance_;
    new (ptr) ::ws_engine::ROIParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::ROIParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ROIParameter_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ROIParameter_config_2eproto}, {
      &scc_info_PointParameter_config_2eproto.base,}};

static void InitDefaultsscc_info_SystemParameter_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.DefaultConstruct();
  *::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get_mutable() = std::string("/tmp", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get_mutable());
  ::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.DefaultConstruct();
  *::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get_mutable() = std::string("info", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get_mutable());
  {
    void* ptr = &::ws_engine::_SystemParameter_default_instance_;
    new (ptr) ::ws_engine::SystemParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::SystemParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemParameter_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemParameter_config_2eproto}, {}};

static void InitDefaultsscc_info_WsEngineParameters_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ws_engine::_WsEngineParameters_default_instance_;
    new (ptr) ::ws_engine::WsEngineParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ws_engine::WsEngineParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WsEngineParameters_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_WsEngineParameters_config_2eproto}, {
      &scc_info_SystemParameter_config_2eproto.base,
      &scc_info_CameraParameter_config_2eproto.base,
      &scc_info_IPL_Engine_config_2eproto.base,
      &scc_info_DisplayDevice_config_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_config_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ws_engine::SystemParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::SystemParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::SystemParameter, debug_file_root_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::SystemParameter, debug_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ws_engine::CameraParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::CameraParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::CameraParameter, camera_type_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::CameraParameter, camera_name_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::CameraParameter, camera_id_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::CameraParameter, camera_fps_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::CameraParameter, camera_auto_balance_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ws_engine::PointParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::PointParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::PointParameter, x_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::PointParameter, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ws_engine::ROIParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ROIParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::ROIParameter, enable_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ROIParameter, left_up_point_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ROIParameter, right_bottom_point_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageParameter, width_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageParameter, height_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageParameter, channel_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageParameter, depth_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageParameter, roi_zone_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageProcessingLayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageProcessingLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageProcessingLayer, layer_id_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageProcessingLayer, image_input_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageProcessingLayer, image_output_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageProcessingLayer, lib_file_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageProcessingLayer, func_name_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::ImageProcessingLayer, func_args_),
  5,
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_RGB2Gray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_RGB2Gray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_RGB2Gray, head_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_RGB2Gray, channel_selected_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_BLUR, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_BLUR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_BLUR, head_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_BLUR, blur_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_Engine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_Engine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_Engine, worker_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_Engine, rgb2gray_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::IPL_Engine, blur_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ws_engine::DisplayDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::DisplayDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::DisplayDevice, show_in_screen_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::DisplayDevice, output_file_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ws_engine::WsEngineParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::WsEngineParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ws_engine::WsEngineParameters, sys_params_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::WsEngineParameters, camera_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::WsEngineParameters, ipl_engine_),
  PROTOBUF_FIELD_OFFSET(::ws_engine::WsEngineParameters, display_device_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ws_engine::SystemParameter)},
  { 9, 19, sizeof(::ws_engine::CameraParameter)},
  { 24, 31, sizeof(::ws_engine::PointParameter)},
  { 33, 41, sizeof(::ws_engine::ROIParameter)},
  { 44, 54, sizeof(::ws_engine::ImageParameter)},
  { 59, 70, sizeof(::ws_engine::ImageProcessingLayer)},
  { 76, 83, sizeof(::ws_engine::IPL_RGB2Gray)},
  { 85, 92, sizeof(::ws_engine::IPL_BLUR)},
  { 94, 102, sizeof(::ws_engine::IPL_Engine)},
  { 105, 112, sizeof(::ws_engine::DisplayDevice)},
  { 114, 123, sizeof(::ws_engine::WsEngineParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_SystemParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_CameraParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_PointParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_ROIParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_ImageParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_ImageProcessingLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_IPL_RGB2Gray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_IPL_BLUR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_IPL_Engine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_DisplayDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ws_engine::_WsEngineParameters_default_instance_),
};

const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014config.proto\022\tws_engine\"K\n\017SystemParam"
  "eter\022\035\n\017debug_file_root\030\001 \001(\t:\004/tmp\022\031\n\013d"
  "ebug_level\030\002 \001(\t:\004info\"\367\001\n\017CameraParamet"
  "er\022@\n\013camera_type\030\001 \001(\0162%.ws_engine.Came"
  "raParameter.CameraType:\004gige\022\023\n\013camera_n"
  "ame\030\002 \002(\t\022\021\n\tcamera_id\030\003 \001(\005\022\025\n\ncamera_f"
  "ps\030\004 \001(\005:\0010\022\"\n\023camera_auto_balance\030\005 \001(\010"
  ":\005false\"\?\n\nCameraType\022\010\n\004gige\020\000\022\007\n\003usb\020\001"
  "\022\016\n\nimage_file\020\002\022\016\n\nvideo_file\020\003\"&\n\016Poin"
  "tParameter\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"\215\001\n\014ROI"
  "Parameter\022\024\n\006enable\030\001 \001(\010:\004true\0220\n\rleft_"
  "up_point\030\002 \002(\0132\031.ws_engine.PointParamete"
  "r\0225\n\022right_bottom_point\030\003 \002(\0132\031.ws_engin"
  "e.PointParameter\"\200\001\n\016ImageParameter\022\r\n\005w"
  "idth\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\022\n\007channel\030\003 "
  "\001(\005:\0011\022\020\n\005depth\030\004 \001(\005:\0018\022)\n\010ROI_zone\030\005 \001"
  "(\0132\027.ws_engine.ROIParameter\"\301\001\n\024ImagePro"
  "cessingLayer\022\020\n\010layer_id\030\001 \002(\005\022.\n\013image_"
  "input\030\002 \002(\0132\031.ws_engine.ImageParameter\022/"
  "\n\014image_output\030\003 \002(\0132\031.ws_engine.ImagePa"
  "rameter\022\020\n\010lib_file\030\004 \002(\t\022\021\n\tfunc_name\030\005"
  " \002(\t\022\021\n\tfunc_args\030\006 \001(\t\"Z\n\014IPL_RGB2Gray\022"
  "-\n\004head\030\001 \002(\0132\037.ws_engine.ImageProcessin"
  "gLayer\022\033\n\020channel_selected\030\002 \001(\005:\0010\"P\n\010I"
  "PL_BLUR\022-\n\004head\030\001 \002(\0132\037.ws_engine.ImageP"
  "rocessingLayer\022\025\n\nblur_level\030\002 \001(\005:\0011\"m\n"
  "\nIPL_Engine\022\021\n\006worker\030\001 \001(\005:\0011\022)\n\010rgb2gr"
  "ay\030\002 \001(\0132\027.ws_engine.IPL_RGB2Gray\022!\n\004blu"
  "r\030\003 \001(\0132\023.ws_engine.IPL_BLUR\"G\n\rDisplayD"
  "evice\022\034\n\016show_in_screen\030\001 \002(\010:\004true\022\030\n\020o"
  "utput_file_name\030\002 \001(\t\"\315\001\n\022WsEngineParame"
  "ters\022.\n\nsys_params\030\001 \002(\0132\032.ws_engine.Sys"
  "temParameter\022*\n\006camera\030\002 \002(\0132\032.ws_engine"
  ".CameraParameter\022)\n\nipl_engine\030\003 \002(\0132\025.w"
  "s_engine.IPL_Engine\0220\n\016display_device\030\004 "
  "\001(\0132\030.ws_engine.DisplayDevice"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_config_2eproto_sccs[11] = {
  &scc_info_CameraParameter_config_2eproto.base,
  &scc_info_DisplayDevice_config_2eproto.base,
  &scc_info_IPL_BLUR_config_2eproto.base,
  &scc_info_IPL_Engine_config_2eproto.base,
  &scc_info_IPL_RGB2Gray_config_2eproto.base,
  &scc_info_ImageParameter_config_2eproto.base,
  &scc_info_ImageProcessingLayer_config_2eproto.base,
  &scc_info_PointParameter_config_2eproto.base,
  &scc_info_ROIParameter_config_2eproto.base,
  &scc_info_SystemParameter_config_2eproto.base,
  &scc_info_WsEngineParameters_config_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_2eproto_once;
static bool descriptor_table_config_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto = {
  &descriptor_table_config_2eproto_initialized, descriptor_table_protodef_config_2eproto, "config.proto", 1429,
  &descriptor_table_config_2eproto_once, descriptor_table_config_2eproto_sccs, descriptor_table_config_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_config_2eproto::offsets,
  file_level_metadata_config_2eproto, 11, file_level_enum_descriptors_config_2eproto, file_level_service_descriptors_config_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_config_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_config_2eproto)), true);
namespace ws_engine {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraParameter_CameraType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[0];
}
bool CameraParameter_CameraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraParameter_CameraType CameraParameter::gige;
constexpr CameraParameter_CameraType CameraParameter::usb;
constexpr CameraParameter_CameraType CameraParameter::image_file;
constexpr CameraParameter_CameraType CameraParameter::video_file;
constexpr CameraParameter_CameraType CameraParameter::CameraType_MIN;
constexpr CameraParameter_CameraType CameraParameter::CameraType_MAX;
constexpr int CameraParameter::CameraType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SystemParameter::InitAsDefaultInstance() {
}
class SystemParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemParameter>()._has_bits_);
  static void set_has_debug_file_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_debug_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_;
SystemParameter::SystemParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.SystemParameter)
}
SystemParameter::SystemParameter(const SystemParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  debug_file_root_.UnsafeSetDefault(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get());
  if (from._internal_has_debug_file_root()) {
    debug_file_root_.AssignWithDefault(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get(), from.debug_file_root_);
  }
  debug_level_.UnsafeSetDefault(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get());
  if (from._internal_has_debug_level()) {
    debug_level_.AssignWithDefault(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get(), from.debug_level_);
  }
  // @@protoc_insertion_point(copy_constructor:ws_engine.SystemParameter)
}

void SystemParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemParameter_config_2eproto.base);
  debug_file_root_.UnsafeSetDefault(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get());
  debug_level_.UnsafeSetDefault(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get());
}

SystemParameter::~SystemParameter() {
  // @@protoc_insertion_point(destructor:ws_engine.SystemParameter)
  SharedDtor();
}

void SystemParameter::SharedDtor() {
  debug_file_root_.DestroyNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get());
  debug_level_.DestroyNoArena(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get());
}

void SystemParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemParameter& SystemParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemParameter_config_2eproto.base);
  return *internal_default_instance();
}


void SystemParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.SystemParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      debug_file_root_.UnsafeMutablePointer()->assign(*&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      debug_level_.UnsafeMutablePointer()->assign(*&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SystemParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string debug_file_root = 1 [default = "/tmp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_debug_file_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ws_engine.SystemParameter.debug_file_root");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string debug_level = 2 [default = "info"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_debug_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ws_engine.SystemParameter.debug_level");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.SystemParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string debug_file_root = 1 [default = "/tmp"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_debug_file_root().data(), static_cast<int>(this->_internal_debug_file_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ws_engine.SystemParameter.debug_file_root");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_debug_file_root(), target);
  }

  // optional string debug_level = 2 [default = "info"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_debug_level().data(), static_cast<int>(this->_internal_debug_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ws_engine.SystemParameter.debug_level");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_debug_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.SystemParameter)
  return target;
}

size_t SystemParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.SystemParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string debug_file_root = 1 [default = "/tmp"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_debug_file_root());
    }

    // optional string debug_level = 2 [default = "info"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_debug_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.SystemParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.SystemParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.SystemParameter)
    MergeFrom(*source);
  }
}

void SystemParameter::MergeFrom(const SystemParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.SystemParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      debug_file_root_.AssignWithDefault(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get(), from.debug_file_root_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      debug_level_.AssignWithDefault(&::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get(), from.debug_level_);
    }
  }
}

void SystemParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.SystemParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemParameter::CopyFrom(const SystemParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.SystemParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemParameter::IsInitialized() const {
  return true;
}

void SystemParameter::InternalSwap(SystemParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  debug_file_root_.Swap(&other->debug_file_root_, &::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_file_root_.get(),
    GetArenaNoVirtual());
  debug_level_.Swap(&other->debug_level_, &::ws_engine::SystemParameter::_i_give_permission_to_break_this_code_default_debug_level_.get(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraParameter::InitAsDefaultInstance() {
}
class CameraParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraParameter>()._has_bits_);
  static void set_has_camera_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_camera_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_camera_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_camera_auto_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CameraParameter::CameraParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.CameraParameter)
}
CameraParameter::CameraParameter(const CameraParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_camera_name()) {
    camera_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
  }
  ::memcpy(&camera_type_, &from.camera_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_auto_balance_) -
    reinterpret_cast<char*>(&camera_type_)) + sizeof(camera_auto_balance_));
  // @@protoc_insertion_point(copy_constructor:ws_engine.CameraParameter)
}

void CameraParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraParameter_config_2eproto.base);
  camera_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&camera_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_auto_balance_) -
      reinterpret_cast<char*>(&camera_type_)) + sizeof(camera_auto_balance_));
}

CameraParameter::~CameraParameter() {
  // @@protoc_insertion_point(destructor:ws_engine.CameraParameter)
  SharedDtor();
}

void CameraParameter::SharedDtor() {
  camera_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraParameter& CameraParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraParameter_config_2eproto.base);
  return *internal_default_instance();
}


void CameraParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.CameraParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    camera_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&camera_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_auto_balance_) -
        reinterpret_cast<char*>(&camera_type_)) + sizeof(camera_auto_balance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CameraParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ws_engine.CameraParameter.CameraType camera_type = 1 [default = gige];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ws_engine::CameraParameter_CameraType_IsValid(val))) {
            _internal_set_camera_type(static_cast<::ws_engine::CameraParameter_CameraType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string camera_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ws_engine.CameraParameter.camera_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 camera_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_camera_id(&has_bits);
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 camera_fps = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_camera_fps(&has_bits);
          camera_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool camera_auto_balance = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_camera_auto_balance(&has_bits);
          camera_auto_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.CameraParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ws_engine.CameraParameter.CameraType camera_type = 1 [default = gige];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_camera_type(), target);
  }

  // required string camera_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ws_engine.CameraParameter.camera_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_name(), target);
  }

  // optional int32 camera_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_camera_id(), target);
  }

  // optional int32 camera_fps = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_camera_fps(), target);
  }

  // optional bool camera_auto_balance = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_camera_auto_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.CameraParameter)
  return target;
}

size_t CameraParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.CameraParameter)
  size_t total_size = 0;

  // required string camera_name = 2;
  if (_internal_has_camera_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .ws_engine.CameraParameter.CameraType camera_type = 1 [default = gige];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_camera_type());
    }

    // optional int32 camera_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_camera_id());
    }

    // optional int32 camera_fps = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_camera_fps());
    }

    // optional bool camera_auto_balance = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.CameraParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.CameraParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.CameraParameter)
    MergeFrom(*source);
  }
}

void CameraParameter::MergeFrom(const CameraParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.CameraParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      camera_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      camera_type_ = from.camera_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      camera_id_ = from.camera_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      camera_fps_ = from.camera_fps_;
    }
    if (cached_has_bits & 0x00000010u) {
      camera_auto_balance_ = from.camera_auto_balance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.CameraParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParameter::CopyFrom(const CameraParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.CameraParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CameraParameter::InternalSwap(CameraParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  camera_name_.Swap(&other->camera_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(camera_type_, other->camera_type_);
  swap(camera_id_, other->camera_id_);
  swap(camera_fps_, other->camera_fps_);
  swap(camera_auto_balance_, other->camera_auto_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointParameter::InitAsDefaultInstance() {
}
class PointParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PointParameter>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PointParameter::PointParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.PointParameter)
}
PointParameter::PointParameter(const PointParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ws_engine.PointParameter)
}

void PointParameter::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PointParameter::~PointParameter() {
  // @@protoc_insertion_point(destructor:ws_engine.PointParameter)
  SharedDtor();
}

void PointParameter::SharedDtor() {
}

void PointParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointParameter& PointParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointParameter_config_2eproto.base);
  return *internal_default_instance();
}


void PointParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.PointParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PointParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.PointParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.PointParameter)
  return target;
}

size_t PointParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ws_engine.PointParameter)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  return total_size;
}
size_t PointParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.PointParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());

    // required int32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.PointParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PointParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.PointParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.PointParameter)
    MergeFrom(*source);
  }
}

void PointParameter::MergeFrom(const PointParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.PointParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.PointParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointParameter::CopyFrom(const PointParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.PointParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PointParameter::InternalSwap(PointParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROIParameter::InitAsDefaultInstance() {
  ::ws_engine::_ROIParameter_default_instance_._instance.get_mutable()->left_up_point_ = const_cast< ::ws_engine::PointParameter*>(
      ::ws_engine::PointParameter::internal_default_instance());
  ::ws_engine::_ROIParameter_default_instance_._instance.get_mutable()->right_bottom_point_ = const_cast< ::ws_engine::PointParameter*>(
      ::ws_engine::PointParameter::internal_default_instance());
}
class ROIParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ROIParameter>()._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ws_engine::PointParameter& left_up_point(const ROIParameter* msg);
  static void set_has_left_up_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ws_engine::PointParameter& right_bottom_point(const ROIParameter* msg);
  static void set_has_right_bottom_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ws_engine::PointParameter&
ROIParameter::_Internal::left_up_point(const ROIParameter* msg) {
  return *msg->left_up_point_;
}
const ::ws_engine::PointParameter&
ROIParameter::_Internal::right_bottom_point(const ROIParameter* msg) {
  return *msg->right_bottom_point_;
}
ROIParameter::ROIParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.ROIParameter)
}
ROIParameter::ROIParameter(const ROIParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_left_up_point()) {
    left_up_point_ = new ::ws_engine::PointParameter(*from.left_up_point_);
  } else {
    left_up_point_ = nullptr;
  }
  if (from._internal_has_right_bottom_point()) {
    right_bottom_point_ = new ::ws_engine::PointParameter(*from.right_bottom_point_);
  } else {
    right_bottom_point_ = nullptr;
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:ws_engine.ROIParameter)
}

void ROIParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ROIParameter_config_2eproto.base);
  ::memset(&left_up_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_bottom_point_) -
      reinterpret_cast<char*>(&left_up_point_)) + sizeof(right_bottom_point_));
  enable_ = true;
}

ROIParameter::~ROIParameter() {
  // @@protoc_insertion_point(destructor:ws_engine.ROIParameter)
  SharedDtor();
}

void ROIParameter::SharedDtor() {
  if (this != internal_default_instance()) delete left_up_point_;
  if (this != internal_default_instance()) delete right_bottom_point_;
}

void ROIParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROIParameter& ROIParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROIParameter_config_2eproto.base);
  return *internal_default_instance();
}


void ROIParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.ROIParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_up_point_ != nullptr);
      left_up_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_bottom_point_ != nullptr);
      right_bottom_point_->Clear();
    }
    enable_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ROIParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ws_engine.PointParameter left_up_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_up_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ws_engine.PointParameter right_bottom_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_bottom_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROIParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.ROIParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // required .ws_engine.PointParameter left_up_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left_up_point(this), target, stream);
  }

  // required .ws_engine.PointParameter right_bottom_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_bottom_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.ROIParameter)
  return target;
}

size_t ROIParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ws_engine.ROIParameter)
  size_t total_size = 0;

  if (_internal_has_left_up_point()) {
    // required .ws_engine.PointParameter left_up_point = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_up_point_);
  }

  if (_internal_has_right_bottom_point()) {
    // required .ws_engine.PointParameter right_bottom_point = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_bottom_point_);
  }

  return total_size;
}
size_t ROIParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.ROIParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ws_engine.PointParameter left_up_point = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_up_point_);

    // required .ws_engine.PointParameter right_bottom_point = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_bottom_point_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enable = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROIParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.ROIParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ROIParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROIParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.ROIParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.ROIParameter)
    MergeFrom(*source);
  }
}

void ROIParameter::MergeFrom(const ROIParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.ROIParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_left_up_point()->::ws_engine::PointParameter::MergeFrom(from._internal_left_up_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_right_bottom_point()->::ws_engine::PointParameter::MergeFrom(from._internal_right_bottom_point());
    }
    if (cached_has_bits & 0x00000004u) {
      enable_ = from.enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROIParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.ROIParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIParameter::CopyFrom(const ROIParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.ROIParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_left_up_point()) {
    if (!left_up_point_->IsInitialized()) return false;
  }
  if (_internal_has_right_bottom_point()) {
    if (!right_bottom_point_->IsInitialized()) return false;
  }
  return true;
}

void ROIParameter::InternalSwap(ROIParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(left_up_point_, other->left_up_point_);
  swap(right_bottom_point_, other->right_bottom_point_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROIParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageParameter::InitAsDefaultInstance() {
  ::ws_engine::_ImageParameter_default_instance_._instance.get_mutable()->roi_zone_ = const_cast< ::ws_engine::ROIParameter*>(
      ::ws_engine::ROIParameter::internal_default_instance());
}
class ImageParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageParameter>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ws_engine::ROIParameter& roi_zone(const ImageParameter* msg);
  static void set_has_roi_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ws_engine::ROIParameter&
ImageParameter::_Internal::roi_zone(const ImageParameter* msg) {
  return *msg->roi_zone_;
}
ImageParameter::ImageParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.ImageParameter)
}
ImageParameter::ImageParameter(const ImageParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_roi_zone()) {
    roi_zone_ = new ::ws_engine::ROIParameter(*from.roi_zone_);
  } else {
    roi_zone_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&width_)) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:ws_engine.ImageParameter)
}

void ImageParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageParameter_config_2eproto.base);
  ::memset(&roi_zone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&roi_zone_)) + sizeof(height_));
  channel_ = 1;
  depth_ = 8;
}

ImageParameter::~ImageParameter() {
  // @@protoc_insertion_point(destructor:ws_engine.ImageParameter)
  SharedDtor();
}

void ImageParameter::SharedDtor() {
  if (this != internal_default_instance()) delete roi_zone_;
}

void ImageParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageParameter& ImageParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageParameter_config_2eproto.base);
  return *internal_default_instance();
}


void ImageParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.ImageParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(roi_zone_ != nullptr);
    roi_zone_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
    channel_ = 1;
    depth_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ImageParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 channel = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 depth = 4 [default = 8];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ws_engine.ROIParameter ROI_zone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi_zone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.ImageParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 width = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // required int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // optional int32 channel = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // optional int32 depth = 4 [default = 8];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_depth(), target);
  }

  // optional .ws_engine.ROIParameter ROI_zone = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::roi_zone(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.ImageParameter)
  return target;
}

size_t ImageParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ws_engine.ImageParameter)
  size_t total_size = 0;

  if (_internal_has_width()) {
    // required int32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  return total_size;
}
size_t ImageParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.ImageParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

    // required int32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ws_engine.ROIParameter ROI_zone = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roi_zone_);
  }

  if (cached_has_bits & 0x00000018u) {
    // optional int32 channel = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_channel());
    }

    // optional int32 depth = 4 [default = 8];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_depth());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.ImageParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.ImageParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.ImageParameter)
    MergeFrom(*source);
  }
}

void ImageParameter::MergeFrom(const ImageParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.ImageParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_roi_zone()->::ws_engine::ROIParameter::MergeFrom(from._internal_roi_zone());
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000010u) {
      depth_ = from.depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.ImageParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageParameter::CopyFrom(const ImageParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.ImageParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (_internal_has_roi_zone()) {
    if (!roi_zone_->IsInitialized()) return false;
  }
  return true;
}

void ImageParameter::InternalSwap(ImageParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(roi_zone_, other->roi_zone_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(channel_, other->channel_);
  swap(depth_, other->depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageProcessingLayer::InitAsDefaultInstance() {
  ::ws_engine::_ImageProcessingLayer_default_instance_._instance.get_mutable()->image_input_ = const_cast< ::ws_engine::ImageParameter*>(
      ::ws_engine::ImageParameter::internal_default_instance());
  ::ws_engine::_ImageProcessingLayer_default_instance_._instance.get_mutable()->image_output_ = const_cast< ::ws_engine::ImageParameter*>(
      ::ws_engine::ImageParameter::internal_default_instance());
}
class ImageProcessingLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageProcessingLayer>()._has_bits_);
  static void set_has_layer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ws_engine::ImageParameter& image_input(const ImageProcessingLayer* msg);
  static void set_has_image_input(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ws_engine::ImageParameter& image_output(const ImageProcessingLayer* msg);
  static void set_has_image_output(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lib_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_func_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_func_args(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ws_engine::ImageParameter&
ImageProcessingLayer::_Internal::image_input(const ImageProcessingLayer* msg) {
  return *msg->image_input_;
}
const ::ws_engine::ImageParameter&
ImageProcessingLayer::_Internal::image_output(const ImageProcessingLayer* msg) {
  return *msg->image_output_;
}
ImageProcessingLayer::ImageProcessingLayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.ImageProcessingLayer)
}
ImageProcessingLayer::ImageProcessingLayer(const ImageProcessingLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lib_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lib_file()) {
    lib_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lib_file_);
  }
  func_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_func_name()) {
    func_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.func_name_);
  }
  func_args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_func_args()) {
    func_args_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.func_args_);
  }
  if (from._internal_has_image_input()) {
    image_input_ = new ::ws_engine::ImageParameter(*from.image_input_);
  } else {
    image_input_ = nullptr;
  }
  if (from._internal_has_image_output()) {
    image_output_ = new ::ws_engine::ImageParameter(*from.image_output_);
  } else {
    image_output_ = nullptr;
  }
  layer_id_ = from.layer_id_;
  // @@protoc_insertion_point(copy_constructor:ws_engine.ImageProcessingLayer)
}

void ImageProcessingLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageProcessingLayer_config_2eproto.base);
  lib_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  func_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  func_args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_id_) -
      reinterpret_cast<char*>(&image_input_)) + sizeof(layer_id_));
}

ImageProcessingLayer::~ImageProcessingLayer() {
  // @@protoc_insertion_point(destructor:ws_engine.ImageProcessingLayer)
  SharedDtor();
}

void ImageProcessingLayer::SharedDtor() {
  lib_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  func_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  func_args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_input_;
  if (this != internal_default_instance()) delete image_output_;
}

void ImageProcessingLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageProcessingLayer& ImageProcessingLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageProcessingLayer_config_2eproto.base);
  return *internal_default_instance();
}


void ImageProcessingLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.ImageProcessingLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      lib_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      func_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      func_args_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(image_input_ != nullptr);
      image_input_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(image_output_ != nullptr);
      image_output_->Clear();
    }
  }
  layer_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ImageProcessingLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 layer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_layer_id(&has_bits);
          layer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ws_engine.ImageParameter image_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ws_engine.ImageParameter image_output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string lib_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lib_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ws_engine.ImageProcessingLayer.lib_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string func_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_func_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ws_engine.ImageProcessingLayer.func_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string func_args = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_func_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ws_engine.ImageProcessingLayer.func_args");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageProcessingLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.ImageProcessingLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 layer_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_layer_id(), target);
  }

  // required .ws_engine.ImageParameter image_input = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image_input(this), target, stream);
  }

  // required .ws_engine.ImageParameter image_output = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::image_output(this), target, stream);
  }

  // required string lib_file = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lib_file().data(), static_cast<int>(this->_internal_lib_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ws_engine.ImageProcessingLayer.lib_file");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lib_file(), target);
  }

  // required string func_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_func_name().data(), static_cast<int>(this->_internal_func_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ws_engine.ImageProcessingLayer.func_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_func_name(), target);
  }

  // optional string func_args = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_func_args().data(), static_cast<int>(this->_internal_func_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ws_engine.ImageProcessingLayer.func_args");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_func_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.ImageProcessingLayer)
  return target;
}

size_t ImageProcessingLayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ws_engine.ImageProcessingLayer)
  size_t total_size = 0;

  if (_internal_has_lib_file()) {
    // required string lib_file = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lib_file());
  }

  if (_internal_has_func_name()) {
    // required string func_name = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_func_name());
  }

  if (_internal_has_image_input()) {
    // required .ws_engine.ImageParameter image_input = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_input_);
  }

  if (_internal_has_image_output()) {
    // required .ws_engine.ImageParameter image_output = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_output_);
  }

  if (_internal_has_layer_id()) {
    // required int32 layer_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_layer_id());
  }

  return total_size;
}
size_t ImageProcessingLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.ImageProcessingLayer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003b) ^ 0x0000003b) == 0) {  // All required fields are present.
    // required string lib_file = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lib_file());

    // required string func_name = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_func_name());

    // required .ws_engine.ImageParameter image_input = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_input_);

    // required .ws_engine.ImageParameter image_output = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_output_);

    // required int32 layer_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_layer_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string func_args = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_func_args());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageProcessingLayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.ImageProcessingLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageProcessingLayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageProcessingLayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.ImageProcessingLayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.ImageProcessingLayer)
    MergeFrom(*source);
  }
}

void ImageProcessingLayer::MergeFrom(const ImageProcessingLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.ImageProcessingLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      lib_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lib_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      func_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.func_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      func_args_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.func_args_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_image_input()->::ws_engine::ImageParameter::MergeFrom(from._internal_image_input());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_image_output()->::ws_engine::ImageParameter::MergeFrom(from._internal_image_output());
    }
    if (cached_has_bits & 0x00000020u) {
      layer_id_ = from.layer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageProcessingLayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.ImageProcessingLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageProcessingLayer::CopyFrom(const ImageProcessingLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.ImageProcessingLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProcessingLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;
  if (_internal_has_image_input()) {
    if (!image_input_->IsInitialized()) return false;
  }
  if (_internal_has_image_output()) {
    if (!image_output_->IsInitialized()) return false;
  }
  return true;
}

void ImageProcessingLayer::InternalSwap(ImageProcessingLayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lib_file_.Swap(&other->lib_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  func_name_.Swap(&other->func_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  func_args_.Swap(&other->func_args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_input_, other->image_input_);
  swap(image_output_, other->image_output_);
  swap(layer_id_, other->layer_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageProcessingLayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPL_RGB2Gray::InitAsDefaultInstance() {
  ::ws_engine::_IPL_RGB2Gray_default_instance_._instance.get_mutable()->head_ = const_cast< ::ws_engine::ImageProcessingLayer*>(
      ::ws_engine::ImageProcessingLayer::internal_default_instance());
}
class IPL_RGB2Gray::_Internal {
 public:
  using HasBits = decltype(std::declval<IPL_RGB2Gray>()._has_bits_);
  static const ::ws_engine::ImageProcessingLayer& head(const IPL_RGB2Gray* msg);
  static void set_has_head(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ws_engine::ImageProcessingLayer&
IPL_RGB2Gray::_Internal::head(const IPL_RGB2Gray* msg) {
  return *msg->head_;
}
IPL_RGB2Gray::IPL_RGB2Gray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.IPL_RGB2Gray)
}
IPL_RGB2Gray::IPL_RGB2Gray(const IPL_RGB2Gray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::ws_engine::ImageProcessingLayer(*from.head_);
  } else {
    head_ = nullptr;
  }
  channel_selected_ = from.channel_selected_;
  // @@protoc_insertion_point(copy_constructor:ws_engine.IPL_RGB2Gray)
}

void IPL_RGB2Gray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPL_RGB2Gray_config_2eproto.base);
  ::memset(&head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_selected_) -
      reinterpret_cast<char*>(&head_)) + sizeof(channel_selected_));
}

IPL_RGB2Gray::~IPL_RGB2Gray() {
  // @@protoc_insertion_point(destructor:ws_engine.IPL_RGB2Gray)
  SharedDtor();
}

void IPL_RGB2Gray::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
}

void IPL_RGB2Gray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPL_RGB2Gray& IPL_RGB2Gray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPL_RGB2Gray_config_2eproto.base);
  return *internal_default_instance();
}


void IPL_RGB2Gray::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.IPL_RGB2Gray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(head_ != nullptr);
    head_->Clear();
  }
  channel_selected_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IPL_RGB2Gray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ws_engine.ImageProcessingLayer head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 channel_selected = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel_selected(&has_bits);
          channel_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPL_RGB2Gray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.IPL_RGB2Gray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ws_engine.ImageProcessingLayer head = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head(this), target, stream);
  }

  // optional int32 channel_selected = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel_selected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.IPL_RGB2Gray)
  return target;
}

size_t IPL_RGB2Gray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.IPL_RGB2Gray)
  size_t total_size = 0;

  // required .ws_engine.ImageProcessingLayer head = 1;
  if (_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 channel_selected = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_selected());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPL_RGB2Gray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.IPL_RGB2Gray)
  GOOGLE_DCHECK_NE(&from, this);
  const IPL_RGB2Gray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPL_RGB2Gray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.IPL_RGB2Gray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.IPL_RGB2Gray)
    MergeFrom(*source);
  }
}

void IPL_RGB2Gray::MergeFrom(const IPL_RGB2Gray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.IPL_RGB2Gray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_head()->::ws_engine::ImageProcessingLayer::MergeFrom(from._internal_head());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_selected_ = from.channel_selected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IPL_RGB2Gray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.IPL_RGB2Gray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPL_RGB2Gray::CopyFrom(const IPL_RGB2Gray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.IPL_RGB2Gray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPL_RGB2Gray::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_head()) {
    if (!head_->IsInitialized()) return false;
  }
  return true;
}

void IPL_RGB2Gray::InternalSwap(IPL_RGB2Gray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(head_, other->head_);
  swap(channel_selected_, other->channel_selected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPL_RGB2Gray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPL_BLUR::InitAsDefaultInstance() {
  ::ws_engine::_IPL_BLUR_default_instance_._instance.get_mutable()->head_ = const_cast< ::ws_engine::ImageProcessingLayer*>(
      ::ws_engine::ImageProcessingLayer::internal_default_instance());
}
class IPL_BLUR::_Internal {
 public:
  using HasBits = decltype(std::declval<IPL_BLUR>()._has_bits_);
  static const ::ws_engine::ImageProcessingLayer& head(const IPL_BLUR* msg);
  static void set_has_head(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_blur_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ws_engine::ImageProcessingLayer&
IPL_BLUR::_Internal::head(const IPL_BLUR* msg) {
  return *msg->head_;
}
IPL_BLUR::IPL_BLUR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.IPL_BLUR)
}
IPL_BLUR::IPL_BLUR(const IPL_BLUR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::ws_engine::ImageProcessingLayer(*from.head_);
  } else {
    head_ = nullptr;
  }
  blur_level_ = from.blur_level_;
  // @@protoc_insertion_point(copy_constructor:ws_engine.IPL_BLUR)
}

void IPL_BLUR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPL_BLUR_config_2eproto.base);
  head_ = nullptr;
  blur_level_ = 1;
}

IPL_BLUR::~IPL_BLUR() {
  // @@protoc_insertion_point(destructor:ws_engine.IPL_BLUR)
  SharedDtor();
}

void IPL_BLUR::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
}

void IPL_BLUR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPL_BLUR& IPL_BLUR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPL_BLUR_config_2eproto.base);
  return *internal_default_instance();
}


void IPL_BLUR::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.IPL_BLUR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(head_ != nullptr);
      head_->Clear();
    }
    blur_level_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IPL_BLUR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ws_engine.ImageProcessingLayer head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 blur_level = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_blur_level(&has_bits);
          blur_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPL_BLUR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.IPL_BLUR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ws_engine.ImageProcessingLayer head = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head(this), target, stream);
  }

  // optional int32 blur_level = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_blur_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.IPL_BLUR)
  return target;
}

size_t IPL_BLUR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.IPL_BLUR)
  size_t total_size = 0;

  // required .ws_engine.ImageProcessingLayer head = 1;
  if (_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 blur_level = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blur_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPL_BLUR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.IPL_BLUR)
  GOOGLE_DCHECK_NE(&from, this);
  const IPL_BLUR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPL_BLUR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.IPL_BLUR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.IPL_BLUR)
    MergeFrom(*source);
  }
}

void IPL_BLUR::MergeFrom(const IPL_BLUR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.IPL_BLUR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_head()->::ws_engine::ImageProcessingLayer::MergeFrom(from._internal_head());
    }
    if (cached_has_bits & 0x00000002u) {
      blur_level_ = from.blur_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IPL_BLUR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.IPL_BLUR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPL_BLUR::CopyFrom(const IPL_BLUR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.IPL_BLUR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPL_BLUR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_head()) {
    if (!head_->IsInitialized()) return false;
  }
  return true;
}

void IPL_BLUR::InternalSwap(IPL_BLUR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(head_, other->head_);
  swap(blur_level_, other->blur_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPL_BLUR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPL_Engine::InitAsDefaultInstance() {
  ::ws_engine::_IPL_Engine_default_instance_._instance.get_mutable()->rgb2gray_ = const_cast< ::ws_engine::IPL_RGB2Gray*>(
      ::ws_engine::IPL_RGB2Gray::internal_default_instance());
  ::ws_engine::_IPL_Engine_default_instance_._instance.get_mutable()->blur_ = const_cast< ::ws_engine::IPL_BLUR*>(
      ::ws_engine::IPL_BLUR::internal_default_instance());
}
class IPL_Engine::_Internal {
 public:
  using HasBits = decltype(std::declval<IPL_Engine>()._has_bits_);
  static void set_has_worker(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ws_engine::IPL_RGB2Gray& rgb2gray(const IPL_Engine* msg);
  static void set_has_rgb2gray(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ws_engine::IPL_BLUR& blur(const IPL_Engine* msg);
  static void set_has_blur(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ws_engine::IPL_RGB2Gray&
IPL_Engine::_Internal::rgb2gray(const IPL_Engine* msg) {
  return *msg->rgb2gray_;
}
const ::ws_engine::IPL_BLUR&
IPL_Engine::_Internal::blur(const IPL_Engine* msg) {
  return *msg->blur_;
}
IPL_Engine::IPL_Engine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.IPL_Engine)
}
IPL_Engine::IPL_Engine(const IPL_Engine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rgb2gray()) {
    rgb2gray_ = new ::ws_engine::IPL_RGB2Gray(*from.rgb2gray_);
  } else {
    rgb2gray_ = nullptr;
  }
  if (from._internal_has_blur()) {
    blur_ = new ::ws_engine::IPL_BLUR(*from.blur_);
  } else {
    blur_ = nullptr;
  }
  worker_ = from.worker_;
  // @@protoc_insertion_point(copy_constructor:ws_engine.IPL_Engine)
}

void IPL_Engine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPL_Engine_config_2eproto.base);
  ::memset(&rgb2gray_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blur_) -
      reinterpret_cast<char*>(&rgb2gray_)) + sizeof(blur_));
  worker_ = 1;
}

IPL_Engine::~IPL_Engine() {
  // @@protoc_insertion_point(destructor:ws_engine.IPL_Engine)
  SharedDtor();
}

void IPL_Engine::SharedDtor() {
  if (this != internal_default_instance()) delete rgb2gray_;
  if (this != internal_default_instance()) delete blur_;
}

void IPL_Engine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPL_Engine& IPL_Engine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPL_Engine_config_2eproto.base);
  return *internal_default_instance();
}


void IPL_Engine::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.IPL_Engine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(rgb2gray_ != nullptr);
      rgb2gray_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(blur_ != nullptr);
      blur_->Clear();
    }
    worker_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IPL_Engine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 worker = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_worker(&has_bits);
          worker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ws_engine.IPL_RGB2Gray rgb2gray = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgb2gray(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ws_engine.IPL_BLUR blur = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_blur(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPL_Engine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.IPL_Engine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 worker = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_worker(), target);
  }

  // optional .ws_engine.IPL_RGB2Gray rgb2gray = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rgb2gray(this), target, stream);
  }

  // optional .ws_engine.IPL_BLUR blur = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::blur(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.IPL_Engine)
  return target;
}

size_t IPL_Engine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.IPL_Engine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ws_engine.IPL_RGB2Gray rgb2gray = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rgb2gray_);
    }

    // optional .ws_engine.IPL_BLUR blur = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blur_);
    }

    // optional int32 worker = 1 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_worker());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPL_Engine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.IPL_Engine)
  GOOGLE_DCHECK_NE(&from, this);
  const IPL_Engine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPL_Engine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.IPL_Engine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.IPL_Engine)
    MergeFrom(*source);
  }
}

void IPL_Engine::MergeFrom(const IPL_Engine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.IPL_Engine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rgb2gray()->::ws_engine::IPL_RGB2Gray::MergeFrom(from._internal_rgb2gray());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_blur()->::ws_engine::IPL_BLUR::MergeFrom(from._internal_blur());
    }
    if (cached_has_bits & 0x00000004u) {
      worker_ = from.worker_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IPL_Engine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.IPL_Engine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPL_Engine::CopyFrom(const IPL_Engine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.IPL_Engine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPL_Engine::IsInitialized() const {
  if (_internal_has_rgb2gray()) {
    if (!rgb2gray_->IsInitialized()) return false;
  }
  if (_internal_has_blur()) {
    if (!blur_->IsInitialized()) return false;
  }
  return true;
}

void IPL_Engine::InternalSwap(IPL_Engine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rgb2gray_, other->rgb2gray_);
  swap(blur_, other->blur_);
  swap(worker_, other->worker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPL_Engine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayDevice::InitAsDefaultInstance() {
}
class DisplayDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayDevice>()._has_bits_);
  static void set_has_show_in_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisplayDevice::DisplayDevice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.DisplayDevice)
}
DisplayDevice::DisplayDevice(const DisplayDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_file_name()) {
    output_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_file_name_);
  }
  show_in_screen_ = from.show_in_screen_;
  // @@protoc_insertion_point(copy_constructor:ws_engine.DisplayDevice)
}

void DisplayDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayDevice_config_2eproto.base);
  output_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  show_in_screen_ = true;
}

DisplayDevice::~DisplayDevice() {
  // @@protoc_insertion_point(destructor:ws_engine.DisplayDevice)
  SharedDtor();
}

void DisplayDevice::SharedDtor() {
  output_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisplayDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayDevice& DisplayDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayDevice_config_2eproto.base);
  return *internal_default_instance();
}


void DisplayDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.DisplayDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      output_file_name_.ClearNonDefaultToEmptyNoArena();
    }
    show_in_screen_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DisplayDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool show_in_screen = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_show_in_screen(&has_bits);
          show_in_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_output_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ws_engine.DisplayDevice.output_file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.DisplayDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool show_in_screen = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_show_in_screen(), target);
  }

  // optional string output_file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_file_name().data(), static_cast<int>(this->_internal_output_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ws_engine.DisplayDevice.output_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.DisplayDevice)
  return target;
}

size_t DisplayDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.DisplayDevice)
  size_t total_size = 0;

  // required bool show_in_screen = 1 [default = true];
  if (_internal_has_show_in_screen()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string output_file_name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_file_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.DisplayDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.DisplayDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.DisplayDevice)
    MergeFrom(*source);
  }
}

void DisplayDevice::MergeFrom(const DisplayDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.DisplayDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      output_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      show_in_screen_ = from.show_in_screen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplayDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.DisplayDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayDevice::CopyFrom(const DisplayDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.DisplayDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayDevice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void DisplayDevice::InternalSwap(DisplayDevice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  output_file_name_.Swap(&other->output_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(show_in_screen_, other->show_in_screen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WsEngineParameters::InitAsDefaultInstance() {
  ::ws_engine::_WsEngineParameters_default_instance_._instance.get_mutable()->sys_params_ = const_cast< ::ws_engine::SystemParameter*>(
      ::ws_engine::SystemParameter::internal_default_instance());
  ::ws_engine::_WsEngineParameters_default_instance_._instance.get_mutable()->camera_ = const_cast< ::ws_engine::CameraParameter*>(
      ::ws_engine::CameraParameter::internal_default_instance());
  ::ws_engine::_WsEngineParameters_default_instance_._instance.get_mutable()->ipl_engine_ = const_cast< ::ws_engine::IPL_Engine*>(
      ::ws_engine::IPL_Engine::internal_default_instance());
  ::ws_engine::_WsEngineParameters_default_instance_._instance.get_mutable()->display_device_ = const_cast< ::ws_engine::DisplayDevice*>(
      ::ws_engine::DisplayDevice::internal_default_instance());
}
class WsEngineParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<WsEngineParameters>()._has_bits_);
  static const ::ws_engine::SystemParameter& sys_params(const WsEngineParameters* msg);
  static void set_has_sys_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ws_engine::CameraParameter& camera(const WsEngineParameters* msg);
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ws_engine::IPL_Engine& ipl_engine(const WsEngineParameters* msg);
  static void set_has_ipl_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ws_engine::DisplayDevice& display_device(const WsEngineParameters* msg);
  static void set_has_display_device(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ws_engine::SystemParameter&
WsEngineParameters::_Internal::sys_params(const WsEngineParameters* msg) {
  return *msg->sys_params_;
}
const ::ws_engine::CameraParameter&
WsEngineParameters::_Internal::camera(const WsEngineParameters* msg) {
  return *msg->camera_;
}
const ::ws_engine::IPL_Engine&
WsEngineParameters::_Internal::ipl_engine(const WsEngineParameters* msg) {
  return *msg->ipl_engine_;
}
const ::ws_engine::DisplayDevice&
WsEngineParameters::_Internal::display_device(const WsEngineParameters* msg) {
  return *msg->display_device_;
}
WsEngineParameters::WsEngineParameters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.WsEngineParameters)
}
WsEngineParameters::WsEngineParameters(const WsEngineParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sys_params()) {
    sys_params_ = new ::ws_engine::SystemParameter(*from.sys_params_);
  } else {
    sys_params_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::ws_engine::CameraParameter(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  if (from._internal_has_ipl_engine()) {
    ipl_engine_ = new ::ws_engine::IPL_Engine(*from.ipl_engine_);
  } else {
    ipl_engine_ = nullptr;
  }
  if (from._internal_has_display_device()) {
    display_device_ = new ::ws_engine::DisplayDevice(*from.display_device_);
  } else {
    display_device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ws_engine.WsEngineParameters)
}

void WsEngineParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WsEngineParameters_config_2eproto.base);
  ::memset(&sys_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_device_) -
      reinterpret_cast<char*>(&sys_params_)) + sizeof(display_device_));
}

WsEngineParameters::~WsEngineParameters() {
  // @@protoc_insertion_point(destructor:ws_engine.WsEngineParameters)
  SharedDtor();
}

void WsEngineParameters::SharedDtor() {
  if (this != internal_default_instance()) delete sys_params_;
  if (this != internal_default_instance()) delete camera_;
  if (this != internal_default_instance()) delete ipl_engine_;
  if (this != internal_default_instance()) delete display_device_;
}

void WsEngineParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WsEngineParameters& WsEngineParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WsEngineParameters_config_2eproto.base);
  return *internal_default_instance();
}


void WsEngineParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.WsEngineParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sys_params_ != nullptr);
      sys_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(camera_ != nullptr);
      camera_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ipl_engine_ != nullptr);
      ipl_engine_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(display_device_ != nullptr);
      display_device_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WsEngineParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ws_engine.SystemParameter sys_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ws_engine.CameraParameter camera = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ws_engine.IPL_Engine ipl_engine = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipl_engine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ws_engine.DisplayDevice display_device = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WsEngineParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.WsEngineParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ws_engine.SystemParameter sys_params = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sys_params(this), target, stream);
  }

  // required .ws_engine.CameraParameter camera = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::camera(this), target, stream);
  }

  // required .ws_engine.IPL_Engine ipl_engine = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ipl_engine(this), target, stream);
  }

  // optional .ws_engine.DisplayDevice display_device = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::display_device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.WsEngineParameters)
  return target;
}

size_t WsEngineParameters::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ws_engine.WsEngineParameters)
  size_t total_size = 0;

  if (_internal_has_sys_params()) {
    // required .ws_engine.SystemParameter sys_params = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sys_params_);
  }

  if (_internal_has_camera()) {
    // required .ws_engine.CameraParameter camera = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  if (_internal_has_ipl_engine()) {
    // required .ws_engine.IPL_Engine ipl_engine = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ipl_engine_);
  }

  return total_size;
}
size_t WsEngineParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.WsEngineParameters)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ws_engine.SystemParameter sys_params = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sys_params_);

    // required .ws_engine.CameraParameter camera = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);

    // required .ws_engine.IPL_Engine ipl_engine = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ipl_engine_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ws_engine.DisplayDevice display_device = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *display_device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WsEngineParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.WsEngineParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const WsEngineParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WsEngineParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.WsEngineParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.WsEngineParameters)
    MergeFrom(*source);
  }
}

void WsEngineParameters::MergeFrom(const WsEngineParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.WsEngineParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sys_params()->::ws_engine::SystemParameter::MergeFrom(from._internal_sys_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_camera()->::ws_engine::CameraParameter::MergeFrom(from._internal_camera());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ipl_engine()->::ws_engine::IPL_Engine::MergeFrom(from._internal_ipl_engine());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_display_device()->::ws_engine::DisplayDevice::MergeFrom(from._internal_display_device());
    }
  }
}

void WsEngineParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.WsEngineParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsEngineParameters::CopyFrom(const WsEngineParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.WsEngineParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsEngineParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (_internal_has_camera()) {
    if (!camera_->IsInitialized()) return false;
  }
  if (_internal_has_ipl_engine()) {
    if (!ipl_engine_->IsInitialized()) return false;
  }
  if (_internal_has_display_device()) {
    if (!display_device_->IsInitialized()) return false;
  }
  return true;
}

void WsEngineParameters::InternalSwap(WsEngineParameters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sys_params_, other->sys_params_);
  swap(camera_, other->camera_);
  swap(ipl_engine_, other->ipl_engine_);
  swap(display_device_, other->display_device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WsEngineParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ws_engine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ws_engine::SystemParameter* Arena::CreateMaybeMessage< ::ws_engine::SystemParameter >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::SystemParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ws_engine::CameraParameter* Arena::CreateMaybeMessage< ::ws_engine::CameraParameter >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::CameraParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ws_engine::PointParameter* Arena::CreateMaybeMessage< ::ws_engine::PointParameter >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::PointParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ws_engine::ROIParameter* Arena::CreateMaybeMessage< ::ws_engine::ROIParameter >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::ROIParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ws_engine::ImageParameter* Arena::CreateMaybeMessage< ::ws_engine::ImageParameter >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::ImageParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ws_engine::ImageProcessingLayer* Arena::CreateMaybeMessage< ::ws_engine::ImageProcessingLayer >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::ImageProcessingLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::ws_engine::IPL_RGB2Gray* Arena::CreateMaybeMessage< ::ws_engine::IPL_RGB2Gray >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::IPL_RGB2Gray >(arena);
}
template<> PROTOBUF_NOINLINE ::ws_engine::IPL_BLUR* Arena::CreateMaybeMessage< ::ws_engine::IPL_BLUR >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::IPL_BLUR >(arena);
}
template<> PROTOBUF_NOINLINE ::ws_engine::IPL_Engine* Arena::CreateMaybeMessage< ::ws_engine::IPL_Engine >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::IPL_Engine >(arena);
}
template<> PROTOBUF_NOINLINE ::ws_engine::DisplayDevice* Arena::CreateMaybeMessage< ::ws_engine::DisplayDevice >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::DisplayDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::ws_engine::WsEngineParameters* Arena::CreateMaybeMessage< ::ws_engine::WsEngineParameters >(Arena* arena) {
  return Arena::CreateInternal< ::ws_engine::WsEngineParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
