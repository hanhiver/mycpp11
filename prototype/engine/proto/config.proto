syntax = "proto2";

package ws_engine; 

// System parameter to control the programing running. 
// Process level parameters. 
message SystemParameter {
    optional string debug_file_root = 1 [default = "/tmp"];
    optional string debug_level = 2 [default = "info"];
}

// CameraParameter describe a phisical connected cameras in the system. 
message CameraParameter {
    enum CameraType {
        gige = 0;          // GIGE camera. 
        usb = 1;           // USB camera. 
        video_file = 2;    // Video file. 
    }
    optional CameraType type = 1 [default = gige];
    required string camera_name = 2; 
    required int32 camera_id = 3; 
    optional int32 camera_fps = 4 [default = 0]; // 0 means unlimited. 
    optional bool camera_auto_balance = 5 [default = false];
}

// PointParameter defined a point in a image. 
message PointParameter {
    required int32 x = 1; 
    required int32 y = 2;
}

// ROIParameter defined a ROI zone in a image. 
message ROIParameter {
    optional bool enable = 1 [default = true];
    required PointParameter left_up_point = 2; 
    required PointParameter right_bottom_point = 3; 
}

// ImageParameter defined the format of the images which pass through different layer of the engine. 
message ImageParameter {
    required int32 width = 1;
    required int32 height = 2; 
    optional int32 channel = 3 [default = 1]; // Default is gray image.  
    optional int32 depth = 4 [default = 8];  // Default is 8bits for each channel of a pixel.
    optional ROIParameter ROI_zone = 5; // Default disable. 
}


// Defined a layer of the ImageProcessingEngine. 
message ImageProcessingLayer {
    required ImageParameter image_input = 1; 
    required ImageParameter image_output = 2;
    required string lib_file = 3;  // .so file that contain the func. 
    required string func_name = 4;  // func name that call the image layer.
    optional string func_args = 5;  // Args that call the function.   
}

// RGB2Gray is a ImageProcessingLayer (IPL)
message IPL_RGB2Gray {
    required ImageProcessingLayer head = 1; 
    optional int32 channel_selected = 2 [default = 0]; // 0: mixed, 1: red, 2: green, 3: blue. 
}

// BLUR is a ImageProcessingLayer (IPL)
message IPL_BLUR {
    required ImageProcessingLayer head = 1; 
    optional int32 blur_level = 2 [default = 1]; 
}

// Image Processing Engine
message IPL_Engine {
    optional IPL_RGB2Gray rgb2gray = 1; 
    optional IPL_BLUR blur = 2; 
}
