// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ws_engine {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class CameraParameter;
class IPL_BLUR;
class IPL_Engine;
class IPL_RGB2Gray;
class ImageParameter;
class ImageProcessingLayer;
class PointParameter;
class ROIParameter;
class SystemParameter;

enum CameraParameter_CameraType {
  CameraParameter_CameraType_gige = 0,
  CameraParameter_CameraType_usb = 1,
  CameraParameter_CameraType_video_file = 2
};
bool CameraParameter_CameraType_IsValid(int value);
const CameraParameter_CameraType CameraParameter_CameraType_CameraType_MIN = CameraParameter_CameraType_gige;
const CameraParameter_CameraType CameraParameter_CameraType_CameraType_MAX = CameraParameter_CameraType_video_file;
const int CameraParameter_CameraType_CameraType_ARRAYSIZE = CameraParameter_CameraType_CameraType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraParameter_CameraType_descriptor();
inline const ::std::string& CameraParameter_CameraType_Name(CameraParameter_CameraType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraParameter_CameraType_descriptor(), value);
}
inline bool CameraParameter_CameraType_Parse(
    const ::std::string& name, CameraParameter_CameraType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraParameter_CameraType>(
    CameraParameter_CameraType_descriptor(), name, value);
}
// ===================================================================

class SystemParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ws_engine.SystemParameter) */ {
 public:
  SystemParameter();
  virtual ~SystemParameter();

  SystemParameter(const SystemParameter& from);

  inline SystemParameter& operator=(const SystemParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemParameter& default_instance();

  void Swap(SystemParameter* other);

  // implements Message ----------------------------------------------

  inline SystemParameter* New() const { return New(NULL); }

  SystemParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemParameter& from);
  void MergeFrom(const SystemParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string debug_file_root = 1 [default = "/tmp"];
  bool has_debug_file_root() const;
  void clear_debug_file_root();
  static const int kDebugFileRootFieldNumber = 1;
  const ::std::string& debug_file_root() const;
  void set_debug_file_root(const ::std::string& value);
  void set_debug_file_root(const char* value);
  void set_debug_file_root(const char* value, size_t size);
  ::std::string* mutable_debug_file_root();
  ::std::string* release_debug_file_root();
  void set_allocated_debug_file_root(::std::string* debug_file_root);

  // optional string debug_level = 2 [default = "info"];
  bool has_debug_level() const;
  void clear_debug_level();
  static const int kDebugLevelFieldNumber = 2;
  const ::std::string& debug_level() const;
  void set_debug_level(const ::std::string& value);
  void set_debug_level(const char* value);
  void set_debug_level(const char* value, size_t size);
  ::std::string* mutable_debug_level();
  ::std::string* release_debug_level();
  void set_allocated_debug_level(::std::string* debug_level);

  // @@protoc_insertion_point(class_scope:ws_engine.SystemParameter)
 private:
  inline void set_has_debug_file_root();
  inline void clear_has_debug_file_root();
  inline void set_has_debug_level();
  inline void clear_has_debug_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_debug_file_root_;
  ::google::protobuf::internal::ArenaStringPtr debug_file_root_;
  static ::std::string* _default_debug_level_;
  ::google::protobuf::internal::ArenaStringPtr debug_level_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static SystemParameter* default_instance_;
};
// -------------------------------------------------------------------

class CameraParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ws_engine.CameraParameter) */ {
 public:
  CameraParameter();
  virtual ~CameraParameter();

  CameraParameter(const CameraParameter& from);

  inline CameraParameter& operator=(const CameraParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraParameter& default_instance();

  void Swap(CameraParameter* other);

  // implements Message ----------------------------------------------

  inline CameraParameter* New() const { return New(NULL); }

  CameraParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraParameter& from);
  void MergeFrom(const CameraParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CameraParameter_CameraType CameraType;
  static const CameraType gige =
    CameraParameter_CameraType_gige;
  static const CameraType usb =
    CameraParameter_CameraType_usb;
  static const CameraType video_file =
    CameraParameter_CameraType_video_file;
  static inline bool CameraType_IsValid(int value) {
    return CameraParameter_CameraType_IsValid(value);
  }
  static const CameraType CameraType_MIN =
    CameraParameter_CameraType_CameraType_MIN;
  static const CameraType CameraType_MAX =
    CameraParameter_CameraType_CameraType_MAX;
  static const int CameraType_ARRAYSIZE =
    CameraParameter_CameraType_CameraType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CameraType_descriptor() {
    return CameraParameter_CameraType_descriptor();
  }
  static inline const ::std::string& CameraType_Name(CameraType value) {
    return CameraParameter_CameraType_Name(value);
  }
  static inline bool CameraType_Parse(const ::std::string& name,
      CameraType* value) {
    return CameraParameter_CameraType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ws_engine.CameraParameter.CameraType type = 1 [default = gige];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ws_engine::CameraParameter_CameraType type() const;
  void set_type(::ws_engine::CameraParameter_CameraType value);

  // required string camera_name = 2;
  bool has_camera_name() const;
  void clear_camera_name();
  static const int kCameraNameFieldNumber = 2;
  const ::std::string& camera_name() const;
  void set_camera_name(const ::std::string& value);
  void set_camera_name(const char* value);
  void set_camera_name(const char* value, size_t size);
  ::std::string* mutable_camera_name();
  ::std::string* release_camera_name();
  void set_allocated_camera_name(::std::string* camera_name);

  // required int32 camera_id = 3;
  bool has_camera_id() const;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 3;
  ::google::protobuf::int32 camera_id() const;
  void set_camera_id(::google::protobuf::int32 value);

  // optional int32 camera_fps = 4 [default = 0];
  bool has_camera_fps() const;
  void clear_camera_fps();
  static const int kCameraFpsFieldNumber = 4;
  ::google::protobuf::int32 camera_fps() const;
  void set_camera_fps(::google::protobuf::int32 value);

  // optional bool camera_auto_balance = 5 [default = false];
  bool has_camera_auto_balance() const;
  void clear_camera_auto_balance();
  static const int kCameraAutoBalanceFieldNumber = 5;
  bool camera_auto_balance() const;
  void set_camera_auto_balance(bool value);

  // @@protoc_insertion_point(class_scope:ws_engine.CameraParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_camera_name();
  inline void clear_has_camera_name();
  inline void set_has_camera_id();
  inline void clear_has_camera_id();
  inline void set_has_camera_fps();
  inline void clear_has_camera_fps();
  inline void set_has_camera_auto_balance();
  inline void clear_has_camera_auto_balance();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr camera_name_;
  int type_;
  ::google::protobuf::int32 camera_id_;
  ::google::protobuf::int32 camera_fps_;
  bool camera_auto_balance_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static CameraParameter* default_instance_;
};
// -------------------------------------------------------------------

class PointParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ws_engine.PointParameter) */ {
 public:
  PointParameter();
  virtual ~PointParameter();

  PointParameter(const PointParameter& from);

  inline PointParameter& operator=(const PointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointParameter& default_instance();

  void Swap(PointParameter* other);

  // implements Message ----------------------------------------------

  inline PointParameter* New() const { return New(NULL); }

  PointParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointParameter& from);
  void MergeFrom(const PointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ws_engine.PointParameter)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static PointParameter* default_instance_;
};
// -------------------------------------------------------------------

class ROIParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ws_engine.ROIParameter) */ {
 public:
  ROIParameter();
  virtual ~ROIParameter();

  ROIParameter(const ROIParameter& from);

  inline ROIParameter& operator=(const ROIParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIParameter& default_instance();

  void Swap(ROIParameter* other);

  // implements Message ----------------------------------------------

  inline ROIParameter* New() const { return New(NULL); }

  ROIParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROIParameter& from);
  void MergeFrom(const ROIParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ROIParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enable = 1 [default = true];
  bool has_enable() const;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // required .ws_engine.PointParameter left_up_point = 2;
  bool has_left_up_point() const;
  void clear_left_up_point();
  static const int kLeftUpPointFieldNumber = 2;
  const ::ws_engine::PointParameter& left_up_point() const;
  ::ws_engine::PointParameter* mutable_left_up_point();
  ::ws_engine::PointParameter* release_left_up_point();
  void set_allocated_left_up_point(::ws_engine::PointParameter* left_up_point);

  // required .ws_engine.PointParameter right_bottom_point = 3;
  bool has_right_bottom_point() const;
  void clear_right_bottom_point();
  static const int kRightBottomPointFieldNumber = 3;
  const ::ws_engine::PointParameter& right_bottom_point() const;
  ::ws_engine::PointParameter* mutable_right_bottom_point();
  ::ws_engine::PointParameter* release_right_bottom_point();
  void set_allocated_right_bottom_point(::ws_engine::PointParameter* right_bottom_point);

  // @@protoc_insertion_point(class_scope:ws_engine.ROIParameter)
 private:
  inline void set_has_enable();
  inline void clear_has_enable();
  inline void set_has_left_up_point();
  inline void clear_has_left_up_point();
  inline void set_has_right_bottom_point();
  inline void clear_has_right_bottom_point();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ws_engine::PointParameter* left_up_point_;
  ::ws_engine::PointParameter* right_bottom_point_;
  bool enable_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static ROIParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ws_engine.ImageParameter) */ {
 public:
  ImageParameter();
  virtual ~ImageParameter();

  ImageParameter(const ImageParameter& from);

  inline ImageParameter& operator=(const ImageParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageParameter& default_instance();

  void Swap(ImageParameter* other);

  // implements Message ----------------------------------------------

  inline ImageParameter* New() const { return New(NULL); }

  ImageParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageParameter& from);
  void MergeFrom(const ImageParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // required int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 channel = 3 [default = 1];
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // optional int32 depth = 4 [default = 8];
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 4;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional .ws_engine.ROIParameter ROI_zone = 5;
  bool has_roi_zone() const;
  void clear_roi_zone();
  static const int kROIZoneFieldNumber = 5;
  const ::ws_engine::ROIParameter& roi_zone() const;
  ::ws_engine::ROIParameter* mutable_roi_zone();
  ::ws_engine::ROIParameter* release_roi_zone();
  void set_allocated_roi_zone(::ws_engine::ROIParameter* roi_zone);

  // @@protoc_insertion_point(class_scope:ws_engine.ImageParameter)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_roi_zone();
  inline void clear_has_roi_zone();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 depth_;
  ::ws_engine::ROIParameter* roi_zone_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static ImageParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageProcessingLayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ws_engine.ImageProcessingLayer) */ {
 public:
  ImageProcessingLayer();
  virtual ~ImageProcessingLayer();

  ImageProcessingLayer(const ImageProcessingLayer& from);

  inline ImageProcessingLayer& operator=(const ImageProcessingLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageProcessingLayer& default_instance();

  void Swap(ImageProcessingLayer* other);

  // implements Message ----------------------------------------------

  inline ImageProcessingLayer* New() const { return New(NULL); }

  ImageProcessingLayer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageProcessingLayer& from);
  void MergeFrom(const ImageProcessingLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageProcessingLayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ws_engine.ImageParameter image_input = 1;
  bool has_image_input() const;
  void clear_image_input();
  static const int kImageInputFieldNumber = 1;
  const ::ws_engine::ImageParameter& image_input() const;
  ::ws_engine::ImageParameter* mutable_image_input();
  ::ws_engine::ImageParameter* release_image_input();
  void set_allocated_image_input(::ws_engine::ImageParameter* image_input);

  // required .ws_engine.ImageParameter image_output = 2;
  bool has_image_output() const;
  void clear_image_output();
  static const int kImageOutputFieldNumber = 2;
  const ::ws_engine::ImageParameter& image_output() const;
  ::ws_engine::ImageParameter* mutable_image_output();
  ::ws_engine::ImageParameter* release_image_output();
  void set_allocated_image_output(::ws_engine::ImageParameter* image_output);

  // required string lib_file = 3;
  bool has_lib_file() const;
  void clear_lib_file();
  static const int kLibFileFieldNumber = 3;
  const ::std::string& lib_file() const;
  void set_lib_file(const ::std::string& value);
  void set_lib_file(const char* value);
  void set_lib_file(const char* value, size_t size);
  ::std::string* mutable_lib_file();
  ::std::string* release_lib_file();
  void set_allocated_lib_file(::std::string* lib_file);

  // required string func_name = 4;
  bool has_func_name() const;
  void clear_func_name();
  static const int kFuncNameFieldNumber = 4;
  const ::std::string& func_name() const;
  void set_func_name(const ::std::string& value);
  void set_func_name(const char* value);
  void set_func_name(const char* value, size_t size);
  ::std::string* mutable_func_name();
  ::std::string* release_func_name();
  void set_allocated_func_name(::std::string* func_name);

  // optional string func_args = 5;
  bool has_func_args() const;
  void clear_func_args();
  static const int kFuncArgsFieldNumber = 5;
  const ::std::string& func_args() const;
  void set_func_args(const ::std::string& value);
  void set_func_args(const char* value);
  void set_func_args(const char* value, size_t size);
  ::std::string* mutable_func_args();
  ::std::string* release_func_args();
  void set_allocated_func_args(::std::string* func_args);

  // @@protoc_insertion_point(class_scope:ws_engine.ImageProcessingLayer)
 private:
  inline void set_has_image_input();
  inline void clear_has_image_input();
  inline void set_has_image_output();
  inline void clear_has_image_output();
  inline void set_has_lib_file();
  inline void clear_has_lib_file();
  inline void set_has_func_name();
  inline void clear_has_func_name();
  inline void set_has_func_args();
  inline void clear_has_func_args();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ws_engine::ImageParameter* image_input_;
  ::ws_engine::ImageParameter* image_output_;
  ::google::protobuf::internal::ArenaStringPtr lib_file_;
  ::google::protobuf::internal::ArenaStringPtr func_name_;
  ::google::protobuf::internal::ArenaStringPtr func_args_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static ImageProcessingLayer* default_instance_;
};
// -------------------------------------------------------------------

class IPL_RGB2Gray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ws_engine.IPL_RGB2Gray) */ {
 public:
  IPL_RGB2Gray();
  virtual ~IPL_RGB2Gray();

  IPL_RGB2Gray(const IPL_RGB2Gray& from);

  inline IPL_RGB2Gray& operator=(const IPL_RGB2Gray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPL_RGB2Gray& default_instance();

  void Swap(IPL_RGB2Gray* other);

  // implements Message ----------------------------------------------

  inline IPL_RGB2Gray* New() const { return New(NULL); }

  IPL_RGB2Gray* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPL_RGB2Gray& from);
  void MergeFrom(const IPL_RGB2Gray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IPL_RGB2Gray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ws_engine.ImageProcessingLayer head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::ws_engine::ImageProcessingLayer& head() const;
  ::ws_engine::ImageProcessingLayer* mutable_head();
  ::ws_engine::ImageProcessingLayer* release_head();
  void set_allocated_head(::ws_engine::ImageProcessingLayer* head);

  // optional int32 channel_selected = 2 [default = 0];
  bool has_channel_selected() const;
  void clear_channel_selected();
  static const int kChannelSelectedFieldNumber = 2;
  ::google::protobuf::int32 channel_selected() const;
  void set_channel_selected(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ws_engine.IPL_RGB2Gray)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_channel_selected();
  inline void clear_has_channel_selected();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ws_engine::ImageProcessingLayer* head_;
  ::google::protobuf::int32 channel_selected_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static IPL_RGB2Gray* default_instance_;
};
// -------------------------------------------------------------------

class IPL_BLUR : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ws_engine.IPL_BLUR) */ {
 public:
  IPL_BLUR();
  virtual ~IPL_BLUR();

  IPL_BLUR(const IPL_BLUR& from);

  inline IPL_BLUR& operator=(const IPL_BLUR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPL_BLUR& default_instance();

  void Swap(IPL_BLUR* other);

  // implements Message ----------------------------------------------

  inline IPL_BLUR* New() const { return New(NULL); }

  IPL_BLUR* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPL_BLUR& from);
  void MergeFrom(const IPL_BLUR& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IPL_BLUR* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ws_engine.ImageProcessingLayer head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::ws_engine::ImageProcessingLayer& head() const;
  ::ws_engine::ImageProcessingLayer* mutable_head();
  ::ws_engine::ImageProcessingLayer* release_head();
  void set_allocated_head(::ws_engine::ImageProcessingLayer* head);

  // optional int32 blur_level = 2 [default = 1];
  bool has_blur_level() const;
  void clear_blur_level();
  static const int kBlurLevelFieldNumber = 2;
  ::google::protobuf::int32 blur_level() const;
  void set_blur_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ws_engine.IPL_BLUR)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_blur_level();
  inline void clear_has_blur_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ws_engine::ImageProcessingLayer* head_;
  ::google::protobuf::int32 blur_level_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static IPL_BLUR* default_instance_;
};
// -------------------------------------------------------------------

class IPL_Engine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ws_engine.IPL_Engine) */ {
 public:
  IPL_Engine();
  virtual ~IPL_Engine();

  IPL_Engine(const IPL_Engine& from);

  inline IPL_Engine& operator=(const IPL_Engine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPL_Engine& default_instance();

  void Swap(IPL_Engine* other);

  // implements Message ----------------------------------------------

  inline IPL_Engine* New() const { return New(NULL); }

  IPL_Engine* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPL_Engine& from);
  void MergeFrom(const IPL_Engine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IPL_Engine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ws_engine.IPL_RGB2Gray rgb2gray = 1;
  bool has_rgb2gray() const;
  void clear_rgb2gray();
  static const int kRgb2GrayFieldNumber = 1;
  const ::ws_engine::IPL_RGB2Gray& rgb2gray() const;
  ::ws_engine::IPL_RGB2Gray* mutable_rgb2gray();
  ::ws_engine::IPL_RGB2Gray* release_rgb2gray();
  void set_allocated_rgb2gray(::ws_engine::IPL_RGB2Gray* rgb2gray);

  // optional .ws_engine.IPL_BLUR blur = 2;
  bool has_blur() const;
  void clear_blur();
  static const int kBlurFieldNumber = 2;
  const ::ws_engine::IPL_BLUR& blur() const;
  ::ws_engine::IPL_BLUR* mutable_blur();
  ::ws_engine::IPL_BLUR* release_blur();
  void set_allocated_blur(::ws_engine::IPL_BLUR* blur);

  // @@protoc_insertion_point(class_scope:ws_engine.IPL_Engine)
 private:
  inline void set_has_rgb2gray();
  inline void clear_has_rgb2gray();
  inline void set_has_blur();
  inline void clear_has_blur();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ws_engine::IPL_RGB2Gray* rgb2gray_;
  ::ws_engine::IPL_BLUR* blur_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static IPL_Engine* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemParameter

// optional string debug_file_root = 1 [default = "/tmp"];
inline bool SystemParameter::has_debug_file_root() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemParameter::set_has_debug_file_root() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemParameter::clear_has_debug_file_root() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemParameter::clear_debug_file_root() {
  debug_file_root_.ClearToDefaultNoArena(_default_debug_file_root_);
  clear_has_debug_file_root();
}
inline const ::std::string& SystemParameter::debug_file_root() const {
  // @@protoc_insertion_point(field_get:ws_engine.SystemParameter.debug_file_root)
  return debug_file_root_.GetNoArena(_default_debug_file_root_);
}
inline void SystemParameter::set_debug_file_root(const ::std::string& value) {
  set_has_debug_file_root();
  debug_file_root_.SetNoArena(_default_debug_file_root_, value);
  // @@protoc_insertion_point(field_set:ws_engine.SystemParameter.debug_file_root)
}
inline void SystemParameter::set_debug_file_root(const char* value) {
  set_has_debug_file_root();
  debug_file_root_.SetNoArena(_default_debug_file_root_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.SystemParameter.debug_file_root)
}
inline void SystemParameter::set_debug_file_root(const char* value, size_t size) {
  set_has_debug_file_root();
  debug_file_root_.SetNoArena(_default_debug_file_root_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.SystemParameter.debug_file_root)
}
inline ::std::string* SystemParameter::mutable_debug_file_root() {
  set_has_debug_file_root();
  // @@protoc_insertion_point(field_mutable:ws_engine.SystemParameter.debug_file_root)
  return debug_file_root_.MutableNoArena(_default_debug_file_root_);
}
inline ::std::string* SystemParameter::release_debug_file_root() {
  // @@protoc_insertion_point(field_release:ws_engine.SystemParameter.debug_file_root)
  clear_has_debug_file_root();
  return debug_file_root_.ReleaseNoArena(_default_debug_file_root_);
}
inline void SystemParameter::set_allocated_debug_file_root(::std::string* debug_file_root) {
  if (debug_file_root != NULL) {
    set_has_debug_file_root();
  } else {
    clear_has_debug_file_root();
  }
  debug_file_root_.SetAllocatedNoArena(_default_debug_file_root_, debug_file_root);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.SystemParameter.debug_file_root)
}

// optional string debug_level = 2 [default = "info"];
inline bool SystemParameter::has_debug_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemParameter::set_has_debug_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemParameter::clear_has_debug_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemParameter::clear_debug_level() {
  debug_level_.ClearToDefaultNoArena(_default_debug_level_);
  clear_has_debug_level();
}
inline const ::std::string& SystemParameter::debug_level() const {
  // @@protoc_insertion_point(field_get:ws_engine.SystemParameter.debug_level)
  return debug_level_.GetNoArena(_default_debug_level_);
}
inline void SystemParameter::set_debug_level(const ::std::string& value) {
  set_has_debug_level();
  debug_level_.SetNoArena(_default_debug_level_, value);
  // @@protoc_insertion_point(field_set:ws_engine.SystemParameter.debug_level)
}
inline void SystemParameter::set_debug_level(const char* value) {
  set_has_debug_level();
  debug_level_.SetNoArena(_default_debug_level_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.SystemParameter.debug_level)
}
inline void SystemParameter::set_debug_level(const char* value, size_t size) {
  set_has_debug_level();
  debug_level_.SetNoArena(_default_debug_level_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.SystemParameter.debug_level)
}
inline ::std::string* SystemParameter::mutable_debug_level() {
  set_has_debug_level();
  // @@protoc_insertion_point(field_mutable:ws_engine.SystemParameter.debug_level)
  return debug_level_.MutableNoArena(_default_debug_level_);
}
inline ::std::string* SystemParameter::release_debug_level() {
  // @@protoc_insertion_point(field_release:ws_engine.SystemParameter.debug_level)
  clear_has_debug_level();
  return debug_level_.ReleaseNoArena(_default_debug_level_);
}
inline void SystemParameter::set_allocated_debug_level(::std::string* debug_level) {
  if (debug_level != NULL) {
    set_has_debug_level();
  } else {
    clear_has_debug_level();
  }
  debug_level_.SetAllocatedNoArena(_default_debug_level_, debug_level);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.SystemParameter.debug_level)
}

// -------------------------------------------------------------------

// CameraParameter

// optional .ws_engine.CameraParameter.CameraType type = 1 [default = gige];
inline bool CameraParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ws_engine::CameraParameter_CameraType CameraParameter::type() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.type)
  return static_cast< ::ws_engine::CameraParameter_CameraType >(type_);
}
inline void CameraParameter::set_type(::ws_engine::CameraParameter_CameraType value) {
  assert(::ws_engine::CameraParameter_CameraType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.type)
}

// required string camera_name = 2;
inline bool CameraParameter::has_camera_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraParameter::set_has_camera_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraParameter::clear_has_camera_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraParameter::clear_camera_name() {
  camera_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_name();
}
inline const ::std::string& CameraParameter::camera_name() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_name)
  return camera_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraParameter::set_camera_name(const ::std::string& value) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_name)
}
inline void CameraParameter::set_camera_name(const char* value) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.CameraParameter.camera_name)
}
inline void CameraParameter::set_camera_name(const char* value, size_t size) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.CameraParameter.camera_name)
}
inline ::std::string* CameraParameter::mutable_camera_name() {
  set_has_camera_name();
  // @@protoc_insertion_point(field_mutable:ws_engine.CameraParameter.camera_name)
  return camera_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraParameter::release_camera_name() {
  // @@protoc_insertion_point(field_release:ws_engine.CameraParameter.camera_name)
  clear_has_camera_name();
  return camera_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraParameter::set_allocated_camera_name(::std::string* camera_name) {
  if (camera_name != NULL) {
    set_has_camera_name();
  } else {
    clear_has_camera_name();
  }
  camera_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_name);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.CameraParameter.camera_name)
}

// required int32 camera_id = 3;
inline bool CameraParameter::has_camera_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraParameter::set_has_camera_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraParameter::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraParameter::clear_camera_id() {
  camera_id_ = 0;
  clear_has_camera_id();
}
inline ::google::protobuf::int32 CameraParameter::camera_id() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_id)
  return camera_id_;
}
inline void CameraParameter::set_camera_id(::google::protobuf::int32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_id)
}

// optional int32 camera_fps = 4 [default = 0];
inline bool CameraParameter::has_camera_fps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraParameter::set_has_camera_fps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraParameter::clear_has_camera_fps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraParameter::clear_camera_fps() {
  camera_fps_ = 0;
  clear_has_camera_fps();
}
inline ::google::protobuf::int32 CameraParameter::camera_fps() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_fps)
  return camera_fps_;
}
inline void CameraParameter::set_camera_fps(::google::protobuf::int32 value) {
  set_has_camera_fps();
  camera_fps_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_fps)
}

// optional bool camera_auto_balance = 5 [default = false];
inline bool CameraParameter::has_camera_auto_balance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraParameter::set_has_camera_auto_balance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraParameter::clear_has_camera_auto_balance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraParameter::clear_camera_auto_balance() {
  camera_auto_balance_ = false;
  clear_has_camera_auto_balance();
}
inline bool CameraParameter::camera_auto_balance() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_auto_balance)
  return camera_auto_balance_;
}
inline void CameraParameter::set_camera_auto_balance(bool value) {
  set_has_camera_auto_balance();
  camera_auto_balance_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_auto_balance)
}

// -------------------------------------------------------------------

// PointParameter

// required int32 x = 1;
inline bool PointParameter::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointParameter::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointParameter::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointParameter::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 PointParameter::x() const {
  // @@protoc_insertion_point(field_get:ws_engine.PointParameter.x)
  return x_;
}
inline void PointParameter::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.PointParameter.x)
}

// required int32 y = 2;
inline bool PointParameter::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointParameter::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointParameter::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointParameter::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 PointParameter::y() const {
  // @@protoc_insertion_point(field_get:ws_engine.PointParameter.y)
  return y_;
}
inline void PointParameter::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.PointParameter.y)
}

// -------------------------------------------------------------------

// ROIParameter

// optional bool enable = 1 [default = true];
inline bool ROIParameter::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIParameter::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIParameter::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIParameter::clear_enable() {
  enable_ = true;
  clear_has_enable();
}
inline bool ROIParameter::enable() const {
  // @@protoc_insertion_point(field_get:ws_engine.ROIParameter.enable)
  return enable_;
}
inline void ROIParameter::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.ROIParameter.enable)
}

// required .ws_engine.PointParameter left_up_point = 2;
inline bool ROIParameter::has_left_up_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIParameter::set_has_left_up_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIParameter::clear_has_left_up_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIParameter::clear_left_up_point() {
  if (left_up_point_ != NULL) left_up_point_->::ws_engine::PointParameter::Clear();
  clear_has_left_up_point();
}
inline const ::ws_engine::PointParameter& ROIParameter::left_up_point() const {
  // @@protoc_insertion_point(field_get:ws_engine.ROIParameter.left_up_point)
  return left_up_point_ != NULL ? *left_up_point_ : *default_instance_->left_up_point_;
}
inline ::ws_engine::PointParameter* ROIParameter::mutable_left_up_point() {
  set_has_left_up_point();
  if (left_up_point_ == NULL) {
    left_up_point_ = new ::ws_engine::PointParameter;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.ROIParameter.left_up_point)
  return left_up_point_;
}
inline ::ws_engine::PointParameter* ROIParameter::release_left_up_point() {
  // @@protoc_insertion_point(field_release:ws_engine.ROIParameter.left_up_point)
  clear_has_left_up_point();
  ::ws_engine::PointParameter* temp = left_up_point_;
  left_up_point_ = NULL;
  return temp;
}
inline void ROIParameter::set_allocated_left_up_point(::ws_engine::PointParameter* left_up_point) {
  delete left_up_point_;
  left_up_point_ = left_up_point;
  if (left_up_point) {
    set_has_left_up_point();
  } else {
    clear_has_left_up_point();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ROIParameter.left_up_point)
}

// required .ws_engine.PointParameter right_bottom_point = 3;
inline bool ROIParameter::has_right_bottom_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIParameter::set_has_right_bottom_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIParameter::clear_has_right_bottom_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIParameter::clear_right_bottom_point() {
  if (right_bottom_point_ != NULL) right_bottom_point_->::ws_engine::PointParameter::Clear();
  clear_has_right_bottom_point();
}
inline const ::ws_engine::PointParameter& ROIParameter::right_bottom_point() const {
  // @@protoc_insertion_point(field_get:ws_engine.ROIParameter.right_bottom_point)
  return right_bottom_point_ != NULL ? *right_bottom_point_ : *default_instance_->right_bottom_point_;
}
inline ::ws_engine::PointParameter* ROIParameter::mutable_right_bottom_point() {
  set_has_right_bottom_point();
  if (right_bottom_point_ == NULL) {
    right_bottom_point_ = new ::ws_engine::PointParameter;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.ROIParameter.right_bottom_point)
  return right_bottom_point_;
}
inline ::ws_engine::PointParameter* ROIParameter::release_right_bottom_point() {
  // @@protoc_insertion_point(field_release:ws_engine.ROIParameter.right_bottom_point)
  clear_has_right_bottom_point();
  ::ws_engine::PointParameter* temp = right_bottom_point_;
  right_bottom_point_ = NULL;
  return temp;
}
inline void ROIParameter::set_allocated_right_bottom_point(::ws_engine::PointParameter* right_bottom_point) {
  delete right_bottom_point_;
  right_bottom_point_ = right_bottom_point;
  if (right_bottom_point) {
    set_has_right_bottom_point();
  } else {
    clear_has_right_bottom_point();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ROIParameter.right_bottom_point)
}

// -------------------------------------------------------------------

// ImageParameter

// required int32 width = 1;
inline bool ImageParameter::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageParameter::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageParameter::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 ImageParameter::width() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.width)
  return width_;
}
inline void ImageParameter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.width)
}

// required int32 height = 2;
inline bool ImageParameter::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageParameter::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageParameter::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ImageParameter::height() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.height)
  return height_;
}
inline void ImageParameter::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.height)
}

// optional int32 channel = 3 [default = 1];
inline bool ImageParameter::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageParameter::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageParameter::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageParameter::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
inline ::google::protobuf::int32 ImageParameter::channel() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.channel)
  return channel_;
}
inline void ImageParameter::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.channel)
}

// optional int32 depth = 4 [default = 8];
inline bool ImageParameter::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageParameter::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageParameter::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageParameter::clear_depth() {
  depth_ = 8;
  clear_has_depth();
}
inline ::google::protobuf::int32 ImageParameter::depth() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.depth)
  return depth_;
}
inline void ImageParameter::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.depth)
}

// optional .ws_engine.ROIParameter ROI_zone = 5;
inline bool ImageParameter::has_roi_zone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageParameter::set_has_roi_zone() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageParameter::clear_has_roi_zone() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageParameter::clear_roi_zone() {
  if (roi_zone_ != NULL) roi_zone_->::ws_engine::ROIParameter::Clear();
  clear_has_roi_zone();
}
inline const ::ws_engine::ROIParameter& ImageParameter::roi_zone() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.ROI_zone)
  return roi_zone_ != NULL ? *roi_zone_ : *default_instance_->roi_zone_;
}
inline ::ws_engine::ROIParameter* ImageParameter::mutable_roi_zone() {
  set_has_roi_zone();
  if (roi_zone_ == NULL) {
    roi_zone_ = new ::ws_engine::ROIParameter;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageParameter.ROI_zone)
  return roi_zone_;
}
inline ::ws_engine::ROIParameter* ImageParameter::release_roi_zone() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageParameter.ROI_zone)
  clear_has_roi_zone();
  ::ws_engine::ROIParameter* temp = roi_zone_;
  roi_zone_ = NULL;
  return temp;
}
inline void ImageParameter::set_allocated_roi_zone(::ws_engine::ROIParameter* roi_zone) {
  delete roi_zone_;
  roi_zone_ = roi_zone;
  if (roi_zone) {
    set_has_roi_zone();
  } else {
    clear_has_roi_zone();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageParameter.ROI_zone)
}

// -------------------------------------------------------------------

// ImageProcessingLayer

// required .ws_engine.ImageParameter image_input = 1;
inline bool ImageProcessingLayer::has_image_input() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageProcessingLayer::set_has_image_input() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageProcessingLayer::clear_has_image_input() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageProcessingLayer::clear_image_input() {
  if (image_input_ != NULL) image_input_->::ws_engine::ImageParameter::Clear();
  clear_has_image_input();
}
inline const ::ws_engine::ImageParameter& ImageProcessingLayer::image_input() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.image_input)
  return image_input_ != NULL ? *image_input_ : *default_instance_->image_input_;
}
inline ::ws_engine::ImageParameter* ImageProcessingLayer::mutable_image_input() {
  set_has_image_input();
  if (image_input_ == NULL) {
    image_input_ = new ::ws_engine::ImageParameter;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.image_input)
  return image_input_;
}
inline ::ws_engine::ImageParameter* ImageProcessingLayer::release_image_input() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.image_input)
  clear_has_image_input();
  ::ws_engine::ImageParameter* temp = image_input_;
  image_input_ = NULL;
  return temp;
}
inline void ImageProcessingLayer::set_allocated_image_input(::ws_engine::ImageParameter* image_input) {
  delete image_input_;
  image_input_ = image_input;
  if (image_input) {
    set_has_image_input();
  } else {
    clear_has_image_input();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.image_input)
}

// required .ws_engine.ImageParameter image_output = 2;
inline bool ImageProcessingLayer::has_image_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageProcessingLayer::set_has_image_output() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageProcessingLayer::clear_has_image_output() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageProcessingLayer::clear_image_output() {
  if (image_output_ != NULL) image_output_->::ws_engine::ImageParameter::Clear();
  clear_has_image_output();
}
inline const ::ws_engine::ImageParameter& ImageProcessingLayer::image_output() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.image_output)
  return image_output_ != NULL ? *image_output_ : *default_instance_->image_output_;
}
inline ::ws_engine::ImageParameter* ImageProcessingLayer::mutable_image_output() {
  set_has_image_output();
  if (image_output_ == NULL) {
    image_output_ = new ::ws_engine::ImageParameter;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.image_output)
  return image_output_;
}
inline ::ws_engine::ImageParameter* ImageProcessingLayer::release_image_output() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.image_output)
  clear_has_image_output();
  ::ws_engine::ImageParameter* temp = image_output_;
  image_output_ = NULL;
  return temp;
}
inline void ImageProcessingLayer::set_allocated_image_output(::ws_engine::ImageParameter* image_output) {
  delete image_output_;
  image_output_ = image_output;
  if (image_output) {
    set_has_image_output();
  } else {
    clear_has_image_output();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.image_output)
}

// required string lib_file = 3;
inline bool ImageProcessingLayer::has_lib_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageProcessingLayer::set_has_lib_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageProcessingLayer::clear_has_lib_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageProcessingLayer::clear_lib_file() {
  lib_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lib_file();
}
inline const ::std::string& ImageProcessingLayer::lib_file() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.lib_file)
  return lib_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProcessingLayer::set_lib_file(const ::std::string& value) {
  set_has_lib_file();
  lib_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageProcessingLayer.lib_file)
}
inline void ImageProcessingLayer::set_lib_file(const char* value) {
  set_has_lib_file();
  lib_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.ImageProcessingLayer.lib_file)
}
inline void ImageProcessingLayer::set_lib_file(const char* value, size_t size) {
  set_has_lib_file();
  lib_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.ImageProcessingLayer.lib_file)
}
inline ::std::string* ImageProcessingLayer::mutable_lib_file() {
  set_has_lib_file();
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.lib_file)
  return lib_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageProcessingLayer::release_lib_file() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.lib_file)
  clear_has_lib_file();
  return lib_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProcessingLayer::set_allocated_lib_file(::std::string* lib_file) {
  if (lib_file != NULL) {
    set_has_lib_file();
  } else {
    clear_has_lib_file();
  }
  lib_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lib_file);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.lib_file)
}

// required string func_name = 4;
inline bool ImageProcessingLayer::has_func_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageProcessingLayer::set_has_func_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageProcessingLayer::clear_has_func_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageProcessingLayer::clear_func_name() {
  func_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_func_name();
}
inline const ::std::string& ImageProcessingLayer::func_name() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.func_name)
  return func_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProcessingLayer::set_func_name(const ::std::string& value) {
  set_has_func_name();
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageProcessingLayer.func_name)
}
inline void ImageProcessingLayer::set_func_name(const char* value) {
  set_has_func_name();
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.ImageProcessingLayer.func_name)
}
inline void ImageProcessingLayer::set_func_name(const char* value, size_t size) {
  set_has_func_name();
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.ImageProcessingLayer.func_name)
}
inline ::std::string* ImageProcessingLayer::mutable_func_name() {
  set_has_func_name();
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.func_name)
  return func_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageProcessingLayer::release_func_name() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.func_name)
  clear_has_func_name();
  return func_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProcessingLayer::set_allocated_func_name(::std::string* func_name) {
  if (func_name != NULL) {
    set_has_func_name();
  } else {
    clear_has_func_name();
  }
  func_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func_name);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.func_name)
}

// optional string func_args = 5;
inline bool ImageProcessingLayer::has_func_args() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageProcessingLayer::set_has_func_args() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageProcessingLayer::clear_has_func_args() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageProcessingLayer::clear_func_args() {
  func_args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_func_args();
}
inline const ::std::string& ImageProcessingLayer::func_args() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.func_args)
  return func_args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProcessingLayer::set_func_args(const ::std::string& value) {
  set_has_func_args();
  func_args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageProcessingLayer.func_args)
}
inline void ImageProcessingLayer::set_func_args(const char* value) {
  set_has_func_args();
  func_args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.ImageProcessingLayer.func_args)
}
inline void ImageProcessingLayer::set_func_args(const char* value, size_t size) {
  set_has_func_args();
  func_args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.ImageProcessingLayer.func_args)
}
inline ::std::string* ImageProcessingLayer::mutable_func_args() {
  set_has_func_args();
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.func_args)
  return func_args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageProcessingLayer::release_func_args() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.func_args)
  clear_has_func_args();
  return func_args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProcessingLayer::set_allocated_func_args(::std::string* func_args) {
  if (func_args != NULL) {
    set_has_func_args();
  } else {
    clear_has_func_args();
  }
  func_args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func_args);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.func_args)
}

// -------------------------------------------------------------------

// IPL_RGB2Gray

// required .ws_engine.ImageProcessingLayer head = 1;
inline bool IPL_RGB2Gray::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPL_RGB2Gray::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPL_RGB2Gray::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPL_RGB2Gray::clear_head() {
  if (head_ != NULL) head_->::ws_engine::ImageProcessingLayer::Clear();
  clear_has_head();
}
inline const ::ws_engine::ImageProcessingLayer& IPL_RGB2Gray::head() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_RGB2Gray.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ws_engine::ImageProcessingLayer* IPL_RGB2Gray::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::ws_engine::ImageProcessingLayer;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_RGB2Gray.head)
  return head_;
}
inline ::ws_engine::ImageProcessingLayer* IPL_RGB2Gray::release_head() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_RGB2Gray.head)
  clear_has_head();
  ::ws_engine::ImageProcessingLayer* temp = head_;
  head_ = NULL;
  return temp;
}
inline void IPL_RGB2Gray::set_allocated_head(::ws_engine::ImageProcessingLayer* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_RGB2Gray.head)
}

// optional int32 channel_selected = 2 [default = 0];
inline bool IPL_RGB2Gray::has_channel_selected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPL_RGB2Gray::set_has_channel_selected() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPL_RGB2Gray::clear_has_channel_selected() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPL_RGB2Gray::clear_channel_selected() {
  channel_selected_ = 0;
  clear_has_channel_selected();
}
inline ::google::protobuf::int32 IPL_RGB2Gray::channel_selected() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_RGB2Gray.channel_selected)
  return channel_selected_;
}
inline void IPL_RGB2Gray::set_channel_selected(::google::protobuf::int32 value) {
  set_has_channel_selected();
  channel_selected_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.IPL_RGB2Gray.channel_selected)
}

// -------------------------------------------------------------------

// IPL_BLUR

// required .ws_engine.ImageProcessingLayer head = 1;
inline bool IPL_BLUR::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPL_BLUR::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPL_BLUR::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPL_BLUR::clear_head() {
  if (head_ != NULL) head_->::ws_engine::ImageProcessingLayer::Clear();
  clear_has_head();
}
inline const ::ws_engine::ImageProcessingLayer& IPL_BLUR::head() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_BLUR.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ws_engine::ImageProcessingLayer* IPL_BLUR::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::ws_engine::ImageProcessingLayer;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_BLUR.head)
  return head_;
}
inline ::ws_engine::ImageProcessingLayer* IPL_BLUR::release_head() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_BLUR.head)
  clear_has_head();
  ::ws_engine::ImageProcessingLayer* temp = head_;
  head_ = NULL;
  return temp;
}
inline void IPL_BLUR::set_allocated_head(::ws_engine::ImageProcessingLayer* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_BLUR.head)
}

// optional int32 blur_level = 2 [default = 1];
inline bool IPL_BLUR::has_blur_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPL_BLUR::set_has_blur_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPL_BLUR::clear_has_blur_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPL_BLUR::clear_blur_level() {
  blur_level_ = 1;
  clear_has_blur_level();
}
inline ::google::protobuf::int32 IPL_BLUR::blur_level() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_BLUR.blur_level)
  return blur_level_;
}
inline void IPL_BLUR::set_blur_level(::google::protobuf::int32 value) {
  set_has_blur_level();
  blur_level_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.IPL_BLUR.blur_level)
}

// -------------------------------------------------------------------

// IPL_Engine

// optional .ws_engine.IPL_RGB2Gray rgb2gray = 1;
inline bool IPL_Engine::has_rgb2gray() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPL_Engine::set_has_rgb2gray() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPL_Engine::clear_has_rgb2gray() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPL_Engine::clear_rgb2gray() {
  if (rgb2gray_ != NULL) rgb2gray_->::ws_engine::IPL_RGB2Gray::Clear();
  clear_has_rgb2gray();
}
inline const ::ws_engine::IPL_RGB2Gray& IPL_Engine::rgb2gray() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_Engine.rgb2gray)
  return rgb2gray_ != NULL ? *rgb2gray_ : *default_instance_->rgb2gray_;
}
inline ::ws_engine::IPL_RGB2Gray* IPL_Engine::mutable_rgb2gray() {
  set_has_rgb2gray();
  if (rgb2gray_ == NULL) {
    rgb2gray_ = new ::ws_engine::IPL_RGB2Gray;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_Engine.rgb2gray)
  return rgb2gray_;
}
inline ::ws_engine::IPL_RGB2Gray* IPL_Engine::release_rgb2gray() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_Engine.rgb2gray)
  clear_has_rgb2gray();
  ::ws_engine::IPL_RGB2Gray* temp = rgb2gray_;
  rgb2gray_ = NULL;
  return temp;
}
inline void IPL_Engine::set_allocated_rgb2gray(::ws_engine::IPL_RGB2Gray* rgb2gray) {
  delete rgb2gray_;
  rgb2gray_ = rgb2gray;
  if (rgb2gray) {
    set_has_rgb2gray();
  } else {
    clear_has_rgb2gray();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_Engine.rgb2gray)
}

// optional .ws_engine.IPL_BLUR blur = 2;
inline bool IPL_Engine::has_blur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPL_Engine::set_has_blur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPL_Engine::clear_has_blur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPL_Engine::clear_blur() {
  if (blur_ != NULL) blur_->::ws_engine::IPL_BLUR::Clear();
  clear_has_blur();
}
inline const ::ws_engine::IPL_BLUR& IPL_Engine::blur() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_Engine.blur)
  return blur_ != NULL ? *blur_ : *default_instance_->blur_;
}
inline ::ws_engine::IPL_BLUR* IPL_Engine::mutable_blur() {
  set_has_blur();
  if (blur_ == NULL) {
    blur_ = new ::ws_engine::IPL_BLUR;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_Engine.blur)
  return blur_;
}
inline ::ws_engine::IPL_BLUR* IPL_Engine::release_blur() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_Engine.blur)
  clear_has_blur();
  ::ws_engine::IPL_BLUR* temp = blur_;
  blur_ = NULL;
  return temp;
}
inline void IPL_Engine::set_allocated_blur(::ws_engine::IPL_BLUR* blur) {
  delete blur_;
  blur_ = blur;
  if (blur) {
    set_has_blur();
  } else {
    clear_has_blur();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_Engine.blur)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ws_engine

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ws_engine::CameraParameter_CameraType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ws_engine::CameraParameter_CameraType>() {
  return ::ws_engine::CameraParameter_CameraType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
