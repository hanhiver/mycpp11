// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ws_engine {

namespace {

const ::google::protobuf::Descriptor* SystemParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CameraParameter_CameraType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROIParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROIParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageProcessingLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageProcessingLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPL_RGB2Gray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPL_RGB2Gray_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPL_BLUR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPL_BLUR_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPL_Engine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPL_Engine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  SystemParameter_descriptor_ = file->message_type(0);
  static const int SystemParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParameter, debug_file_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParameter, debug_level_),
  };
  SystemParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SystemParameter_descriptor_,
      SystemParameter::default_instance_,
      SystemParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(SystemParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParameter, _internal_metadata_),
      -1);
  CameraParameter_descriptor_ = file->message_type(1);
  static const int CameraParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParameter, camera_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParameter, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParameter, camera_fps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParameter, camera_auto_balance_),
  };
  CameraParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraParameter_descriptor_,
      CameraParameter::default_instance_,
      CameraParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(CameraParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParameter, _internal_metadata_),
      -1);
  CameraParameter_CameraType_descriptor_ = CameraParameter_descriptor_->enum_type(0);
  PointParameter_descriptor_ = file->message_type(2);
  static const int PointParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointParameter, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointParameter, y_),
  };
  PointParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointParameter_descriptor_,
      PointParameter::default_instance_,
      PointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(PointParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointParameter, _internal_metadata_),
      -1);
  ROIParameter_descriptor_ = file->message_type(3);
  static const int ROIParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIParameter, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIParameter, left_up_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIParameter, right_bottom_point_),
  };
  ROIParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ROIParameter_descriptor_,
      ROIParameter::default_instance_,
      ROIParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ROIParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIParameter, _internal_metadata_),
      -1);
  ImageParameter_descriptor_ = file->message_type(4);
  static const int ImageParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageParameter, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageParameter, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageParameter, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageParameter, roi_zone_),
  };
  ImageParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageParameter_descriptor_,
      ImageParameter::default_instance_,
      ImageParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImageParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageParameter, _internal_metadata_),
      -1);
  ImageProcessingLayer_descriptor_ = file->message_type(5);
  static const int ImageProcessingLayer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessingLayer, image_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessingLayer, image_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessingLayer, lib_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessingLayer, func_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessingLayer, func_args_),
  };
  ImageProcessingLayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageProcessingLayer_descriptor_,
      ImageProcessingLayer::default_instance_,
      ImageProcessingLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessingLayer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImageProcessingLayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessingLayer, _internal_metadata_),
      -1);
  IPL_RGB2Gray_descriptor_ = file->message_type(6);
  static const int IPL_RGB2Gray_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_RGB2Gray, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_RGB2Gray, channel_selected_),
  };
  IPL_RGB2Gray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IPL_RGB2Gray_descriptor_,
      IPL_RGB2Gray::default_instance_,
      IPL_RGB2Gray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_RGB2Gray, _has_bits_[0]),
      -1,
      -1,
      sizeof(IPL_RGB2Gray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_RGB2Gray, _internal_metadata_),
      -1);
  IPL_BLUR_descriptor_ = file->message_type(7);
  static const int IPL_BLUR_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_BLUR, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_BLUR, blur_level_),
  };
  IPL_BLUR_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IPL_BLUR_descriptor_,
      IPL_BLUR::default_instance_,
      IPL_BLUR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_BLUR, _has_bits_[0]),
      -1,
      -1,
      sizeof(IPL_BLUR),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_BLUR, _internal_metadata_),
      -1);
  IPL_Engine_descriptor_ = file->message_type(8);
  static const int IPL_Engine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_Engine, rgb2gray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_Engine, blur_),
  };
  IPL_Engine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IPL_Engine_descriptor_,
      IPL_Engine::default_instance_,
      IPL_Engine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_Engine, _has_bits_[0]),
      -1,
      -1,
      sizeof(IPL_Engine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPL_Engine, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SystemParameter_descriptor_, &SystemParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraParameter_descriptor_, &CameraParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointParameter_descriptor_, &PointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ROIParameter_descriptor_, &ROIParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageParameter_descriptor_, &ImageParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageProcessingLayer_descriptor_, &ImageProcessingLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IPL_RGB2Gray_descriptor_, &IPL_RGB2Gray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IPL_BLUR_descriptor_, &IPL_BLUR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IPL_Engine_descriptor_, &IPL_Engine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete SystemParameter::default_instance_;
  delete SystemParameter_reflection_;
  delete SystemParameter::_default_debug_file_root_;
  delete SystemParameter::_default_debug_level_;
  delete CameraParameter::default_instance_;
  delete CameraParameter_reflection_;
  delete PointParameter::default_instance_;
  delete PointParameter_reflection_;
  delete ROIParameter::default_instance_;
  delete ROIParameter_reflection_;
  delete ImageParameter::default_instance_;
  delete ImageParameter_reflection_;
  delete ImageProcessingLayer::default_instance_;
  delete ImageProcessingLayer_reflection_;
  delete IPL_RGB2Gray::default_instance_;
  delete IPL_RGB2Gray_reflection_;
  delete IPL_BLUR::default_instance_;
  delete IPL_BLUR_reflection_;
  delete IPL_Engine::default_instance_;
  delete IPL_Engine_reflection_;
}

void protobuf_AddDesc_config_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\tws_engine\"K\n\017SystemParam"
    "eter\022\035\n\017debug_file_root\030\001 \001(\t:\004/tmp\022\031\n\013d"
    "ebug_level\030\002 \001(\t:\004info\"\340\001\n\017CameraParamet"
    "er\0229\n\004type\030\001 \001(\0162%.ws_engine.CameraParam"
    "eter.CameraType:\004gige\022\023\n\013camera_name\030\002 \002"
    "(\t\022\021\n\tcamera_id\030\003 \002(\005\022\025\n\ncamera_fps\030\004 \001("
    "\005:\0010\022\"\n\023camera_auto_balance\030\005 \001(\010:\005false"
    "\"/\n\nCameraType\022\010\n\004gige\020\000\022\007\n\003usb\020\001\022\016\n\nvid"
    "eo_file\020\002\"&\n\016PointParameter\022\t\n\001x\030\001 \002(\005\022\t"
    "\n\001y\030\002 \002(\005\"\215\001\n\014ROIParameter\022\024\n\006enable\030\001 \001"
    "(\010:\004true\0220\n\rleft_up_point\030\002 \002(\0132\031.ws_eng"
    "ine.PointParameter\0225\n\022right_bottom_point"
    "\030\003 \002(\0132\031.ws_engine.PointParameter\"\200\001\n\016Im"
    "ageParameter\022\r\n\005width\030\001 \002(\005\022\016\n\006height\030\002 "
    "\002(\005\022\022\n\007channel\030\003 \001(\005:\0011\022\020\n\005depth\030\004 \001(\005:\001"
    "8\022)\n\010ROI_zone\030\005 \001(\0132\027.ws_engine.ROIParam"
    "eter\"\257\001\n\024ImageProcessingLayer\022.\n\013image_i"
    "nput\030\001 \002(\0132\031.ws_engine.ImageParameter\022/\n"
    "\014image_output\030\002 \002(\0132\031.ws_engine.ImagePar"
    "ameter\022\020\n\010lib_file\030\003 \002(\t\022\021\n\tfunc_name\030\004 "
    "\002(\t\022\021\n\tfunc_args\030\005 \001(\t\"Z\n\014IPL_RGB2Gray\022-"
    "\n\004head\030\001 \002(\0132\037.ws_engine.ImageProcessing"
    "Layer\022\033\n\020channel_selected\030\002 \001(\005:\0010\"P\n\010IP"
    "L_BLUR\022-\n\004head\030\001 \002(\0132\037.ws_engine.ImagePr"
    "ocessingLayer\022\025\n\nblur_level\030\002 \001(\005:\0011\"Z\n\n"
    "IPL_Engine\022)\n\010rgb2gray\030\001 \001(\0132\027.ws_engine"
    ".IPL_RGB2Gray\022!\n\004blur\030\002 \001(\0132\023.ws_engine."
    "IPL_BLUR", 1088);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  SystemParameter::_default_debug_file_root_ =
      new ::std::string("/tmp", 4);
  SystemParameter::_default_debug_level_ =
      new ::std::string("info", 4);
  SystemParameter::default_instance_ = new SystemParameter();
  CameraParameter::default_instance_ = new CameraParameter();
  PointParameter::default_instance_ = new PointParameter();
  ROIParameter::default_instance_ = new ROIParameter();
  ImageParameter::default_instance_ = new ImageParameter();
  ImageProcessingLayer::default_instance_ = new ImageProcessingLayer();
  IPL_RGB2Gray::default_instance_ = new IPL_RGB2Gray();
  IPL_BLUR::default_instance_ = new IPL_BLUR();
  IPL_Engine::default_instance_ = new IPL_Engine();
  SystemParameter::default_instance_->InitAsDefaultInstance();
  CameraParameter::default_instance_->InitAsDefaultInstance();
  PointParameter::default_instance_->InitAsDefaultInstance();
  ROIParameter::default_instance_->InitAsDefaultInstance();
  ImageParameter::default_instance_->InitAsDefaultInstance();
  ImageProcessingLayer::default_instance_->InitAsDefaultInstance();
  IPL_RGB2Gray::default_instance_->InitAsDefaultInstance();
  IPL_BLUR::default_instance_->InitAsDefaultInstance();
  IPL_Engine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;

// ===================================================================

::std::string* SystemParameter::_default_debug_file_root_ = NULL;
::std::string* SystemParameter::_default_debug_level_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemParameter::kDebugFileRootFieldNumber;
const int SystemParameter::kDebugLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemParameter::SystemParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.SystemParameter)
}

void SystemParameter::InitAsDefaultInstance() {
}

SystemParameter::SystemParameter(const SystemParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_engine.SystemParameter)
}

void SystemParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  debug_file_root_.UnsafeSetDefault(_default_debug_file_root_);
  debug_level_.UnsafeSetDefault(_default_debug_level_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemParameter::~SystemParameter() {
  // @@protoc_insertion_point(destructor:ws_engine.SystemParameter)
  SharedDtor();
}

void SystemParameter::SharedDtor() {
  debug_file_root_.DestroyNoArena(_default_debug_file_root_);
  debug_level_.DestroyNoArena(_default_debug_level_);
  if (this != default_instance_) {
  }
}

void SystemParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemParameter_descriptor_;
}

const SystemParameter& SystemParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

SystemParameter* SystemParameter::default_instance_ = NULL;

SystemParameter* SystemParameter::New(::google::protobuf::Arena* arena) const {
  SystemParameter* n = new SystemParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.SystemParameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_debug_file_root()) {
      debug_file_root_.ClearToDefaultNoArena(_default_debug_file_root_);
    }
    if (has_debug_level()) {
      debug_level_.ClearToDefaultNoArena(_default_debug_level_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SystemParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_engine.SystemParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string debug_file_root = 1 [default = "/tmp"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_file_root()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_file_root().data(), this->debug_file_root().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ws_engine.SystemParameter.debug_file_root");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_debug_level;
        break;
      }

      // optional string debug_level = 2 [default = "info"];
      case 2: {
        if (tag == 18) {
         parse_debug_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_level().data(), this->debug_level().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ws_engine.SystemParameter.debug_level");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_engine.SystemParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_engine.SystemParameter)
  return false;
#undef DO_
}

void SystemParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_engine.SystemParameter)
  // optional string debug_file_root = 1 [default = "/tmp"];
  if (has_debug_file_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_file_root().data(), this->debug_file_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.SystemParameter.debug_file_root");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->debug_file_root(), output);
  }

  // optional string debug_level = 2 [default = "info"];
  if (has_debug_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_level().data(), this->debug_level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.SystemParameter.debug_level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->debug_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ws_engine.SystemParameter)
}

::google::protobuf::uint8* SystemParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.SystemParameter)
  // optional string debug_file_root = 1 [default = "/tmp"];
  if (has_debug_file_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_file_root().data(), this->debug_file_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.SystemParameter.debug_file_root");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->debug_file_root(), target);
  }

  // optional string debug_level = 2 [default = "info"];
  if (has_debug_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_level().data(), this->debug_level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.SystemParameter.debug_level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->debug_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.SystemParameter)
  return target;
}

int SystemParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.SystemParameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string debug_file_root = 1 [default = "/tmp"];
    if (has_debug_file_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_file_root());
    }

    // optional string debug_level = 2 [default = "info"];
    if (has_debug_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_level());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.SystemParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SystemParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.SystemParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.SystemParameter)
    MergeFrom(*source);
  }
}

void SystemParameter::MergeFrom(const SystemParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.SystemParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debug_file_root()) {
      set_has_debug_file_root();
      debug_file_root_.AssignWithDefault(_default_debug_file_root_, from.debug_file_root_);
    }
    if (from.has_debug_level()) {
      set_has_debug_level();
      debug_level_.AssignWithDefault(_default_debug_level_, from.debug_level_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SystemParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.SystemParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemParameter::CopyFrom(const SystemParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.SystemParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemParameter::IsInitialized() const {

  return true;
}

void SystemParameter::Swap(SystemParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemParameter::InternalSwap(SystemParameter* other) {
  debug_file_root_.Swap(&other->debug_file_root_);
  debug_level_.Swap(&other->debug_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemParameter_descriptor_;
  metadata.reflection = SystemParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemParameter

// optional string debug_file_root = 1 [default = "/tmp"];
bool SystemParameter::has_debug_file_root() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemParameter::set_has_debug_file_root() {
  _has_bits_[0] |= 0x00000001u;
}
void SystemParameter::clear_has_debug_file_root() {
  _has_bits_[0] &= ~0x00000001u;
}
void SystemParameter::clear_debug_file_root() {
  debug_file_root_.ClearToDefaultNoArena(_default_debug_file_root_);
  clear_has_debug_file_root();
}
 const ::std::string& SystemParameter::debug_file_root() const {
  // @@protoc_insertion_point(field_get:ws_engine.SystemParameter.debug_file_root)
  return debug_file_root_.GetNoArena(_default_debug_file_root_);
}
 void SystemParameter::set_debug_file_root(const ::std::string& value) {
  set_has_debug_file_root();
  debug_file_root_.SetNoArena(_default_debug_file_root_, value);
  // @@protoc_insertion_point(field_set:ws_engine.SystemParameter.debug_file_root)
}
 void SystemParameter::set_debug_file_root(const char* value) {
  set_has_debug_file_root();
  debug_file_root_.SetNoArena(_default_debug_file_root_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.SystemParameter.debug_file_root)
}
 void SystemParameter::set_debug_file_root(const char* value, size_t size) {
  set_has_debug_file_root();
  debug_file_root_.SetNoArena(_default_debug_file_root_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.SystemParameter.debug_file_root)
}
 ::std::string* SystemParameter::mutable_debug_file_root() {
  set_has_debug_file_root();
  // @@protoc_insertion_point(field_mutable:ws_engine.SystemParameter.debug_file_root)
  return debug_file_root_.MutableNoArena(_default_debug_file_root_);
}
 ::std::string* SystemParameter::release_debug_file_root() {
  // @@protoc_insertion_point(field_release:ws_engine.SystemParameter.debug_file_root)
  clear_has_debug_file_root();
  return debug_file_root_.ReleaseNoArena(_default_debug_file_root_);
}
 void SystemParameter::set_allocated_debug_file_root(::std::string* debug_file_root) {
  if (debug_file_root != NULL) {
    set_has_debug_file_root();
  } else {
    clear_has_debug_file_root();
  }
  debug_file_root_.SetAllocatedNoArena(_default_debug_file_root_, debug_file_root);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.SystemParameter.debug_file_root)
}

// optional string debug_level = 2 [default = "info"];
bool SystemParameter::has_debug_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemParameter::set_has_debug_level() {
  _has_bits_[0] |= 0x00000002u;
}
void SystemParameter::clear_has_debug_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void SystemParameter::clear_debug_level() {
  debug_level_.ClearToDefaultNoArena(_default_debug_level_);
  clear_has_debug_level();
}
 const ::std::string& SystemParameter::debug_level() const {
  // @@protoc_insertion_point(field_get:ws_engine.SystemParameter.debug_level)
  return debug_level_.GetNoArena(_default_debug_level_);
}
 void SystemParameter::set_debug_level(const ::std::string& value) {
  set_has_debug_level();
  debug_level_.SetNoArena(_default_debug_level_, value);
  // @@protoc_insertion_point(field_set:ws_engine.SystemParameter.debug_level)
}
 void SystemParameter::set_debug_level(const char* value) {
  set_has_debug_level();
  debug_level_.SetNoArena(_default_debug_level_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.SystemParameter.debug_level)
}
 void SystemParameter::set_debug_level(const char* value, size_t size) {
  set_has_debug_level();
  debug_level_.SetNoArena(_default_debug_level_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.SystemParameter.debug_level)
}
 ::std::string* SystemParameter::mutable_debug_level() {
  set_has_debug_level();
  // @@protoc_insertion_point(field_mutable:ws_engine.SystemParameter.debug_level)
  return debug_level_.MutableNoArena(_default_debug_level_);
}
 ::std::string* SystemParameter::release_debug_level() {
  // @@protoc_insertion_point(field_release:ws_engine.SystemParameter.debug_level)
  clear_has_debug_level();
  return debug_level_.ReleaseNoArena(_default_debug_level_);
}
 void SystemParameter::set_allocated_debug_level(::std::string* debug_level) {
  if (debug_level != NULL) {
    set_has_debug_level();
  } else {
    clear_has_debug_level();
  }
  debug_level_.SetAllocatedNoArena(_default_debug_level_, debug_level);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.SystemParameter.debug_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CameraParameter_CameraType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraParameter_CameraType_descriptor_;
}
bool CameraParameter_CameraType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraParameter_CameraType CameraParameter::gige;
const CameraParameter_CameraType CameraParameter::usb;
const CameraParameter_CameraType CameraParameter::video_file;
const CameraParameter_CameraType CameraParameter::CameraType_MIN;
const CameraParameter_CameraType CameraParameter::CameraType_MAX;
const int CameraParameter::CameraType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraParameter::kTypeFieldNumber;
const int CameraParameter::kCameraNameFieldNumber;
const int CameraParameter::kCameraIdFieldNumber;
const int CameraParameter::kCameraFpsFieldNumber;
const int CameraParameter::kCameraAutoBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraParameter::CameraParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.CameraParameter)
}

void CameraParameter::InitAsDefaultInstance() {
}

CameraParameter::CameraParameter(const CameraParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_engine.CameraParameter)
}

void CameraParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  camera_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_id_ = 0;
  camera_fps_ = 0;
  camera_auto_balance_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraParameter::~CameraParameter() {
  // @@protoc_insertion_point(destructor:ws_engine.CameraParameter)
  SharedDtor();
}

void CameraParameter::SharedDtor() {
  camera_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CameraParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraParameter_descriptor_;
}

const CameraParameter& CameraParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

CameraParameter* CameraParameter::default_instance_ = NULL;

CameraParameter* CameraParameter::New(::google::protobuf::Arena* arena) const {
  CameraParameter* n = new CameraParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.CameraParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CameraParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CameraParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(type_, camera_auto_balance_);
    if (has_camera_name()) {
      camera_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CameraParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_engine.CameraParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ws_engine.CameraParameter.CameraType type = 1 [default = gige];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ws_engine::CameraParameter_CameraType_IsValid(value)) {
            set_type(static_cast< ::ws_engine::CameraParameter_CameraType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_camera_name;
        break;
      }

      // required string camera_name = 2;
      case 2: {
        if (tag == 18) {
         parse_camera_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_name().data(), this->camera_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ws_engine.CameraParameter.camera_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_camera_id;
        break;
      }

      // required int32 camera_id = 3;
      case 3: {
        if (tag == 24) {
         parse_camera_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_camera_fps;
        break;
      }

      // optional int32 camera_fps = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_camera_fps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_fps_)));
          set_has_camera_fps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_camera_auto_balance;
        break;
      }

      // optional bool camera_auto_balance = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_camera_auto_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &camera_auto_balance_)));
          set_has_camera_auto_balance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_engine.CameraParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_engine.CameraParameter)
  return false;
#undef DO_
}

void CameraParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_engine.CameraParameter)
  // optional .ws_engine.CameraParameter.CameraType type = 1 [default = gige];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string camera_name = 2;
  if (has_camera_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), this->camera_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.CameraParameter.camera_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->camera_name(), output);
  }

  // required int32 camera_id = 3;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->camera_id(), output);
  }

  // optional int32 camera_fps = 4 [default = 0];
  if (has_camera_fps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->camera_fps(), output);
  }

  // optional bool camera_auto_balance = 5 [default = false];
  if (has_camera_auto_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->camera_auto_balance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ws_engine.CameraParameter)
}

::google::protobuf::uint8* CameraParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.CameraParameter)
  // optional .ws_engine.CameraParameter.CameraType type = 1 [default = gige];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string camera_name = 2;
  if (has_camera_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), this->camera_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.CameraParameter.camera_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->camera_name(), target);
  }

  // required int32 camera_id = 3;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->camera_id(), target);
  }

  // optional int32 camera_fps = 4 [default = 0];
  if (has_camera_fps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->camera_fps(), target);
  }

  // optional bool camera_auto_balance = 5 [default = false];
  if (has_camera_auto_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->camera_auto_balance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.CameraParameter)
  return target;
}

int CameraParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ws_engine.CameraParameter)
  int total_size = 0;

  if (has_camera_name()) {
    // required string camera_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_name());
  }

  if (has_camera_id()) {
    // required int32 camera_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camera_id());
  }

  return total_size;
}
int CameraParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.CameraParameter)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required string camera_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_name());

    // required int32 camera_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camera_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 25u) {
    // optional .ws_engine.CameraParameter.CameraType type = 1 [default = gige];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 camera_fps = 4 [default = 0];
    if (has_camera_fps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera_fps());
    }

    // optional bool camera_auto_balance = 5 [default = false];
    if (has_camera_auto_balance()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.CameraParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.CameraParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.CameraParameter)
    MergeFrom(*source);
  }
}

void CameraParameter::MergeFrom(const CameraParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.CameraParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_camera_name()) {
      set_has_camera_name();
      camera_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
    }
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_camera_fps()) {
      set_camera_fps(from.camera_fps());
    }
    if (from.has_camera_auto_balance()) {
      set_camera_auto_balance(from.camera_auto_balance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CameraParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.CameraParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParameter::CopyFrom(const CameraParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.CameraParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void CameraParameter::Swap(CameraParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraParameter::InternalSwap(CameraParameter* other) {
  std::swap(type_, other->type_);
  camera_name_.Swap(&other->camera_name_);
  std::swap(camera_id_, other->camera_id_);
  std::swap(camera_fps_, other->camera_fps_);
  std::swap(camera_auto_balance_, other->camera_auto_balance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraParameter_descriptor_;
  metadata.reflection = CameraParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraParameter

// optional .ws_engine.CameraParameter.CameraType type = 1 [default = gige];
bool CameraParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::ws_engine::CameraParameter_CameraType CameraParameter::type() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.type)
  return static_cast< ::ws_engine::CameraParameter_CameraType >(type_);
}
 void CameraParameter::set_type(::ws_engine::CameraParameter_CameraType value) {
  assert(::ws_engine::CameraParameter_CameraType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.type)
}

// required string camera_name = 2;
bool CameraParameter::has_camera_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraParameter::set_has_camera_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraParameter::clear_has_camera_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraParameter::clear_camera_name() {
  camera_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_name();
}
 const ::std::string& CameraParameter::camera_name() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_name)
  return camera_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraParameter::set_camera_name(const ::std::string& value) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_name)
}
 void CameraParameter::set_camera_name(const char* value) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.CameraParameter.camera_name)
}
 void CameraParameter::set_camera_name(const char* value, size_t size) {
  set_has_camera_name();
  camera_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.CameraParameter.camera_name)
}
 ::std::string* CameraParameter::mutable_camera_name() {
  set_has_camera_name();
  // @@protoc_insertion_point(field_mutable:ws_engine.CameraParameter.camera_name)
  return camera_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraParameter::release_camera_name() {
  // @@protoc_insertion_point(field_release:ws_engine.CameraParameter.camera_name)
  clear_has_camera_name();
  return camera_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraParameter::set_allocated_camera_name(::std::string* camera_name) {
  if (camera_name != NULL) {
    set_has_camera_name();
  } else {
    clear_has_camera_name();
  }
  camera_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_name);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.CameraParameter.camera_name)
}

// required int32 camera_id = 3;
bool CameraParameter::has_camera_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraParameter::set_has_camera_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraParameter::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraParameter::clear_camera_id() {
  camera_id_ = 0;
  clear_has_camera_id();
}
 ::google::protobuf::int32 CameraParameter::camera_id() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_id)
  return camera_id_;
}
 void CameraParameter::set_camera_id(::google::protobuf::int32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_id)
}

// optional int32 camera_fps = 4 [default = 0];
bool CameraParameter::has_camera_fps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CameraParameter::set_has_camera_fps() {
  _has_bits_[0] |= 0x00000008u;
}
void CameraParameter::clear_has_camera_fps() {
  _has_bits_[0] &= ~0x00000008u;
}
void CameraParameter::clear_camera_fps() {
  camera_fps_ = 0;
  clear_has_camera_fps();
}
 ::google::protobuf::int32 CameraParameter::camera_fps() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_fps)
  return camera_fps_;
}
 void CameraParameter::set_camera_fps(::google::protobuf::int32 value) {
  set_has_camera_fps();
  camera_fps_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_fps)
}

// optional bool camera_auto_balance = 5 [default = false];
bool CameraParameter::has_camera_auto_balance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CameraParameter::set_has_camera_auto_balance() {
  _has_bits_[0] |= 0x00000010u;
}
void CameraParameter::clear_has_camera_auto_balance() {
  _has_bits_[0] &= ~0x00000010u;
}
void CameraParameter::clear_camera_auto_balance() {
  camera_auto_balance_ = false;
  clear_has_camera_auto_balance();
}
 bool CameraParameter::camera_auto_balance() const {
  // @@protoc_insertion_point(field_get:ws_engine.CameraParameter.camera_auto_balance)
  return camera_auto_balance_;
}
 void CameraParameter::set_camera_auto_balance(bool value) {
  set_has_camera_auto_balance();
  camera_auto_balance_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.CameraParameter.camera_auto_balance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointParameter::kXFieldNumber;
const int PointParameter::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointParameter::PointParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.PointParameter)
}

void PointParameter::InitAsDefaultInstance() {
}

PointParameter::PointParameter(const PointParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_engine.PointParameter)
}

void PointParameter::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointParameter::~PointParameter() {
  // @@protoc_insertion_point(destructor:ws_engine.PointParameter)
  SharedDtor();
}

void PointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointParameter_descriptor_;
}

const PointParameter& PointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

PointParameter* PointParameter::default_instance_ = NULL;

PointParameter* PointParameter::New(::google::protobuf::Arena* arena) const {
  PointParameter* n = new PointParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.PointParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PointParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PointParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_engine.PointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_engine.PointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_engine.PointParameter)
  return false;
#undef DO_
}

void PointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_engine.PointParameter)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ws_engine.PointParameter)
}

::google::protobuf::uint8* PointParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.PointParameter)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.PointParameter)
  return target;
}

int PointParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ws_engine.PointParameter)
  int total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
int PointParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.PointParameter)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.PointParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.PointParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.PointParameter)
    MergeFrom(*source);
  }
}

void PointParameter::MergeFrom(const PointParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.PointParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PointParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.PointParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointParameter::CopyFrom(const PointParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.PointParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PointParameter::Swap(PointParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointParameter::InternalSwap(PointParameter* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointParameter_descriptor_;
  metadata.reflection = PointParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointParameter

// required int32 x = 1;
bool PointParameter::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointParameter::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void PointParameter::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointParameter::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 PointParameter::x() const {
  // @@protoc_insertion_point(field_get:ws_engine.PointParameter.x)
  return x_;
}
 void PointParameter::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.PointParameter.x)
}

// required int32 y = 2;
bool PointParameter::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointParameter::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void PointParameter::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointParameter::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 PointParameter::y() const {
  // @@protoc_insertion_point(field_get:ws_engine.PointParameter.y)
  return y_;
}
 void PointParameter::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.PointParameter.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ROIParameter::kEnableFieldNumber;
const int ROIParameter::kLeftUpPointFieldNumber;
const int ROIParameter::kRightBottomPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ROIParameter::ROIParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.ROIParameter)
}

void ROIParameter::InitAsDefaultInstance() {
  left_up_point_ = const_cast< ::ws_engine::PointParameter*>(&::ws_engine::PointParameter::default_instance());
  right_bottom_point_ = const_cast< ::ws_engine::PointParameter*>(&::ws_engine::PointParameter::default_instance());
}

ROIParameter::ROIParameter(const ROIParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_engine.ROIParameter)
}

void ROIParameter::SharedCtor() {
  _cached_size_ = 0;
  enable_ = true;
  left_up_point_ = NULL;
  right_bottom_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROIParameter::~ROIParameter() {
  // @@protoc_insertion_point(destructor:ws_engine.ROIParameter)
  SharedDtor();
}

void ROIParameter::SharedDtor() {
  if (this != default_instance_) {
    delete left_up_point_;
    delete right_bottom_point_;
  }
}

void ROIParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROIParameter_descriptor_;
}

const ROIParameter& ROIParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

ROIParameter* ROIParameter::default_instance_ = NULL;

ROIParameter* ROIParameter::New(::google::protobuf::Arena* arena) const {
  ROIParameter* n = new ROIParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROIParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.ROIParameter)
  if (_has_bits_[0 / 32] & 7u) {
    enable_ = true;
    if (has_left_up_point()) {
      if (left_up_point_ != NULL) left_up_point_->::ws_engine::PointParameter::Clear();
    }
    if (has_right_bottom_point()) {
      if (right_bottom_point_ != NULL) right_bottom_point_->::ws_engine::PointParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ROIParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_engine.ROIParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_left_up_point;
        break;
      }

      // required .ws_engine.PointParameter left_up_point = 2;
      case 2: {
        if (tag == 18) {
         parse_left_up_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_up_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_right_bottom_point;
        break;
      }

      // required .ws_engine.PointParameter right_bottom_point = 3;
      case 3: {
        if (tag == 26) {
         parse_right_bottom_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_bottom_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_engine.ROIParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_engine.ROIParameter)
  return false;
#undef DO_
}

void ROIParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_engine.ROIParameter)
  // optional bool enable = 1 [default = true];
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // required .ws_engine.PointParameter left_up_point = 2;
  if (has_left_up_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->left_up_point_, output);
  }

  // required .ws_engine.PointParameter right_bottom_point = 3;
  if (has_right_bottom_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->right_bottom_point_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ws_engine.ROIParameter)
}

::google::protobuf::uint8* ROIParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.ROIParameter)
  // optional bool enable = 1 [default = true];
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // required .ws_engine.PointParameter left_up_point = 2;
  if (has_left_up_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->left_up_point_, false, target);
  }

  // required .ws_engine.PointParameter right_bottom_point = 3;
  if (has_right_bottom_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->right_bottom_point_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.ROIParameter)
  return target;
}

int ROIParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ws_engine.ROIParameter)
  int total_size = 0;

  if (has_left_up_point()) {
    // required .ws_engine.PointParameter left_up_point = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_up_point_);
  }

  if (has_right_bottom_point()) {
    // required .ws_engine.PointParameter right_bottom_point = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_bottom_point_);
  }

  return total_size;
}
int ROIParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.ROIParameter)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .ws_engine.PointParameter left_up_point = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_up_point_);

    // required .ws_engine.PointParameter right_bottom_point = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_bottom_point_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool enable = 1 [default = true];
  if (has_enable()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.ROIParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ROIParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ROIParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.ROIParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.ROIParameter)
    MergeFrom(*source);
  }
}

void ROIParameter::MergeFrom(const ROIParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.ROIParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_left_up_point()) {
      mutable_left_up_point()->::ws_engine::PointParameter::MergeFrom(from.left_up_point());
    }
    if (from.has_right_bottom_point()) {
      mutable_right_bottom_point()->::ws_engine::PointParameter::MergeFrom(from.right_bottom_point());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ROIParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.ROIParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIParameter::CopyFrom(const ROIParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.ROIParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_left_up_point()) {
    if (!this->left_up_point_->IsInitialized()) return false;
  }
  if (has_right_bottom_point()) {
    if (!this->right_bottom_point_->IsInitialized()) return false;
  }
  return true;
}

void ROIParameter::Swap(ROIParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROIParameter::InternalSwap(ROIParameter* other) {
  std::swap(enable_, other->enable_);
  std::swap(left_up_point_, other->left_up_point_);
  std::swap(right_bottom_point_, other->right_bottom_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROIParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROIParameter_descriptor_;
  metadata.reflection = ROIParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROIParameter

// optional bool enable = 1 [default = true];
bool ROIParameter::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ROIParameter::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
void ROIParameter::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
void ROIParameter::clear_enable() {
  enable_ = true;
  clear_has_enable();
}
 bool ROIParameter::enable() const {
  // @@protoc_insertion_point(field_get:ws_engine.ROIParameter.enable)
  return enable_;
}
 void ROIParameter::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.ROIParameter.enable)
}

// required .ws_engine.PointParameter left_up_point = 2;
bool ROIParameter::has_left_up_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ROIParameter::set_has_left_up_point() {
  _has_bits_[0] |= 0x00000002u;
}
void ROIParameter::clear_has_left_up_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void ROIParameter::clear_left_up_point() {
  if (left_up_point_ != NULL) left_up_point_->::ws_engine::PointParameter::Clear();
  clear_has_left_up_point();
}
const ::ws_engine::PointParameter& ROIParameter::left_up_point() const {
  // @@protoc_insertion_point(field_get:ws_engine.ROIParameter.left_up_point)
  return left_up_point_ != NULL ? *left_up_point_ : *default_instance_->left_up_point_;
}
::ws_engine::PointParameter* ROIParameter::mutable_left_up_point() {
  set_has_left_up_point();
  if (left_up_point_ == NULL) {
    left_up_point_ = new ::ws_engine::PointParameter;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.ROIParameter.left_up_point)
  return left_up_point_;
}
::ws_engine::PointParameter* ROIParameter::release_left_up_point() {
  // @@protoc_insertion_point(field_release:ws_engine.ROIParameter.left_up_point)
  clear_has_left_up_point();
  ::ws_engine::PointParameter* temp = left_up_point_;
  left_up_point_ = NULL;
  return temp;
}
void ROIParameter::set_allocated_left_up_point(::ws_engine::PointParameter* left_up_point) {
  delete left_up_point_;
  left_up_point_ = left_up_point;
  if (left_up_point) {
    set_has_left_up_point();
  } else {
    clear_has_left_up_point();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ROIParameter.left_up_point)
}

// required .ws_engine.PointParameter right_bottom_point = 3;
bool ROIParameter::has_right_bottom_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ROIParameter::set_has_right_bottom_point() {
  _has_bits_[0] |= 0x00000004u;
}
void ROIParameter::clear_has_right_bottom_point() {
  _has_bits_[0] &= ~0x00000004u;
}
void ROIParameter::clear_right_bottom_point() {
  if (right_bottom_point_ != NULL) right_bottom_point_->::ws_engine::PointParameter::Clear();
  clear_has_right_bottom_point();
}
const ::ws_engine::PointParameter& ROIParameter::right_bottom_point() const {
  // @@protoc_insertion_point(field_get:ws_engine.ROIParameter.right_bottom_point)
  return right_bottom_point_ != NULL ? *right_bottom_point_ : *default_instance_->right_bottom_point_;
}
::ws_engine::PointParameter* ROIParameter::mutable_right_bottom_point() {
  set_has_right_bottom_point();
  if (right_bottom_point_ == NULL) {
    right_bottom_point_ = new ::ws_engine::PointParameter;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.ROIParameter.right_bottom_point)
  return right_bottom_point_;
}
::ws_engine::PointParameter* ROIParameter::release_right_bottom_point() {
  // @@protoc_insertion_point(field_release:ws_engine.ROIParameter.right_bottom_point)
  clear_has_right_bottom_point();
  ::ws_engine::PointParameter* temp = right_bottom_point_;
  right_bottom_point_ = NULL;
  return temp;
}
void ROIParameter::set_allocated_right_bottom_point(::ws_engine::PointParameter* right_bottom_point) {
  delete right_bottom_point_;
  right_bottom_point_ = right_bottom_point;
  if (right_bottom_point) {
    set_has_right_bottom_point();
  } else {
    clear_has_right_bottom_point();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ROIParameter.right_bottom_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageParameter::kWidthFieldNumber;
const int ImageParameter::kHeightFieldNumber;
const int ImageParameter::kChannelFieldNumber;
const int ImageParameter::kDepthFieldNumber;
const int ImageParameter::kROIZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageParameter::ImageParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.ImageParameter)
}

void ImageParameter::InitAsDefaultInstance() {
  roi_zone_ = const_cast< ::ws_engine::ROIParameter*>(&::ws_engine::ROIParameter::default_instance());
}

ImageParameter::ImageParameter(const ImageParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_engine.ImageParameter)
}

void ImageParameter::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  channel_ = 1;
  depth_ = 8;
  roi_zone_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageParameter::~ImageParameter() {
  // @@protoc_insertion_point(destructor:ws_engine.ImageParameter)
  SharedDtor();
}

void ImageParameter::SharedDtor() {
  if (this != default_instance_) {
    delete roi_zone_;
  }
}

void ImageParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageParameter_descriptor_;
}

const ImageParameter& ImageParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

ImageParameter* ImageParameter::default_instance_ = NULL;

ImageParameter* ImageParameter::New(::google::protobuf::Arena* arena) const {
  ImageParameter* n = new ImageParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.ImageParameter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageParameter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageParameter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(width_, height_);
    channel_ = 1;
    depth_ = 8;
    if (has_roi_zone()) {
      if (roi_zone_ != NULL) roi_zone_->::ws_engine::ROIParameter::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_engine.ImageParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional int32 channel = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_depth;
        break;
      }

      // optional int32 depth = 4 [default = 8];
      case 4: {
        if (tag == 32) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ROI_zone;
        break;
      }

      // optional .ws_engine.ROIParameter ROI_zone = 5;
      case 5: {
        if (tag == 42) {
         parse_ROI_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_zone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_engine.ImageParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_engine.ImageParameter)
  return false;
#undef DO_
}

void ImageParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_engine.ImageParameter)
  // required int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // required int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 channel = 3 [default = 1];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel(), output);
  }

  // optional int32 depth = 4 [default = 8];
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->depth(), output);
  }

  // optional .ws_engine.ROIParameter ROI_zone = 5;
  if (has_roi_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->roi_zone_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ws_engine.ImageParameter)
}

::google::protobuf::uint8* ImageParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.ImageParameter)
  // required int32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // required int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 channel = 3 [default = 1];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel(), target);
  }

  // optional int32 depth = 4 [default = 8];
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->depth(), target);
  }

  // optional .ws_engine.ROIParameter ROI_zone = 5;
  if (has_roi_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->roi_zone_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.ImageParameter)
  return target;
}

int ImageParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ws_engine.ImageParameter)
  int total_size = 0;

  if (has_width()) {
    // required int32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  return total_size;
}
int ImageParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.ImageParameter)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional int32 channel = 3 [default = 1];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int32 depth = 4 [default = 8];
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional .ws_engine.ROIParameter ROI_zone = 5;
    if (has_roi_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_zone_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.ImageParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.ImageParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.ImageParameter)
    MergeFrom(*source);
  }
}

void ImageParameter::MergeFrom(const ImageParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.ImageParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_roi_zone()) {
      mutable_roi_zone()->::ws_engine::ROIParameter::MergeFrom(from.roi_zone());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImageParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.ImageParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageParameter::CopyFrom(const ImageParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.ImageParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_roi_zone()) {
    if (!this->roi_zone_->IsInitialized()) return false;
  }
  return true;
}

void ImageParameter::Swap(ImageParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageParameter::InternalSwap(ImageParameter* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(channel_, other->channel_);
  std::swap(depth_, other->depth_);
  std::swap(roi_zone_, other->roi_zone_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageParameter_descriptor_;
  metadata.reflection = ImageParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageParameter

// required int32 width = 1;
bool ImageParameter::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageParameter::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageParameter::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 ImageParameter::width() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.width)
  return width_;
}
 void ImageParameter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.width)
}

// required int32 height = 2;
bool ImageParameter::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageParameter::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageParameter::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 ImageParameter::height() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.height)
  return height_;
}
 void ImageParameter::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.height)
}

// optional int32 channel = 3 [default = 1];
bool ImageParameter::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageParameter::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageParameter::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageParameter::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
 ::google::protobuf::int32 ImageParameter::channel() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.channel)
  return channel_;
}
 void ImageParameter::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.channel)
}

// optional int32 depth = 4 [default = 8];
bool ImageParameter::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageParameter::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageParameter::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageParameter::clear_depth() {
  depth_ = 8;
  clear_has_depth();
}
 ::google::protobuf::int32 ImageParameter::depth() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.depth)
  return depth_;
}
 void ImageParameter::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.ImageParameter.depth)
}

// optional .ws_engine.ROIParameter ROI_zone = 5;
bool ImageParameter::has_roi_zone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageParameter::set_has_roi_zone() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageParameter::clear_has_roi_zone() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageParameter::clear_roi_zone() {
  if (roi_zone_ != NULL) roi_zone_->::ws_engine::ROIParameter::Clear();
  clear_has_roi_zone();
}
const ::ws_engine::ROIParameter& ImageParameter::roi_zone() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageParameter.ROI_zone)
  return roi_zone_ != NULL ? *roi_zone_ : *default_instance_->roi_zone_;
}
::ws_engine::ROIParameter* ImageParameter::mutable_roi_zone() {
  set_has_roi_zone();
  if (roi_zone_ == NULL) {
    roi_zone_ = new ::ws_engine::ROIParameter;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageParameter.ROI_zone)
  return roi_zone_;
}
::ws_engine::ROIParameter* ImageParameter::release_roi_zone() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageParameter.ROI_zone)
  clear_has_roi_zone();
  ::ws_engine::ROIParameter* temp = roi_zone_;
  roi_zone_ = NULL;
  return temp;
}
void ImageParameter::set_allocated_roi_zone(::ws_engine::ROIParameter* roi_zone) {
  delete roi_zone_;
  roi_zone_ = roi_zone;
  if (roi_zone) {
    set_has_roi_zone();
  } else {
    clear_has_roi_zone();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageParameter.ROI_zone)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageProcessingLayer::kImageInputFieldNumber;
const int ImageProcessingLayer::kImageOutputFieldNumber;
const int ImageProcessingLayer::kLibFileFieldNumber;
const int ImageProcessingLayer::kFuncNameFieldNumber;
const int ImageProcessingLayer::kFuncArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageProcessingLayer::ImageProcessingLayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.ImageProcessingLayer)
}

void ImageProcessingLayer::InitAsDefaultInstance() {
  image_input_ = const_cast< ::ws_engine::ImageParameter*>(&::ws_engine::ImageParameter::default_instance());
  image_output_ = const_cast< ::ws_engine::ImageParameter*>(&::ws_engine::ImageParameter::default_instance());
}

ImageProcessingLayer::ImageProcessingLayer(const ImageProcessingLayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_engine.ImageProcessingLayer)
}

void ImageProcessingLayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_input_ = NULL;
  image_output_ = NULL;
  lib_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  func_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  func_args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageProcessingLayer::~ImageProcessingLayer() {
  // @@protoc_insertion_point(destructor:ws_engine.ImageProcessingLayer)
  SharedDtor();
}

void ImageProcessingLayer::SharedDtor() {
  lib_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  func_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  func_args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete image_input_;
    delete image_output_;
  }
}

void ImageProcessingLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageProcessingLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageProcessingLayer_descriptor_;
}

const ImageProcessingLayer& ImageProcessingLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

ImageProcessingLayer* ImageProcessingLayer::default_instance_ = NULL;

ImageProcessingLayer* ImageProcessingLayer::New(::google::protobuf::Arena* arena) const {
  ImageProcessingLayer* n = new ImageProcessingLayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageProcessingLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.ImageProcessingLayer)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_image_input()) {
      if (image_input_ != NULL) image_input_->::ws_engine::ImageParameter::Clear();
    }
    if (has_image_output()) {
      if (image_output_ != NULL) image_output_->::ws_engine::ImageParameter::Clear();
    }
    if (has_lib_file()) {
      lib_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_func_name()) {
      func_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_func_args()) {
      func_args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageProcessingLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_engine.ImageProcessingLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ws_engine.ImageParameter image_input = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image_output;
        break;
      }

      // required .ws_engine.ImageParameter image_output = 2;
      case 2: {
        if (tag == 18) {
         parse_image_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_output()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lib_file;
        break;
      }

      // required string lib_file = 3;
      case 3: {
        if (tag == 26) {
         parse_lib_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lib_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lib_file().data(), this->lib_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ws_engine.ImageProcessingLayer.lib_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_func_name;
        break;
      }

      // required string func_name = 4;
      case 4: {
        if (tag == 34) {
         parse_func_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->func_name().data(), this->func_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ws_engine.ImageProcessingLayer.func_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_func_args;
        break;
      }

      // optional string func_args = 5;
      case 5: {
        if (tag == 42) {
         parse_func_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->func_args().data(), this->func_args().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ws_engine.ImageProcessingLayer.func_args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_engine.ImageProcessingLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_engine.ImageProcessingLayer)
  return false;
#undef DO_
}

void ImageProcessingLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_engine.ImageProcessingLayer)
  // required .ws_engine.ImageParameter image_input = 1;
  if (has_image_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_input_, output);
  }

  // required .ws_engine.ImageParameter image_output = 2;
  if (has_image_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_output_, output);
  }

  // required string lib_file = 3;
  if (has_lib_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lib_file().data(), this->lib_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.ImageProcessingLayer.lib_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lib_file(), output);
  }

  // required string func_name = 4;
  if (has_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func_name().data(), this->func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.ImageProcessingLayer.func_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->func_name(), output);
  }

  // optional string func_args = 5;
  if (has_func_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func_args().data(), this->func_args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.ImageProcessingLayer.func_args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->func_args(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ws_engine.ImageProcessingLayer)
}

::google::protobuf::uint8* ImageProcessingLayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.ImageProcessingLayer)
  // required .ws_engine.ImageParameter image_input = 1;
  if (has_image_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->image_input_, false, target);
  }

  // required .ws_engine.ImageParameter image_output = 2;
  if (has_image_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->image_output_, false, target);
  }

  // required string lib_file = 3;
  if (has_lib_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lib_file().data(), this->lib_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.ImageProcessingLayer.lib_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lib_file(), target);
  }

  // required string func_name = 4;
  if (has_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func_name().data(), this->func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.ImageProcessingLayer.func_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->func_name(), target);
  }

  // optional string func_args = 5;
  if (has_func_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func_args().data(), this->func_args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ws_engine.ImageProcessingLayer.func_args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->func_args(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.ImageProcessingLayer)
  return target;
}

int ImageProcessingLayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ws_engine.ImageProcessingLayer)
  int total_size = 0;

  if (has_image_input()) {
    // required .ws_engine.ImageParameter image_input = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_input_);
  }

  if (has_image_output()) {
    // required .ws_engine.ImageParameter image_output = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_output_);
  }

  if (has_lib_file()) {
    // required string lib_file = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lib_file());
  }

  if (has_func_name()) {
    // required string func_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func_name());
  }

  return total_size;
}
int ImageProcessingLayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.ImageProcessingLayer)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .ws_engine.ImageParameter image_input = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_input_);

    // required .ws_engine.ImageParameter image_output = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_output_);

    // required string lib_file = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lib_file());

    // required string func_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string func_args = 5;
  if (has_func_args()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func_args());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageProcessingLayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.ImageProcessingLayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageProcessingLayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageProcessingLayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.ImageProcessingLayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.ImageProcessingLayer)
    MergeFrom(*source);
  }
}

void ImageProcessingLayer::MergeFrom(const ImageProcessingLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.ImageProcessingLayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_input()) {
      mutable_image_input()->::ws_engine::ImageParameter::MergeFrom(from.image_input());
    }
    if (from.has_image_output()) {
      mutable_image_output()->::ws_engine::ImageParameter::MergeFrom(from.image_output());
    }
    if (from.has_lib_file()) {
      set_has_lib_file();
      lib_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lib_file_);
    }
    if (from.has_func_name()) {
      set_has_func_name();
      func_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_name_);
    }
    if (from.has_func_args()) {
      set_has_func_args();
      func_args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_args_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImageProcessingLayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.ImageProcessingLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageProcessingLayer::CopyFrom(const ImageProcessingLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.ImageProcessingLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProcessingLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_image_input()) {
    if (!this->image_input_->IsInitialized()) return false;
  }
  if (has_image_output()) {
    if (!this->image_output_->IsInitialized()) return false;
  }
  return true;
}

void ImageProcessingLayer::Swap(ImageProcessingLayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageProcessingLayer::InternalSwap(ImageProcessingLayer* other) {
  std::swap(image_input_, other->image_input_);
  std::swap(image_output_, other->image_output_);
  lib_file_.Swap(&other->lib_file_);
  func_name_.Swap(&other->func_name_);
  func_args_.Swap(&other->func_args_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageProcessingLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageProcessingLayer_descriptor_;
  metadata.reflection = ImageProcessingLayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageProcessingLayer

// required .ws_engine.ImageParameter image_input = 1;
bool ImageProcessingLayer::has_image_input() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageProcessingLayer::set_has_image_input() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageProcessingLayer::clear_has_image_input() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageProcessingLayer::clear_image_input() {
  if (image_input_ != NULL) image_input_->::ws_engine::ImageParameter::Clear();
  clear_has_image_input();
}
const ::ws_engine::ImageParameter& ImageProcessingLayer::image_input() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.image_input)
  return image_input_ != NULL ? *image_input_ : *default_instance_->image_input_;
}
::ws_engine::ImageParameter* ImageProcessingLayer::mutable_image_input() {
  set_has_image_input();
  if (image_input_ == NULL) {
    image_input_ = new ::ws_engine::ImageParameter;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.image_input)
  return image_input_;
}
::ws_engine::ImageParameter* ImageProcessingLayer::release_image_input() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.image_input)
  clear_has_image_input();
  ::ws_engine::ImageParameter* temp = image_input_;
  image_input_ = NULL;
  return temp;
}
void ImageProcessingLayer::set_allocated_image_input(::ws_engine::ImageParameter* image_input) {
  delete image_input_;
  image_input_ = image_input;
  if (image_input) {
    set_has_image_input();
  } else {
    clear_has_image_input();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.image_input)
}

// required .ws_engine.ImageParameter image_output = 2;
bool ImageProcessingLayer::has_image_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageProcessingLayer::set_has_image_output() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageProcessingLayer::clear_has_image_output() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageProcessingLayer::clear_image_output() {
  if (image_output_ != NULL) image_output_->::ws_engine::ImageParameter::Clear();
  clear_has_image_output();
}
const ::ws_engine::ImageParameter& ImageProcessingLayer::image_output() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.image_output)
  return image_output_ != NULL ? *image_output_ : *default_instance_->image_output_;
}
::ws_engine::ImageParameter* ImageProcessingLayer::mutable_image_output() {
  set_has_image_output();
  if (image_output_ == NULL) {
    image_output_ = new ::ws_engine::ImageParameter;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.image_output)
  return image_output_;
}
::ws_engine::ImageParameter* ImageProcessingLayer::release_image_output() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.image_output)
  clear_has_image_output();
  ::ws_engine::ImageParameter* temp = image_output_;
  image_output_ = NULL;
  return temp;
}
void ImageProcessingLayer::set_allocated_image_output(::ws_engine::ImageParameter* image_output) {
  delete image_output_;
  image_output_ = image_output;
  if (image_output) {
    set_has_image_output();
  } else {
    clear_has_image_output();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.image_output)
}

// required string lib_file = 3;
bool ImageProcessingLayer::has_lib_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageProcessingLayer::set_has_lib_file() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageProcessingLayer::clear_has_lib_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageProcessingLayer::clear_lib_file() {
  lib_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lib_file();
}
 const ::std::string& ImageProcessingLayer::lib_file() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.lib_file)
  return lib_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageProcessingLayer::set_lib_file(const ::std::string& value) {
  set_has_lib_file();
  lib_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageProcessingLayer.lib_file)
}
 void ImageProcessingLayer::set_lib_file(const char* value) {
  set_has_lib_file();
  lib_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.ImageProcessingLayer.lib_file)
}
 void ImageProcessingLayer::set_lib_file(const char* value, size_t size) {
  set_has_lib_file();
  lib_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.ImageProcessingLayer.lib_file)
}
 ::std::string* ImageProcessingLayer::mutable_lib_file() {
  set_has_lib_file();
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.lib_file)
  return lib_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageProcessingLayer::release_lib_file() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.lib_file)
  clear_has_lib_file();
  return lib_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageProcessingLayer::set_allocated_lib_file(::std::string* lib_file) {
  if (lib_file != NULL) {
    set_has_lib_file();
  } else {
    clear_has_lib_file();
  }
  lib_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lib_file);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.lib_file)
}

// required string func_name = 4;
bool ImageProcessingLayer::has_func_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageProcessingLayer::set_has_func_name() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageProcessingLayer::clear_has_func_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageProcessingLayer::clear_func_name() {
  func_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_func_name();
}
 const ::std::string& ImageProcessingLayer::func_name() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.func_name)
  return func_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageProcessingLayer::set_func_name(const ::std::string& value) {
  set_has_func_name();
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageProcessingLayer.func_name)
}
 void ImageProcessingLayer::set_func_name(const char* value) {
  set_has_func_name();
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.ImageProcessingLayer.func_name)
}
 void ImageProcessingLayer::set_func_name(const char* value, size_t size) {
  set_has_func_name();
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.ImageProcessingLayer.func_name)
}
 ::std::string* ImageProcessingLayer::mutable_func_name() {
  set_has_func_name();
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.func_name)
  return func_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageProcessingLayer::release_func_name() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.func_name)
  clear_has_func_name();
  return func_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageProcessingLayer::set_allocated_func_name(::std::string* func_name) {
  if (func_name != NULL) {
    set_has_func_name();
  } else {
    clear_has_func_name();
  }
  func_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func_name);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.func_name)
}

// optional string func_args = 5;
bool ImageProcessingLayer::has_func_args() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageProcessingLayer::set_has_func_args() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageProcessingLayer::clear_has_func_args() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageProcessingLayer::clear_func_args() {
  func_args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_func_args();
}
 const ::std::string& ImageProcessingLayer::func_args() const {
  // @@protoc_insertion_point(field_get:ws_engine.ImageProcessingLayer.func_args)
  return func_args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageProcessingLayer::set_func_args(const ::std::string& value) {
  set_has_func_args();
  func_args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ws_engine.ImageProcessingLayer.func_args)
}
 void ImageProcessingLayer::set_func_args(const char* value) {
  set_has_func_args();
  func_args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ws_engine.ImageProcessingLayer.func_args)
}
 void ImageProcessingLayer::set_func_args(const char* value, size_t size) {
  set_has_func_args();
  func_args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ws_engine.ImageProcessingLayer.func_args)
}
 ::std::string* ImageProcessingLayer::mutable_func_args() {
  set_has_func_args();
  // @@protoc_insertion_point(field_mutable:ws_engine.ImageProcessingLayer.func_args)
  return func_args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageProcessingLayer::release_func_args() {
  // @@protoc_insertion_point(field_release:ws_engine.ImageProcessingLayer.func_args)
  clear_has_func_args();
  return func_args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageProcessingLayer::set_allocated_func_args(::std::string* func_args) {
  if (func_args != NULL) {
    set_has_func_args();
  } else {
    clear_has_func_args();
  }
  func_args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func_args);
  // @@protoc_insertion_point(field_set_allocated:ws_engine.ImageProcessingLayer.func_args)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPL_RGB2Gray::kHeadFieldNumber;
const int IPL_RGB2Gray::kChannelSelectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPL_RGB2Gray::IPL_RGB2Gray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.IPL_RGB2Gray)
}

void IPL_RGB2Gray::InitAsDefaultInstance() {
  head_ = const_cast< ::ws_engine::ImageProcessingLayer*>(&::ws_engine::ImageProcessingLayer::default_instance());
}

IPL_RGB2Gray::IPL_RGB2Gray(const IPL_RGB2Gray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_engine.IPL_RGB2Gray)
}

void IPL_RGB2Gray::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  channel_selected_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPL_RGB2Gray::~IPL_RGB2Gray() {
  // @@protoc_insertion_point(destructor:ws_engine.IPL_RGB2Gray)
  SharedDtor();
}

void IPL_RGB2Gray::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void IPL_RGB2Gray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPL_RGB2Gray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPL_RGB2Gray_descriptor_;
}

const IPL_RGB2Gray& IPL_RGB2Gray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

IPL_RGB2Gray* IPL_RGB2Gray::default_instance_ = NULL;

IPL_RGB2Gray* IPL_RGB2Gray::New(::google::protobuf::Arena* arena) const {
  IPL_RGB2Gray* n = new IPL_RGB2Gray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IPL_RGB2Gray::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.IPL_RGB2Gray)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::ws_engine::ImageProcessingLayer::Clear();
    }
    channel_selected_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IPL_RGB2Gray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_engine.IPL_RGB2Gray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ws_engine.ImageProcessingLayer head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_selected;
        break;
      }

      // optional int32 channel_selected = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_channel_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_selected_)));
          set_has_channel_selected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_engine.IPL_RGB2Gray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_engine.IPL_RGB2Gray)
  return false;
#undef DO_
}

void IPL_RGB2Gray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_engine.IPL_RGB2Gray)
  // required .ws_engine.ImageProcessingLayer head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional int32 channel_selected = 2 [default = 0];
  if (has_channel_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel_selected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ws_engine.IPL_RGB2Gray)
}

::google::protobuf::uint8* IPL_RGB2Gray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.IPL_RGB2Gray)
  // required .ws_engine.ImageProcessingLayer head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // optional int32 channel_selected = 2 [default = 0];
  if (has_channel_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel_selected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.IPL_RGB2Gray)
  return target;
}

int IPL_RGB2Gray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.IPL_RGB2Gray)
  int total_size = 0;

  // required .ws_engine.ImageProcessingLayer head = 1;
  if (has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // optional int32 channel_selected = 2 [default = 0];
  if (has_channel_selected()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_selected());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPL_RGB2Gray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.IPL_RGB2Gray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IPL_RGB2Gray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IPL_RGB2Gray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.IPL_RGB2Gray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.IPL_RGB2Gray)
    MergeFrom(*source);
  }
}

void IPL_RGB2Gray::MergeFrom(const IPL_RGB2Gray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.IPL_RGB2Gray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ws_engine::ImageProcessingLayer::MergeFrom(from.head());
    }
    if (from.has_channel_selected()) {
      set_channel_selected(from.channel_selected());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IPL_RGB2Gray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.IPL_RGB2Gray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPL_RGB2Gray::CopyFrom(const IPL_RGB2Gray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.IPL_RGB2Gray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPL_RGB2Gray::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void IPL_RGB2Gray::Swap(IPL_RGB2Gray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPL_RGB2Gray::InternalSwap(IPL_RGB2Gray* other) {
  std::swap(head_, other->head_);
  std::swap(channel_selected_, other->channel_selected_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IPL_RGB2Gray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPL_RGB2Gray_descriptor_;
  metadata.reflection = IPL_RGB2Gray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IPL_RGB2Gray

// required .ws_engine.ImageProcessingLayer head = 1;
bool IPL_RGB2Gray::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IPL_RGB2Gray::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void IPL_RGB2Gray::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void IPL_RGB2Gray::clear_head() {
  if (head_ != NULL) head_->::ws_engine::ImageProcessingLayer::Clear();
  clear_has_head();
}
const ::ws_engine::ImageProcessingLayer& IPL_RGB2Gray::head() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_RGB2Gray.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ws_engine::ImageProcessingLayer* IPL_RGB2Gray::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::ws_engine::ImageProcessingLayer;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_RGB2Gray.head)
  return head_;
}
::ws_engine::ImageProcessingLayer* IPL_RGB2Gray::release_head() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_RGB2Gray.head)
  clear_has_head();
  ::ws_engine::ImageProcessingLayer* temp = head_;
  head_ = NULL;
  return temp;
}
void IPL_RGB2Gray::set_allocated_head(::ws_engine::ImageProcessingLayer* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_RGB2Gray.head)
}

// optional int32 channel_selected = 2 [default = 0];
bool IPL_RGB2Gray::has_channel_selected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IPL_RGB2Gray::set_has_channel_selected() {
  _has_bits_[0] |= 0x00000002u;
}
void IPL_RGB2Gray::clear_has_channel_selected() {
  _has_bits_[0] &= ~0x00000002u;
}
void IPL_RGB2Gray::clear_channel_selected() {
  channel_selected_ = 0;
  clear_has_channel_selected();
}
 ::google::protobuf::int32 IPL_RGB2Gray::channel_selected() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_RGB2Gray.channel_selected)
  return channel_selected_;
}
 void IPL_RGB2Gray::set_channel_selected(::google::protobuf::int32 value) {
  set_has_channel_selected();
  channel_selected_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.IPL_RGB2Gray.channel_selected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPL_BLUR::kHeadFieldNumber;
const int IPL_BLUR::kBlurLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPL_BLUR::IPL_BLUR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.IPL_BLUR)
}

void IPL_BLUR::InitAsDefaultInstance() {
  head_ = const_cast< ::ws_engine::ImageProcessingLayer*>(&::ws_engine::ImageProcessingLayer::default_instance());
}

IPL_BLUR::IPL_BLUR(const IPL_BLUR& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_engine.IPL_BLUR)
}

void IPL_BLUR::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  blur_level_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPL_BLUR::~IPL_BLUR() {
  // @@protoc_insertion_point(destructor:ws_engine.IPL_BLUR)
  SharedDtor();
}

void IPL_BLUR::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void IPL_BLUR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPL_BLUR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPL_BLUR_descriptor_;
}

const IPL_BLUR& IPL_BLUR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

IPL_BLUR* IPL_BLUR::default_instance_ = NULL;

IPL_BLUR* IPL_BLUR::New(::google::protobuf::Arena* arena) const {
  IPL_BLUR* n = new IPL_BLUR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IPL_BLUR::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.IPL_BLUR)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::ws_engine::ImageProcessingLayer::Clear();
    }
    blur_level_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IPL_BLUR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_engine.IPL_BLUR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ws_engine.ImageProcessingLayer head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blur_level;
        break;
      }

      // optional int32 blur_level = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_blur_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blur_level_)));
          set_has_blur_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_engine.IPL_BLUR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_engine.IPL_BLUR)
  return false;
#undef DO_
}

void IPL_BLUR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_engine.IPL_BLUR)
  // required .ws_engine.ImageProcessingLayer head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional int32 blur_level = 2 [default = 1];
  if (has_blur_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blur_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ws_engine.IPL_BLUR)
}

::google::protobuf::uint8* IPL_BLUR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.IPL_BLUR)
  // required .ws_engine.ImageProcessingLayer head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // optional int32 blur_level = 2 [default = 1];
  if (has_blur_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->blur_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.IPL_BLUR)
  return target;
}

int IPL_BLUR::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.IPL_BLUR)
  int total_size = 0;

  // required .ws_engine.ImageProcessingLayer head = 1;
  if (has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // optional int32 blur_level = 2 [default = 1];
  if (has_blur_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blur_level());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPL_BLUR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.IPL_BLUR)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IPL_BLUR* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IPL_BLUR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.IPL_BLUR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.IPL_BLUR)
    MergeFrom(*source);
  }
}

void IPL_BLUR::MergeFrom(const IPL_BLUR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.IPL_BLUR)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ws_engine::ImageProcessingLayer::MergeFrom(from.head());
    }
    if (from.has_blur_level()) {
      set_blur_level(from.blur_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IPL_BLUR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.IPL_BLUR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPL_BLUR::CopyFrom(const IPL_BLUR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.IPL_BLUR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPL_BLUR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void IPL_BLUR::Swap(IPL_BLUR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPL_BLUR::InternalSwap(IPL_BLUR* other) {
  std::swap(head_, other->head_);
  std::swap(blur_level_, other->blur_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IPL_BLUR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPL_BLUR_descriptor_;
  metadata.reflection = IPL_BLUR_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IPL_BLUR

// required .ws_engine.ImageProcessingLayer head = 1;
bool IPL_BLUR::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IPL_BLUR::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void IPL_BLUR::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void IPL_BLUR::clear_head() {
  if (head_ != NULL) head_->::ws_engine::ImageProcessingLayer::Clear();
  clear_has_head();
}
const ::ws_engine::ImageProcessingLayer& IPL_BLUR::head() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_BLUR.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ws_engine::ImageProcessingLayer* IPL_BLUR::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::ws_engine::ImageProcessingLayer;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_BLUR.head)
  return head_;
}
::ws_engine::ImageProcessingLayer* IPL_BLUR::release_head() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_BLUR.head)
  clear_has_head();
  ::ws_engine::ImageProcessingLayer* temp = head_;
  head_ = NULL;
  return temp;
}
void IPL_BLUR::set_allocated_head(::ws_engine::ImageProcessingLayer* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_BLUR.head)
}

// optional int32 blur_level = 2 [default = 1];
bool IPL_BLUR::has_blur_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IPL_BLUR::set_has_blur_level() {
  _has_bits_[0] |= 0x00000002u;
}
void IPL_BLUR::clear_has_blur_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void IPL_BLUR::clear_blur_level() {
  blur_level_ = 1;
  clear_has_blur_level();
}
 ::google::protobuf::int32 IPL_BLUR::blur_level() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_BLUR.blur_level)
  return blur_level_;
}
 void IPL_BLUR::set_blur_level(::google::protobuf::int32 value) {
  set_has_blur_level();
  blur_level_ = value;
  // @@protoc_insertion_point(field_set:ws_engine.IPL_BLUR.blur_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPL_Engine::kRgb2GrayFieldNumber;
const int IPL_Engine::kBlurFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPL_Engine::IPL_Engine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ws_engine.IPL_Engine)
}

void IPL_Engine::InitAsDefaultInstance() {
  rgb2gray_ = const_cast< ::ws_engine::IPL_RGB2Gray*>(&::ws_engine::IPL_RGB2Gray::default_instance());
  blur_ = const_cast< ::ws_engine::IPL_BLUR*>(&::ws_engine::IPL_BLUR::default_instance());
}

IPL_Engine::IPL_Engine(const IPL_Engine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ws_engine.IPL_Engine)
}

void IPL_Engine::SharedCtor() {
  _cached_size_ = 0;
  rgb2gray_ = NULL;
  blur_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPL_Engine::~IPL_Engine() {
  // @@protoc_insertion_point(destructor:ws_engine.IPL_Engine)
  SharedDtor();
}

void IPL_Engine::SharedDtor() {
  if (this != default_instance_) {
    delete rgb2gray_;
    delete blur_;
  }
}

void IPL_Engine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPL_Engine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPL_Engine_descriptor_;
}

const IPL_Engine& IPL_Engine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

IPL_Engine* IPL_Engine::default_instance_ = NULL;

IPL_Engine* IPL_Engine::New(::google::protobuf::Arena* arena) const {
  IPL_Engine* n = new IPL_Engine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IPL_Engine::Clear() {
// @@protoc_insertion_point(message_clear_start:ws_engine.IPL_Engine)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_rgb2gray()) {
      if (rgb2gray_ != NULL) rgb2gray_->::ws_engine::IPL_RGB2Gray::Clear();
    }
    if (has_blur()) {
      if (blur_ != NULL) blur_->::ws_engine::IPL_BLUR::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IPL_Engine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ws_engine.IPL_Engine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ws_engine.IPL_RGB2Gray rgb2gray = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rgb2gray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blur;
        break;
      }

      // optional .ws_engine.IPL_BLUR blur = 2;
      case 2: {
        if (tag == 18) {
         parse_blur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blur()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ws_engine.IPL_Engine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ws_engine.IPL_Engine)
  return false;
#undef DO_
}

void IPL_Engine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ws_engine.IPL_Engine)
  // optional .ws_engine.IPL_RGB2Gray rgb2gray = 1;
  if (has_rgb2gray()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rgb2gray_, output);
  }

  // optional .ws_engine.IPL_BLUR blur = 2;
  if (has_blur()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->blur_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ws_engine.IPL_Engine)
}

::google::protobuf::uint8* IPL_Engine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ws_engine.IPL_Engine)
  // optional .ws_engine.IPL_RGB2Gray rgb2gray = 1;
  if (has_rgb2gray()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->rgb2gray_, false, target);
  }

  // optional .ws_engine.IPL_BLUR blur = 2;
  if (has_blur()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->blur_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ws_engine.IPL_Engine)
  return target;
}

int IPL_Engine::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ws_engine.IPL_Engine)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .ws_engine.IPL_RGB2Gray rgb2gray = 1;
    if (has_rgb2gray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rgb2gray_);
    }

    // optional .ws_engine.IPL_BLUR blur = 2;
    if (has_blur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->blur_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPL_Engine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ws_engine.IPL_Engine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IPL_Engine* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IPL_Engine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ws_engine.IPL_Engine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ws_engine.IPL_Engine)
    MergeFrom(*source);
  }
}

void IPL_Engine::MergeFrom(const IPL_Engine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ws_engine.IPL_Engine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rgb2gray()) {
      mutable_rgb2gray()->::ws_engine::IPL_RGB2Gray::MergeFrom(from.rgb2gray());
    }
    if (from.has_blur()) {
      mutable_blur()->::ws_engine::IPL_BLUR::MergeFrom(from.blur());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IPL_Engine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ws_engine.IPL_Engine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPL_Engine::CopyFrom(const IPL_Engine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ws_engine.IPL_Engine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPL_Engine::IsInitialized() const {

  if (has_rgb2gray()) {
    if (!this->rgb2gray_->IsInitialized()) return false;
  }
  if (has_blur()) {
    if (!this->blur_->IsInitialized()) return false;
  }
  return true;
}

void IPL_Engine::Swap(IPL_Engine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPL_Engine::InternalSwap(IPL_Engine* other) {
  std::swap(rgb2gray_, other->rgb2gray_);
  std::swap(blur_, other->blur_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IPL_Engine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPL_Engine_descriptor_;
  metadata.reflection = IPL_Engine_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IPL_Engine

// optional .ws_engine.IPL_RGB2Gray rgb2gray = 1;
bool IPL_Engine::has_rgb2gray() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IPL_Engine::set_has_rgb2gray() {
  _has_bits_[0] |= 0x00000001u;
}
void IPL_Engine::clear_has_rgb2gray() {
  _has_bits_[0] &= ~0x00000001u;
}
void IPL_Engine::clear_rgb2gray() {
  if (rgb2gray_ != NULL) rgb2gray_->::ws_engine::IPL_RGB2Gray::Clear();
  clear_has_rgb2gray();
}
const ::ws_engine::IPL_RGB2Gray& IPL_Engine::rgb2gray() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_Engine.rgb2gray)
  return rgb2gray_ != NULL ? *rgb2gray_ : *default_instance_->rgb2gray_;
}
::ws_engine::IPL_RGB2Gray* IPL_Engine::mutable_rgb2gray() {
  set_has_rgb2gray();
  if (rgb2gray_ == NULL) {
    rgb2gray_ = new ::ws_engine::IPL_RGB2Gray;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_Engine.rgb2gray)
  return rgb2gray_;
}
::ws_engine::IPL_RGB2Gray* IPL_Engine::release_rgb2gray() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_Engine.rgb2gray)
  clear_has_rgb2gray();
  ::ws_engine::IPL_RGB2Gray* temp = rgb2gray_;
  rgb2gray_ = NULL;
  return temp;
}
void IPL_Engine::set_allocated_rgb2gray(::ws_engine::IPL_RGB2Gray* rgb2gray) {
  delete rgb2gray_;
  rgb2gray_ = rgb2gray;
  if (rgb2gray) {
    set_has_rgb2gray();
  } else {
    clear_has_rgb2gray();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_Engine.rgb2gray)
}

// optional .ws_engine.IPL_BLUR blur = 2;
bool IPL_Engine::has_blur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IPL_Engine::set_has_blur() {
  _has_bits_[0] |= 0x00000002u;
}
void IPL_Engine::clear_has_blur() {
  _has_bits_[0] &= ~0x00000002u;
}
void IPL_Engine::clear_blur() {
  if (blur_ != NULL) blur_->::ws_engine::IPL_BLUR::Clear();
  clear_has_blur();
}
const ::ws_engine::IPL_BLUR& IPL_Engine::blur() const {
  // @@protoc_insertion_point(field_get:ws_engine.IPL_Engine.blur)
  return blur_ != NULL ? *blur_ : *default_instance_->blur_;
}
::ws_engine::IPL_BLUR* IPL_Engine::mutable_blur() {
  set_has_blur();
  if (blur_ == NULL) {
    blur_ = new ::ws_engine::IPL_BLUR;
  }
  // @@protoc_insertion_point(field_mutable:ws_engine.IPL_Engine.blur)
  return blur_;
}
::ws_engine::IPL_BLUR* IPL_Engine::release_blur() {
  // @@protoc_insertion_point(field_release:ws_engine.IPL_Engine.blur)
  clear_has_blur();
  ::ws_engine::IPL_BLUR* temp = blur_;
  blur_ = NULL;
  return temp;
}
void IPL_Engine::set_allocated_blur(::ws_engine::IPL_BLUR* blur) {
  delete blur_;
  blur_ = blur;
  if (blur) {
    set_has_blur();
  } else {
    clear_has_blur();
  }
  // @@protoc_insertion_point(field_set_allocated:ws_engine.IPL_Engine.blur)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ws_engine

// @@protoc_insertion_point(global_scope)
