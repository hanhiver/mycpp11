// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace msgType {
class ProtoTest;
class ProtoTestDefaultTypeInternal;
extern ProtoTestDefaultTypeInternal _ProtoTest_default_instance_;
class ProtoTestSub;
class ProtoTestSubDefaultTypeInternal;
extern ProtoTestSubDefaultTypeInternal _ProtoTestSub_default_instance_;
}  // namespace msgType
PROTOBUF_NAMESPACE_OPEN
template<> ::msgType::ProtoTest* Arena::CreateMaybeMessage<::msgType::ProtoTest>(Arena*);
template<> ::msgType::ProtoTestSub* Arena::CreateMaybeMessage<::msgType::ProtoTestSub>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msgType {

enum EnumTest : int {
  TEST0 = 0,
  TEST1 = 1,
  TEST2 = 2,
  TEST3 = 3,
  EnumTest_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EnumTest_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EnumTest_IsValid(int value);
constexpr EnumTest EnumTest_MIN = TEST0;
constexpr EnumTest EnumTest_MAX = TEST3;
constexpr int EnumTest_ARRAYSIZE = EnumTest_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnumTest_descriptor();
template<typename T>
inline const std::string& EnumTest_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnumTest>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnumTest_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnumTest_descriptor(), enum_t_value);
}
inline bool EnumTest_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EnumTest* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnumTest>(
    EnumTest_descriptor(), name, value);
}
// ===================================================================

class ProtoTestSub PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgType.ProtoTestSub) */ {
 public:
  inline ProtoTestSub() : ProtoTestSub(nullptr) {}
  virtual ~ProtoTestSub();

  ProtoTestSub(const ProtoTestSub& from);
  ProtoTestSub(ProtoTestSub&& from) noexcept
    : ProtoTestSub() {
    *this = ::std::move(from);
  }

  inline ProtoTestSub& operator=(const ProtoTestSub& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoTestSub& operator=(ProtoTestSub&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoTestSub& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoTestSub* internal_default_instance() {
    return reinterpret_cast<const ProtoTestSub*>(
               &_ProtoTestSub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoTestSub& a, ProtoTestSub& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoTestSub* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoTestSub* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoTestSub* New() const final {
    return CreateMaybeMessage<ProtoTestSub>(nullptr);
  }

  ProtoTestSub* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoTestSub>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoTestSub& from);
  void MergeFrom(const ProtoTestSub& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoTestSub* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgType.ProtoTestSub";
  }
  protected:
  explicit ProtoTestSub(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTest2FieldNumber = 2,
    kTest1FieldNumber = 1,
  };
  // string test2 = 2;
  void clear_test2();
  const std::string& test2() const;
  void set_test2(const std::string& value);
  void set_test2(std::string&& value);
  void set_test2(const char* value);
  void set_test2(const char* value, size_t size);
  std::string* mutable_test2();
  std::string* release_test2();
  void set_allocated_test2(std::string* test2);
  private:
  const std::string& _internal_test2() const;
  void _internal_set_test2(const std::string& value);
  std::string* _internal_mutable_test2();
  public:

  // int32 test1 = 1;
  void clear_test1();
  ::PROTOBUF_NAMESPACE_ID::int32 test1() const;
  void set_test1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test1() const;
  void _internal_set_test1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msgType.ProtoTestSub)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test2_;
  ::PROTOBUF_NAMESPACE_ID::int32 test1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class ProtoTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgType.ProtoTest) */ {
 public:
  inline ProtoTest() : ProtoTest(nullptr) {}
  virtual ~ProtoTest();

  ProtoTest(const ProtoTest& from);
  ProtoTest(ProtoTest&& from) noexcept
    : ProtoTest() {
    *this = ::std::move(from);
  }

  inline ProtoTest& operator=(const ProtoTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoTest& operator=(ProtoTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoTest* internal_default_instance() {
    return reinterpret_cast<const ProtoTest*>(
               &_ProtoTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoTest& a, ProtoTest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoTest* New() const final {
    return CreateMaybeMessage<ProtoTest>(nullptr);
  }

  ProtoTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoTest& from);
  void MergeFrom(const ProtoTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgType.ProtoTest";
  }
  protected:
  explicit ProtoTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDouTestFieldNumber = 3,
    kSubTestFieldNumber = 4,
    kStrTestFieldNumber = 2,
    kBytesTestFieldNumber = 6,
    kInt32TestFieldNumber = 1,
    kEnumTestFieldNumber = 5,
  };
  // repeated double dou_test = 3;
  int dou_test_size() const;
  private:
  int _internal_dou_test_size() const;
  public:
  void clear_dou_test();
  private:
  double _internal_dou_test(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_dou_test() const;
  void _internal_add_dou_test(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_dou_test();
  public:
  double dou_test(int index) const;
  void set_dou_test(int index, double value);
  void add_dou_test(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      dou_test() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_dou_test();

  // repeated .msgType.ProtoTestSub sub_test = 4;
  int sub_test_size() const;
  private:
  int _internal_sub_test_size() const;
  public:
  void clear_sub_test();
  ::msgType::ProtoTestSub* mutable_sub_test(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgType::ProtoTestSub >*
      mutable_sub_test();
  private:
  const ::msgType::ProtoTestSub& _internal_sub_test(int index) const;
  ::msgType::ProtoTestSub* _internal_add_sub_test();
  public:
  const ::msgType::ProtoTestSub& sub_test(int index) const;
  ::msgType::ProtoTestSub* add_sub_test();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgType::ProtoTestSub >&
      sub_test() const;

  // string str_test = 2;
  void clear_str_test();
  const std::string& str_test() const;
  void set_str_test(const std::string& value);
  void set_str_test(std::string&& value);
  void set_str_test(const char* value);
  void set_str_test(const char* value, size_t size);
  std::string* mutable_str_test();
  std::string* release_str_test();
  void set_allocated_str_test(std::string* str_test);
  private:
  const std::string& _internal_str_test() const;
  void _internal_set_str_test(const std::string& value);
  std::string* _internal_mutable_str_test();
  public:

  // bytes bytes_test = 6;
  void clear_bytes_test();
  const std::string& bytes_test() const;
  void set_bytes_test(const std::string& value);
  void set_bytes_test(std::string&& value);
  void set_bytes_test(const char* value);
  void set_bytes_test(const void* value, size_t size);
  std::string* mutable_bytes_test();
  std::string* release_bytes_test();
  void set_allocated_bytes_test(std::string* bytes_test);
  private:
  const std::string& _internal_bytes_test() const;
  void _internal_set_bytes_test(const std::string& value);
  std::string* _internal_mutable_bytes_test();
  public:

  // int32 int32_test = 1;
  void clear_int32_test();
  ::PROTOBUF_NAMESPACE_ID::int32 int32_test() const;
  void set_int32_test(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_test() const;
  void _internal_set_int32_test(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .msgType.EnumTest enum_test = 5;
  void clear_enum_test();
  ::msgType::EnumTest enum_test() const;
  void set_enum_test(::msgType::EnumTest value);
  private:
  ::msgType::EnumTest _internal_enum_test() const;
  void _internal_set_enum_test(::msgType::EnumTest value);
  public:

  // @@protoc_insertion_point(class_scope:msgType.ProtoTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > dou_test_;
  mutable std::atomic<int> _dou_test_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgType::ProtoTestSub > sub_test_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_test_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_test_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_test_;
  int enum_test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoTestSub

// int32 test1 = 1;
inline void ProtoTestSub::clear_test1() {
  test1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoTestSub::_internal_test1() const {
  return test1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoTestSub::test1() const {
  // @@protoc_insertion_point(field_get:msgType.ProtoTestSub.test1)
  return _internal_test1();
}
inline void ProtoTestSub::_internal_set_test1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test1_ = value;
}
inline void ProtoTestSub::set_test1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test1(value);
  // @@protoc_insertion_point(field_set:msgType.ProtoTestSub.test1)
}

// string test2 = 2;
inline void ProtoTestSub::clear_test2() {
  test2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoTestSub::test2() const {
  // @@protoc_insertion_point(field_get:msgType.ProtoTestSub.test2)
  return _internal_test2();
}
inline void ProtoTestSub::set_test2(const std::string& value) {
  _internal_set_test2(value);
  // @@protoc_insertion_point(field_set:msgType.ProtoTestSub.test2)
}
inline std::string* ProtoTestSub::mutable_test2() {
  // @@protoc_insertion_point(field_mutable:msgType.ProtoTestSub.test2)
  return _internal_mutable_test2();
}
inline const std::string& ProtoTestSub::_internal_test2() const {
  return test2_.Get();
}
inline void ProtoTestSub::_internal_set_test2(const std::string& value) {
  
  test2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoTestSub::set_test2(std::string&& value) {
  
  test2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msgType.ProtoTestSub.test2)
}
inline void ProtoTestSub::set_test2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msgType.ProtoTestSub.test2)
}
inline void ProtoTestSub::set_test2(const char* value,
    size_t size) {
  
  test2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msgType.ProtoTestSub.test2)
}
inline std::string* ProtoTestSub::_internal_mutable_test2() {
  
  return test2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoTestSub::release_test2() {
  // @@protoc_insertion_point(field_release:msgType.ProtoTestSub.test2)
  return test2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoTestSub::set_allocated_test2(std::string* test2) {
  if (test2 != nullptr) {
    
  } else {
    
  }
  test2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msgType.ProtoTestSub.test2)
}

// -------------------------------------------------------------------

// ProtoTest

// int32 int32_test = 1;
inline void ProtoTest::clear_int32_test() {
  int32_test_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoTest::_internal_int32_test() const {
  return int32_test_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoTest::int32_test() const {
  // @@protoc_insertion_point(field_get:msgType.ProtoTest.int32_test)
  return _internal_int32_test();
}
inline void ProtoTest::_internal_set_int32_test(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int32_test_ = value;
}
inline void ProtoTest::set_int32_test(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32_test(value);
  // @@protoc_insertion_point(field_set:msgType.ProtoTest.int32_test)
}

// string str_test = 2;
inline void ProtoTest::clear_str_test() {
  str_test_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoTest::str_test() const {
  // @@protoc_insertion_point(field_get:msgType.ProtoTest.str_test)
  return _internal_str_test();
}
inline void ProtoTest::set_str_test(const std::string& value) {
  _internal_set_str_test(value);
  // @@protoc_insertion_point(field_set:msgType.ProtoTest.str_test)
}
inline std::string* ProtoTest::mutable_str_test() {
  // @@protoc_insertion_point(field_mutable:msgType.ProtoTest.str_test)
  return _internal_mutable_str_test();
}
inline const std::string& ProtoTest::_internal_str_test() const {
  return str_test_.Get();
}
inline void ProtoTest::_internal_set_str_test(const std::string& value) {
  
  str_test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoTest::set_str_test(std::string&& value) {
  
  str_test_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msgType.ProtoTest.str_test)
}
inline void ProtoTest::set_str_test(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msgType.ProtoTest.str_test)
}
inline void ProtoTest::set_str_test(const char* value,
    size_t size) {
  
  str_test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msgType.ProtoTest.str_test)
}
inline std::string* ProtoTest::_internal_mutable_str_test() {
  
  return str_test_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoTest::release_str_test() {
  // @@protoc_insertion_point(field_release:msgType.ProtoTest.str_test)
  return str_test_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoTest::set_allocated_str_test(std::string* str_test) {
  if (str_test != nullptr) {
    
  } else {
    
  }
  str_test_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_test,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msgType.ProtoTest.str_test)
}

// repeated double dou_test = 3;
inline int ProtoTest::_internal_dou_test_size() const {
  return dou_test_.size();
}
inline int ProtoTest::dou_test_size() const {
  return _internal_dou_test_size();
}
inline void ProtoTest::clear_dou_test() {
  dou_test_.Clear();
}
inline double ProtoTest::_internal_dou_test(int index) const {
  return dou_test_.Get(index);
}
inline double ProtoTest::dou_test(int index) const {
  // @@protoc_insertion_point(field_get:msgType.ProtoTest.dou_test)
  return _internal_dou_test(index);
}
inline void ProtoTest::set_dou_test(int index, double value) {
  dou_test_.Set(index, value);
  // @@protoc_insertion_point(field_set:msgType.ProtoTest.dou_test)
}
inline void ProtoTest::_internal_add_dou_test(double value) {
  dou_test_.Add(value);
}
inline void ProtoTest::add_dou_test(double value) {
  _internal_add_dou_test(value);
  // @@protoc_insertion_point(field_add:msgType.ProtoTest.dou_test)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ProtoTest::_internal_dou_test() const {
  return dou_test_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ProtoTest::dou_test() const {
  // @@protoc_insertion_point(field_list:msgType.ProtoTest.dou_test)
  return _internal_dou_test();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ProtoTest::_internal_mutable_dou_test() {
  return &dou_test_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ProtoTest::mutable_dou_test() {
  // @@protoc_insertion_point(field_mutable_list:msgType.ProtoTest.dou_test)
  return _internal_mutable_dou_test();
}

// repeated .msgType.ProtoTestSub sub_test = 4;
inline int ProtoTest::_internal_sub_test_size() const {
  return sub_test_.size();
}
inline int ProtoTest::sub_test_size() const {
  return _internal_sub_test_size();
}
inline void ProtoTest::clear_sub_test() {
  sub_test_.Clear();
}
inline ::msgType::ProtoTestSub* ProtoTest::mutable_sub_test(int index) {
  // @@protoc_insertion_point(field_mutable:msgType.ProtoTest.sub_test)
  return sub_test_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgType::ProtoTestSub >*
ProtoTest::mutable_sub_test() {
  // @@protoc_insertion_point(field_mutable_list:msgType.ProtoTest.sub_test)
  return &sub_test_;
}
inline const ::msgType::ProtoTestSub& ProtoTest::_internal_sub_test(int index) const {
  return sub_test_.Get(index);
}
inline const ::msgType::ProtoTestSub& ProtoTest::sub_test(int index) const {
  // @@protoc_insertion_point(field_get:msgType.ProtoTest.sub_test)
  return _internal_sub_test(index);
}
inline ::msgType::ProtoTestSub* ProtoTest::_internal_add_sub_test() {
  return sub_test_.Add();
}
inline ::msgType::ProtoTestSub* ProtoTest::add_sub_test() {
  // @@protoc_insertion_point(field_add:msgType.ProtoTest.sub_test)
  return _internal_add_sub_test();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgType::ProtoTestSub >&
ProtoTest::sub_test() const {
  // @@protoc_insertion_point(field_list:msgType.ProtoTest.sub_test)
  return sub_test_;
}

// .msgType.EnumTest enum_test = 5;
inline void ProtoTest::clear_enum_test() {
  enum_test_ = 0;
}
inline ::msgType::EnumTest ProtoTest::_internal_enum_test() const {
  return static_cast< ::msgType::EnumTest >(enum_test_);
}
inline ::msgType::EnumTest ProtoTest::enum_test() const {
  // @@protoc_insertion_point(field_get:msgType.ProtoTest.enum_test)
  return _internal_enum_test();
}
inline void ProtoTest::_internal_set_enum_test(::msgType::EnumTest value) {
  
  enum_test_ = value;
}
inline void ProtoTest::set_enum_test(::msgType::EnumTest value) {
  _internal_set_enum_test(value);
  // @@protoc_insertion_point(field_set:msgType.ProtoTest.enum_test)
}

// bytes bytes_test = 6;
inline void ProtoTest::clear_bytes_test() {
  bytes_test_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoTest::bytes_test() const {
  // @@protoc_insertion_point(field_get:msgType.ProtoTest.bytes_test)
  return _internal_bytes_test();
}
inline void ProtoTest::set_bytes_test(const std::string& value) {
  _internal_set_bytes_test(value);
  // @@protoc_insertion_point(field_set:msgType.ProtoTest.bytes_test)
}
inline std::string* ProtoTest::mutable_bytes_test() {
  // @@protoc_insertion_point(field_mutable:msgType.ProtoTest.bytes_test)
  return _internal_mutable_bytes_test();
}
inline const std::string& ProtoTest::_internal_bytes_test() const {
  return bytes_test_.Get();
}
inline void ProtoTest::_internal_set_bytes_test(const std::string& value) {
  
  bytes_test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoTest::set_bytes_test(std::string&& value) {
  
  bytes_test_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msgType.ProtoTest.bytes_test)
}
inline void ProtoTest::set_bytes_test(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bytes_test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msgType.ProtoTest.bytes_test)
}
inline void ProtoTest::set_bytes_test(const void* value,
    size_t size) {
  
  bytes_test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msgType.ProtoTest.bytes_test)
}
inline std::string* ProtoTest::_internal_mutable_bytes_test() {
  
  return bytes_test_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoTest::release_bytes_test() {
  // @@protoc_insertion_point(field_release:msgType.ProtoTest.bytes_test)
  return bytes_test_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoTest::set_allocated_bytes_test(std::string* bytes_test) {
  if (bytes_test != nullptr) {
    
  } else {
    
  }
  bytes_test_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes_test,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msgType.ProtoTest.bytes_test)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgType

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msgType::EnumTest> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msgType::EnumTest>() {
  return ::msgType::EnumTest_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
